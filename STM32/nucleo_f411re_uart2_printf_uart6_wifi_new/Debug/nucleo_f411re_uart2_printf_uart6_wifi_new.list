
nucleo_f411re_uart2_printf_uart6_wifi_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006520  08006520  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006528  08006528  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006530  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  2000006c  0800659c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800659c  00008b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea77  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002477  00000000  00000000  00016b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00018f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afc  00000000  00000000  00019db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a61  00000000  00000000  0001a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010185  00000000  00000000  0003230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090638  00000000  00000000  00042492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000d2b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d72c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d4 	.word	0x080060d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080060d4 	.word	0x080060d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005da:	bf00      	nop
  __ASM volatile ("NOP");
 80005dc:	bf00      	nop
  __ASM volatile ("NOP");
 80005de:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80005e8:	2300      	movs	r3, #0
 80005ea:	e000      	b.n	80005ee <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80005ec:	2301      	movs	r3, #1
  }

}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000edf0 	.word	0xe000edf0
 80005fc:	e0001000 	.word	0xe0001000

08000600 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <DWT_Delay_us+0x40>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800060e:	f002 fa61 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <DWT_Delay_us+0x44>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	0c9b      	lsrs	r3, r3, #18
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000624:	bf00      	nop
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <DWT_Delay_us+0x40>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	d3f8      	bcc.n	8000626 <DWT_Delay_us+0x26>
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e0001000 	.word	0xe0001000
 8000644:	431bde83 	.word	0x431bde83

08000648 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f001 fbf8 	bl	8001e6c <HAL_GPIO_Init>
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f001 fbdc 	bl	8001e6c <HAL_GPIO_Init>
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80006c0:	f7ff ff6e 	bl	80005a0 <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80006c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c8:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <DHT11_Init+0x2c>)
 80006ca:	f7ff ffbd 	bl	8000648 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <DHT11_Init+0x2c>)
 80006d6:	f001 fd65 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006de:	f001 f9fd 	bl	8001adc <HAL_Delay>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020800 	.word	0x40020800

080006ec <DHT11_Start>:

void DHT11_Start (void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80006f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f4:	4811      	ldr	r0, [pc, #68]	@ (800073c <DHT11_Start+0x50>)
 80006f6:	f7ff ffa7 	bl	8000648 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000700:	480e      	ldr	r0, [pc, #56]	@ (800073c <DHT11_Start+0x50>)
 8000702:	f001 fd4f 	bl	80021a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <DHT11_Start+0x50>)
 800070e:	f001 fd49 	bl	80021a4 <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 8000712:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000716:	f7ff ff73 	bl	8000600 <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <DHT11_Start+0x50>)
 8000722:	f001 fd3f 	bl	80021a4 <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8000726:	2014      	movs	r0, #20
 8000728:	f7ff ff6a 	bl	8000600 <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800072c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <DHT11_Start+0x50>)
 8000732:	f7ff ffa7 	bl	8000684 <Set_Pin_Input>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020800 	.word	0x40020800

08000740 <DHT11_Stop>:

void DHT11_Stop (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <DHT11_Stop+0x20>)
 800074a:	f7ff ff7d 	bl	8000648 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <DHT11_Stop+0x20>)
 8000756:	f001 fd25 	bl	80021a4 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40020800 	.word	0x40020800

08000764 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800076e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000772:	4812      	ldr	r0, [pc, #72]	@ (80007bc <DHT11_Check_Response+0x58>)
 8000774:	f001 fcfe 	bl	8002174 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10f      	bne.n	800079e <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 800077e:	2050      	movs	r0, #80	@ 0x50
 8000780:	f7ff ff3e 	bl	8000600 <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000784:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <DHT11_Check_Response+0x58>)
 800078a:	f001 fcf3 	bl	8002174 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <DHT11_Check_Response+0x36>
 8000794:	2301      	movs	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	e001      	b.n	800079e <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 800079a:	23ff      	movs	r3, #255	@ 0xff
 800079c:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 800079e:	bf00      	nop
 80007a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <DHT11_Check_Response+0x58>)
 80007a6:	f001 fce5 	bl	8002174 <HAL_GPIO_ReadPin>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f7      	bne.n	80007a0 <DHT11_Check_Response+0x3c>

	return Response;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020800 	.word	0x40020800

080007c0 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	71bb      	strb	r3, [r7, #6]
 80007ca:	e03a      	b.n	8000842 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80007cc:	bf00      	nop
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	4820      	ldr	r0, [pc, #128]	@ (8000854 <DHT11_Read+0x94>)
 80007d4:	f001 fcce 	bl	8002174 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f7      	beq.n	80007ce <DHT11_Read+0xe>
		DWT_Delay_us(40);
 80007de:	2028      	movs	r0, #40	@ 0x28
 80007e0:	f7ff ff0e 	bl	8000600 <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80007e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e8:	481a      	ldr	r0, [pc, #104]	@ (8000854 <DHT11_Read+0x94>)
 80007ea:	f001 fcc3 	bl	8002174 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10e      	bne.n	8000812 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2201      	movs	r2, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	b25b      	sxtb	r3, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	b25a      	sxtb	r2, r3
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	4013      	ands	r3, r2
 800080c:	b25b      	sxtb	r3, r3
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	e00b      	b.n	800082a <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	f1c3 0307 	rsb	r3, r3, #7
 8000818:	2201      	movs	r2, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	b25a      	sxtb	r2, r3
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	4313      	orrs	r3, r2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800082a:	bf00      	nop
 800082c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <DHT11_Read+0x94>)
 8000832:	f001 fc9f 	bl	8002174 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f7      	bne.n	800082c <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	3301      	adds	r3, #1
 8000840:	71bb      	strb	r3, [r7, #6]
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9c1      	bls.n	80007cc <DHT11_Read+0xc>
	}
	return i;
 8000848:	79fb      	ldrb	r3, [r7, #7]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40020800 	.word	0x40020800

08000858 <DHT11_readData>:

DHT11_TypeDef DHT11_readData() // 온습도에서 읽을 데이터들
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 8000860:	f7ff ff44 	bl	80006ec <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8000864:	f7ff ff7e 	bl	8000764 <DHT11_Check_Response>
 8000868:	4603      	mov	r3, r0
 800086a:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 800086c:	f7ff ffa8 	bl	80007c0 <DHT11_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 8000874:	f7ff ffa4 	bl	80007c0 <DHT11_Read>
 8000878:	4603      	mov	r3, r0
 800087a:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 800087c:	f7ff ffa0 	bl	80007c0 <DHT11_Read>
 8000880:	4603      	mov	r3, r0
 8000882:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 8000884:	f7ff ff9c 	bl	80007c0 <DHT11_Read>
 8000888:	4603      	mov	r3, r0
 800088a:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 800088c:	f7ff ff98 	bl	80007c0 <DHT11_Read>
 8000890:	4603      	mov	r3, r0
 8000892:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 8000894:	f7ff ff54 	bl	8000740 <DHT11_Stop>
	return dht11;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	461a      	mov	r2, r3
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	6010      	str	r0, [r2, #0]
 80008a4:	889b      	ldrh	r3, [r3, #4]
 80008a6:	8093      	strh	r3, [r2, #4]
}
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	2100      	movs	r1, #0
 80008ca:	68b8      	ldr	r0, [r7, #8]
 80008cc:	f004 fb76 	bl	8004fbc <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80008d0:	f240 4202 	movw	r2, #1026	@ 0x402
 80008d4:	2100      	movs	r1, #0
 80008d6:	4826      	ldr	r0, [pc, #152]	@ (8000970 <esp_at_command+0xc0>)
 80008d8:	f004 fb70 	bl	8004fbc <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fc89 	bl	80001f4 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	2364      	movs	r3, #100	@ 0x64
 80008e8:	68f9      	ldr	r1, [r7, #12]
 80008ea:	4822      	ldr	r0, [pc, #136]	@ (8000974 <esp_at_command+0xc4>)
 80008ec:	f003 f92e 	bl	8003b4c <HAL_UART_Transmit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d032      	beq.n	800095c <esp_at_command+0xac>
        return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e035      	b.n	8000968 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <esp_at_command+0xc0>)
 80008fe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000906:	d302      	bcc.n	800090e <esp_at_command+0x5e>
            return -2;
 8000908:	f06f 0301 	mvn.w	r3, #1
 800090c:	e02c      	b.n	8000968 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800090e:	491a      	ldr	r1, [pc, #104]	@ (8000978 <esp_at_command+0xc8>)
 8000910:	4817      	ldr	r0, [pc, #92]	@ (8000970 <esp_at_command+0xc0>)
 8000912:	f004 fbd7 	bl	80050c4 <strstr>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <esp_at_command+0x72>
            return -3;
 800091c:	f06f 0302 	mvn.w	r3, #2
 8000920:	e022      	b.n	8000968 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000922:	4916      	ldr	r1, [pc, #88]	@ (800097c <esp_at_command+0xcc>)
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <esp_at_command+0xc0>)
 8000926:	f004 fbcd 	bl	80050c4 <strstr>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00e      	beq.n	800094e <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <esp_at_command+0xc0>)
 8000932:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000936:	461a      	mov	r2, r3
 8000938:	490d      	ldr	r1, [pc, #52]	@ (8000970 <esp_at_command+0xc0>)
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	f004 fc53 	bl	80051e6 <memcpy>
            *length = cb_data.length;
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <esp_at_command+0xc0>)
 8000942:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	801a      	strh	r2, [r3, #0]
            return 0;
 800094a:	2300      	movs	r3, #0
 800094c:	e00c      	b.n	8000968 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	3b0a      	subs	r3, #10
 8000952:	b29b      	uxth	r3, r3
 8000954:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000956:	200a      	movs	r0, #10
 8000958:	f001 f8c0 	bl	8001adc <HAL_Delay>
    while(time_out > 0)
 800095c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dccb      	bgt.n	80008fc <esp_at_command+0x4c>
    }
    return -4;
 8000964:	f06f 0303 	mvn.w	r3, #3
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200004d0 	.word	0x200004d0
 8000974:	20000968 	.word	0x20000968
 8000978:	080060ec 	.word	0x080060ec
 800097c:	080060f4 	.word	0x080060f4

08000980 <esp_reset>:

static int esp_reset(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800098a:	1dba      	adds	r2, r7, #6
 800098c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000990:	4909      	ldr	r1, [pc, #36]	@ (80009b8 <esp_reset+0x38>)
 8000992:	480a      	ldr	r0, [pc, #40]	@ (80009bc <esp_reset+0x3c>)
 8000994:	f7ff ff8c 	bl	80008b0 <esp_at_command>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <esp_reset+0x24>
    {
    	return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e004      	b.n	80009ae <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80009a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009a8:	f001 f898 	bl	8001adc <HAL_Delay>
    return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000098 	.word	0x20000098
 80009bc:	080060f8 	.word	0x080060f8

080009c0 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80009ce:	f107 020a 	add.w	r2, r7, #10
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	492d      	ldr	r1, [pc, #180]	@ (8000a8c <request_ip_addr+0xcc>)
 80009d8:	482d      	ldr	r0, [pc, #180]	@ (8000a90 <request_ip_addr+0xd0>)
 80009da:	f7ff ff69 	bl	80008b0 <esp_at_command>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80009e4:	482b      	ldr	r0, [pc, #172]	@ (8000a94 <request_ip_addr+0xd4>)
 80009e6:	f004 f9e9 	bl	8004dbc <puts>
 80009ea:	e049      	b.n	8000a80 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80009ec:	492a      	ldr	r1, [pc, #168]	@ (8000a98 <request_ip_addr+0xd8>)
 80009ee:	4827      	ldr	r0, [pc, #156]	@ (8000a8c <request_ip_addr+0xcc>)
 80009f0:	f004 fb0c 	bl	800500c <strtok>
 80009f4:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d03e      	beq.n	8000a7a <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	e009      	b.n	8000a16 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <request_ip_addr+0xcc>)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 f978 	bl	8004d00 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	3301      	adds	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dbf0      	blt.n	8000a02 <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000a20:	e02b      	b.n	8000a7a <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000a22:	491e      	ldr	r1, [pc, #120]	@ (8000a9c <request_ip_addr+0xdc>)
 8000a24:	6978      	ldr	r0, [r7, #20]
 8000a26:	f004 fb4d 	bl	80050c4 <strstr>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d01f      	beq.n	8000a70 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000a30:	491b      	ldr	r1, [pc, #108]	@ (8000aa0 <request_ip_addr+0xe0>)
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f004 faea 	bl	800500c <strtok>
                ip = strtok(NULL, "\"");
 8000a38:	4919      	ldr	r1, [pc, #100]	@ (8000aa0 <request_ip_addr+0xe0>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f004 fae6 	bl	800500c <strtok>
 8000a40:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000a42:	4918      	ldr	r1, [pc, #96]	@ (8000aa4 <request_ip_addr+0xe4>)
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fbcb 	bl	80001e0 <strcmp>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00f      	beq.n	8000a70 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000a50:	2210      	movs	r2, #16
 8000a52:	2100      	movs	r1, #0
 8000a54:	4814      	ldr	r0, [pc, #80]	@ (8000aa8 <request_ip_addr+0xe8>)
 8000a56:	f004 fab1 	bl	8004fbc <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fbca 	bl	80001f4 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	68f9      	ldr	r1, [r7, #12]
 8000a66:	4810      	ldr	r0, [pc, #64]	@ (8000aa8 <request_ip_addr+0xe8>)
 8000a68:	f004 fbbd 	bl	80051e6 <memcpy>
                    return 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e009      	b.n	8000a84 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000a70:	4909      	ldr	r1, [pc, #36]	@ (8000a98 <request_ip_addr+0xd8>)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f004 faca 	bl	800500c <strtok>
 8000a78:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1d0      	bne.n	8000a22 <request_ip_addr+0x62>
        }
    }
    return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000098 	.word	0x20000098
 8000a90:	08006140 	.word	0x08006140
 8000a94:	0800614c 	.word	0x0800614c
 8000a98:	08006134 	.word	0x08006134
 8000a9c:	0800616c 	.word	0x0800616c
 8000aa0:	0800613c 	.word	0x0800613c
 8000aa4:	08006104 	.word	0x08006104
 8000aa8:	20000088 	.word	0x20000088

08000aac <esp_client_conn>:
int esp_client_conn()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	@ 0x48
 8000ab0:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	223c      	movs	r2, #60	@ 0x3c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 fa7c 	bl	8004fbc <memset>
  uint16_t length = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000ac8:	f107 0008 	add.w	r0, r7, #8
 8000acc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ad0:	4a09      	ldr	r2, [pc, #36]	@ (8000af8 <esp_client_conn+0x4c>)
 8000ad2:	490a      	ldr	r1, [pc, #40]	@ (8000afc <esp_client_conn+0x50>)
 8000ad4:	f004 f97a 	bl	8004dcc <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000ad8:	1dba      	adds	r2, r7, #6
 8000ada:	f107 0008 	add.w	r0, r7, #8
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <esp_client_conn+0x54>)
 8000ae4:	f7ff fee4 	bl	80008b0 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000ae8:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <esp_client_conn+0x58>)
 8000aea:	f000 f90b 	bl	8000d04 <esp_send_data>
	return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3748      	adds	r7, #72	@ 0x48
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	08006178 	.word	0x08006178
 8000afc:	08006188 	.word	0x08006188
 8000b00:	20000098 	.word	0x20000098
 8000b04:	080061a4 	.word	0x080061a4

08000b08 <esp_get_status>:
int esp_get_status()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000b12:	1dba      	adds	r2, r7, #6
 8000b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b18:	4909      	ldr	r1, [pc, #36]	@ (8000b40 <esp_get_status+0x38>)
 8000b1a:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <esp_get_status+0x3c>)
 8000b1c:	f7ff fec8 	bl	80008b0 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000b20:	4909      	ldr	r1, [pc, #36]	@ (8000b48 <esp_get_status+0x40>)
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <esp_get_status+0x38>)
 8000b24:	f004 face 	bl	80050c4 <strstr>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <esp_get_status+0x2a>
    {
    	return 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e001      	b.n	8000b36 <esp_get_status+0x2e>
    }
	return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000098 	.word	0x20000098
 8000b44:	080061b8 	.word	0x080061b8
 8000b48:	080061c8 	.word	0x080061c8

08000b4c <drv_esp_init>:
int drv_esp_init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000b50:	2210      	movs	r2, #16
 8000b52:	2100      	movs	r1, #0
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <drv_esp_init+0x24>)
 8000b56:	f004 fa31 	bl	8004fbc <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4905      	ldr	r1, [pc, #20]	@ (8000b74 <drv_esp_init+0x28>)
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <drv_esp_init+0x2c>)
 8000b60:	f003 f87f 	bl	8003c62 <HAL_UART_Receive_IT>

    return esp_reset();
 8000b64:	f7ff ff0c 	bl	8000980 <esp_reset>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000088 	.word	0x20000088
 8000b74:	200004cf 	.word	0x200004cf
 8000b78:	20000968 	.word	0x20000968

08000b7c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	@ 0x50
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	223c      	movs	r2, #60	@ 0x3c
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 fa0f 	bl	8004fbc <memset>
  if(ssid == NULL || passwd == NULL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <ap_conn_func+0x2e>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000baa:	4817      	ldr	r0, [pc, #92]	@ (8000c08 <ap_conn_func+0x8c>)
 8000bac:	f004 f906 	bl	8004dbc <puts>
 8000bb0:	e026      	b.n	8000c00 <ap_conn_func+0x84>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000bb2:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	4914      	ldr	r1, [pc, #80]	@ (8000c0c <ap_conn_func+0x90>)
 8000bbc:	4814      	ldr	r0, [pc, #80]	@ (8000c10 <ap_conn_func+0x94>)
 8000bbe:	f7ff fe77 	bl	80008b0 <esp_at_command>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <ap_conn_func+0x52>
      printf("Station mode fail\r\n");
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <ap_conn_func+0x98>)
 8000bca:	f004 f8f7 	bl	8004dbc <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000bce:	f107 000c 	add.w	r0, r7, #12
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4910      	ldr	r1, [pc, #64]	@ (8000c18 <ap_conn_func+0x9c>)
 8000bd8:	f004 f8f8 	bl	8004dcc <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000bdc:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000be0:	f107 000c 	add.w	r0, r7, #12
 8000be4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000be8:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <ap_conn_func+0x90>)
 8000bea:	f7ff fe61 	bl	80008b0 <esp_at_command>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <ap_conn_func+0x84>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <ap_conn_func+0xa0>)
 8000bfc:	f004 f86e 	bl	8004cdc <iprintf>
}
 8000c00:	3750      	adds	r7, #80	@ 0x50
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	0800622c 	.word	0x0800622c
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	08006258 	.word	0x08006258
 8000c14:	08006268 	.word	0x08006268
 8000c18:	0800627c 	.word	0x0800627c
 8000c1c:	08006294 	.word	0x08006294

08000c20 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <HAL_UART_RxCpltCallback+0x9c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d117      	bne.n	8000c62 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000c34:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c3c:	d20c      	bcs.n	8000c58 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000c40:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	b291      	uxth	r1, r2
 8000c48:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000c4a:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000c52:	7819      	ldrb	r1, [r3, #0]
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <HAL_UART_RxCpltCallback+0xa0>)
 8000c56:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	491a      	ldr	r1, [pc, #104]	@ (8000cc4 <HAL_UART_RxCpltCallback+0xa4>)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f003 f800 	bl	8003c62 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <HAL_UART_RxCpltCallback+0xa8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d122      	bne.n	8000cb2 <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c72:	7811      	ldrb	r1, [r2, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c76:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b0d      	cmp	r3, #13
 8000c84:	d10b      	bne.n	8000c9e <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_UART_RxCpltCallback+0xb8>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e004      	b.n	8000ca8 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <HAL_UART_RxCpltCallback+0xac>)
 8000ca6:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4909      	ldr	r1, [pc, #36]	@ (8000cd0 <HAL_UART_RxCpltCallback+0xb0>)
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f002 ffd8 	bl	8003c62 <HAL_UART_Receive_IT>
    }
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40011400 	.word	0x40011400
 8000cc0:	200004d0 	.word	0x200004d0
 8000cc4:	200004cf 	.word	0x200004cf
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	200008d4 	.word	0x200008d4
 8000cd0:	200004ce 	.word	0x200004ce
 8000cd4:	2000049c 	.word	0x2000049c
 8000cd8:	20000498 	.word	0x20000498

08000cdc <AiotClient_Init>:


void AiotClient_Init()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8000ce0:	4906      	ldr	r1, [pc, #24]	@ (8000cfc <AiotClient_Init+0x20>)
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <AiotClient_Init+0x24>)
 8000ce4:	f7ff ff4a 	bl	8000b7c <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fe69 	bl	80009c0 <request_ip_addr>
	esp_client_conn();
 8000cee:	f7ff fedd 	bl	8000aac <esp_client_conn>
	esp_get_status();
 8000cf2:	f7ff ff09 	bl	8000b08 <esp_get_status>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	080062f4 	.word	0x080062f4
 8000d00:	08006300 	.word	0x08006300

08000d04 <esp_send_data>:

void esp_send_data(char *data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	@ 0x50
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	223c      	movs	r2, #60	@ 0x3c
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f94f 	bl	8004fbc <memset>
	uint16_t length = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fa66 	bl	80001f4 <strlen>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	490e      	ldr	r1, [pc, #56]	@ (8000d68 <esp_send_data+0x64>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 f84b 	bl	8004dcc <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000d36:	f107 020e 	add.w	r2, r7, #14
 8000d3a:	f107 0010 	add.w	r0, r7, #16
 8000d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d42:	490a      	ldr	r1, [pc, #40]	@ (8000d6c <esp_send_data+0x68>)
 8000d44:	f7ff fdb4 	bl	80008b0 <esp_at_command>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d107      	bne.n	8000d5e <esp_send_data+0x5a>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000d4e:	f107 020e 	add.w	r2, r7, #14
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	4905      	ldr	r1, [pc, #20]	@ (8000d6c <esp_send_data+0x68>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fda9 	bl	80008b0 <esp_at_command>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3750      	adds	r7, #80	@ 0x50
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08006308 	.word	0x08006308
 8000d6c:	20000098 	.word	0x20000098

08000d70 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	4903      	ldr	r1, [pc, #12]	@ (8000d84 <drv_uart_init+0x14>)
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <drv_uart_init+0x18>)
 8000d7a:	f002 ff72 	bl	8003c62 <HAL_UART_Receive_IT>
    return 0;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200004ce 	.word	0x200004ce
 8000d88:	20000920 	.word	0x20000920

08000d8c <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000d94:	1d39      	adds	r1, r7, #4
 8000d96:	230a      	movs	r3, #10
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <__io_putchar+0x2c>)
 8000d9c:	f002 fed6 	bl	8003b4c <HAL_UART_Transmit>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <__io_putchar+0x1e>
        return ch;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <__io_putchar+0x22>
    return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000920 	.word	0x20000920

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int pulse = 500;
 8000dc6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fe14 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f8fc 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 fa30 	bl	8001238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 f9da 	bl	8001190 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ddc:	f000 fa02 	bl	80011e4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000de0:	f000 f95e 	bl	80010a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8000de4:	4866      	ldr	r0, [pc, #408]	@ (8000f80 <main+0x1c4>)
 8000de6:	f003 ffe9 	bl	8004dbc <puts>
  DHT11_Init();
 8000dea:	f7ff fc67 	bl	80006bc <DHT11_Init>
  DHT11_TypeDef dht11Data;
  char buff[30];

  ret |= drv_uart_init();
 8000dee:	f7ff ffbf 	bl	8000d70 <drv_uart_init>
 8000df2:	4602      	mov	r2, r0
 8000df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df6:	4313      	orrs	r3, r2
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  ret |= drv_esp_init();
 8000dfa:	f7ff fea7 	bl	8000b4c <drv_esp_init>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e02:	4313      	orrs	r3, r2
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if(ret != 0)
 8000e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <main+0x5a>
  {
	  printf("Esp response error\r\n");
 8000e0c:	485d      	ldr	r0, [pc, #372]	@ (8000f84 <main+0x1c8>)
 8000e0e:	f003 ffd5 	bl	8004dbc <puts>
	  Error_Handler();
 8000e12:	f000 fb83 	bl	800151c <Error_Handler>
  }

  AiotClient_Init();
 8000e16:	f7ff ff61 	bl	8000cdc <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000e1a:	485b      	ldr	r0, [pc, #364]	@ (8000f88 <main+0x1cc>)
 8000e1c:	f001 fede 	bl	8002bdc <HAL_TIM_Base_Start_IT>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <main+0x6e>
  {
	  Error_Handler();
 8000e26:	f000 fb79 	bl	800151c <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4856      	ldr	r0, [pc, #344]	@ (8000f88 <main+0x1cc>)
 8000e2e:	f001 ff91 	bl	8002d54 <HAL_TIM_PWM_Start>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <main+0x80>
  {
	  Error_Handler();
 8000e38:	f000 fb70 	bl	800151c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000e3c:	4953      	ldr	r1, [pc, #332]	@ (8000f8c <main+0x1d0>)
 8000e3e:	4854      	ldr	r0, [pc, #336]	@ (8000f90 <main+0x1d4>)
 8000e40:	f004 f940 	bl	80050c4 <strstr>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01d      	beq.n	8000e86 <main+0xca>
 8000e4a:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <main+0x1d4>)
 8000e4c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a4f      	ldr	r2, [pc, #316]	@ (8000f90 <main+0x1d4>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d115      	bne.n	8000e86 <main+0xca>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000e5a:	215b      	movs	r1, #91	@ 0x5b
 8000e5c:	484c      	ldr	r0, [pc, #304]	@ (8000f90 <main+0x1d4>)
 8000e5e:	f004 f8b5 	bl	8004fcc <strchr>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4619      	mov	r1, r3
 8000e66:	484b      	ldr	r0, [pc, #300]	@ (8000f94 <main+0x1d8>)
 8000e68:	f004 f9b5 	bl	80051d6 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	2100      	movs	r1, #0
 8000e72:	4847      	ldr	r0, [pc, #284]	@ (8000f90 <main+0x1d4>)
 8000e74:	f004 f8a2 	bl	8004fbc <memset>
			cb_data.length = 0;
 8000e78:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <main+0x1d4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000e80:	4844      	ldr	r0, [pc, #272]	@ (8000f94 <main+0x1d8>)
 8000e82:	f000 fa81 	bl	8001388 <esp_event>
		}
		if(rx2Flag)
 8000e86:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <main+0x1dc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <main+0xe2>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000e90:	4942      	ldr	r1, [pc, #264]	@ (8000f9c <main+0x1e0>)
 8000e92:	4843      	ldr	r0, [pc, #268]	@ (8000fa0 <main+0x1e4>)
 8000e94:	f003 ff22 	bl	8004cdc <iprintf>
			rx2Flag =0;
 8000e98:	4b3f      	ldr	r3, [pc, #252]	@ (8000f98 <main+0x1dc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
		}

		if( dht11Data.rh_byte1 < 60)
 8000e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ea2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ea4:	d803      	bhi.n	8000eae <main+0xf2>
			{
				pulse = 500;
 8000ea6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eac:	e008      	b.n	8000ec0 <main+0x104>
			}
		else
			{
				printf("%d>60/r/n",dht11Data.rh_byte1);
 8000eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	483b      	ldr	r0, [pc, #236]	@ (8000fa4 <main+0x1e8>)
 8000eb6:	f003 ff11 	bl	8004cdc <iprintf>
				pulse = 1000;
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, (pulse-1)<0?0:pulse-1 );
 8000ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	bfb8      	it	lt
 8000ec6:	2301      	movlt	r3, #1
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <main+0x1cc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
		printf("pulse : %d\r\n",pulse-1);
 8000ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4834      	ldr	r0, [pc, #208]	@ (8000fa8 <main+0x1ec>)
 8000ed8:	f003 ff00 	bl	8004cdc <iprintf>

		if(tim3Flag1Sec)	//1초에 한번
 8000edc:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <main+0x1f0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ab      	beq.n	8000e3c <main+0x80>
		{
			tim3Flag1Sec = 0;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <main+0x1f0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			if(!(tim3Sec%10)) //10초에 한번
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <main+0x1f4>)
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <main+0x1f8>)
 8000ef0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	1aca      	subs	r2, r1, r3
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d10d      	bne.n	8000f20 <main+0x164>
			{
				if(esp_get_status() != 0)
 8000f04:	f7ff fe00 	bl	8000b08 <esp_get_status>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <main+0x15c>
				{
					printf("server connecting ...\r\n");
 8000f0e:	482a      	ldr	r0, [pc, #168]	@ (8000fb8 <main+0x1fc>)
 8000f10:	f003 ff54 	bl	8004dbc <puts>
					esp_client_conn();
 8000f14:	f7ff fdca 	bl	8000aac <esp_client_conn>
				}
				HAL_GPIO_TogglePin(MOTOR_GPIO_Port,MOTOR_Pin);
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4828      	ldr	r0, [pc, #160]	@ (8000fbc <main+0x200>)
 8000f1c:	f001 f95b 	bl	80021d6 <HAL_GPIO_TogglePin>

			}
			dht11Data = DHT11_readData();
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc97 	bl	8000858 <DHT11_readData>
			sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8000f2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f34:	4619      	mov	r1, r3
 8000f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	491f      	ldr	r1, [pc, #124]	@ (8000fc0 <main+0x204>)
 8000f42:	f003 ff43 	bl	8004dcc <siprintf>
			printf("%s\r\n", buff);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <main+0x208>)
 8000f4c:	f003 fec6 	bl	8004cdc <iprintf>
			sprintf(buff,"[KTH_SQL]SENSOR@%d@%d.%d", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8000f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f60:	4638      	mov	r0, r7
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	460b      	mov	r3, r1
 8000f66:	4918      	ldr	r1, [pc, #96]	@ (8000fc8 <main+0x20c>)
 8000f68:	f003 ff30 	bl	8004dcc <siprintf>
			esp_send_data(buff);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fec8 	bl	8000d04 <esp_send_data>
			printf("%s\r\n", buff);
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <main+0x208>)
 8000f7a:	f003 feaf 	bl	8004cdc <iprintf>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000f7e:	e75d      	b.n	8000e3c <main+0x80>
 8000f80:	08006318 	.word	0x08006318
 8000f84:	08006330 	.word	0x08006330
 8000f88:	200008d8 	.word	0x200008d8
 8000f8c:	08006344 	.word	0x08006344
 8000f90:	200004d0 	.word	0x200004d0
 8000f94:	200009b4 	.word	0x200009b4
 8000f98:	20000498 	.word	0x20000498
 8000f9c:	2000049c 	.word	0x2000049c
 8000fa0:	0800634c 	.word	0x0800634c
 8000fa4:	0800635c 	.word	0x0800635c
 8000fa8:	08006368 	.word	0x08006368
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	200009b0 	.word	0x200009b0
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	08006378 	.word	0x08006378
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	08006390 	.word	0x08006390
 8000fc4:	080063a4 	.word	0x080063a4
 8000fc8:	080063ac 	.word	0x080063ac

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2230      	movs	r2, #48	@ 0x30
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 ffee 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <SystemClock_Config+0xcc>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001000:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <SystemClock_Config+0xd0>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001036:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800103c:	2308      	movs	r3, #8
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f8da 	bl	800220c <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800105e:	f000 fa5d 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fb3c 	bl	80026fc <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108a:	f000 fa47 	bl	800151c <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	@ 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	@ 0x38
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010d2:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <MX_TIM3_Init+0xec>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010d8:	2253      	movs	r2, #83	@ 0x53
 80010da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010f2:	2280      	movs	r2, #128	@ 0x80
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f6:	4824      	ldr	r0, [pc, #144]	@ (8001188 <MX_TIM3_Init+0xe8>)
 80010f8:	f001 fd20 	bl	8002b3c <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001102:	f000 fa0b 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001110:	4619      	mov	r1, r3
 8001112:	481d      	ldr	r0, [pc, #116]	@ (8001188 <MX_TIM3_Init+0xe8>)
 8001114:	f002 f880 	bl	8003218 <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800111e:	f000 f9fd 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001122:	4819      	ldr	r0, [pc, #100]	@ (8001188 <MX_TIM3_Init+0xe8>)
 8001124:	f001 fdbc 	bl	8002ca0 <HAL_TIM_PWM_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800112e:	f000 f9f5 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4619      	mov	r1, r3
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_TIM3_Init+0xe8>)
 8001142:	f002 fc31 	bl	80039a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800114c:	f000 f9e6 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001150:	2360      	movs	r3, #96	@ 0x60
 8001152:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001154:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	@ (8001188 <MX_TIM3_Init+0xe8>)
 800116a:	f001 ff93 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001174:	f000 f9d2 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001178:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MX_TIM3_Init+0xe8>)
 800117a:	f000 fa25 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	@ 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200008d8 	.word	0x200008d8
 800118c:	40000400 	.word	0x40000400

08001190 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f002 fc70 	bl	8003aac <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f9a3 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000920 	.word	0x20000920
 80011e0:	40004400 	.word	0x40004400

080011e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART6_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 80011f0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80011f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART6_UART_Init+0x4c>)
 800121c:	f002 fc46 	bl	8003aac <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f979 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000968 	.word	0x20000968
 8001234:	40011400 	.word	0x40011400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a37      	ldr	r2, [pc, #220]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a30      	ldr	r2, [pc, #192]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <MX_GPIO_Init+0xfc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <MX_GPIO_Init+0xfc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a29      	ldr	r2, [pc, #164]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <MX_GPIO_Init+0xfc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_GPIO_Init+0xfc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <MX_GPIO_Init+0xfc>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_GPIO_Init+0xfc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2122      	movs	r1, #34	@ 0x22
 80012c2:	481d      	ldr	r0, [pc, #116]	@ (8001338 <MX_GPIO_Init+0x100>)
 80012c4:	f000 ff6e 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <MX_GPIO_Init+0x104>)
 80012d0:	f000 ff68 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4814      	ldr	r0, [pc, #80]	@ (800133c <MX_GPIO_Init+0x104>)
 80012ec:	f000 fdbe 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin|LD2_Pin;
 80012f0:	2322      	movs	r3, #34	@ 0x22
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_GPIO_Init+0x100>)
 8001308:	f000 fdb0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_GPIO_Init+0x104>)
 8001326:	f000 fda1 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020800 	.word	0x40020800

08001340 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	b29b      	uxth	r3, r3
 800134c:	2201      	movs	r2, #1
 800134e:	4619      	mov	r1, r3
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_GPIO_LED_ON+0x20>)
 8001352:	f000 ff27 	bl	80021a4 <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020000 	.word	0x40020000

08001364 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_GPIO_LED_OFF+0x20>)
 8001376:	f000 ff15 	bl	80021a4 <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40020000 	.word	0x40020000

08001388 <esp_event>:
void esp_event(char * recvBuf)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09c      	sub	sp, #112	@ 0x70
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
  int i=0;
 8001390:	2300      	movs	r3, #0
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001394:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	223c      	movs	r2, #60	@ 0x3c
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fe03 	bl	8004fbc <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7fe ff1c 	bl	80001f4 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a39      	ldr	r2, [pc, #228]	@ (80014a8 <esp_event+0x120>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4838      	ldr	r0, [pc, #224]	@ (80014ac <esp_event+0x124>)
 80013ca:	f003 fc87 	bl	8004cdc <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80013ce:	4938      	ldr	r1, [pc, #224]	@ (80014b0 <esp_event+0x128>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 fe1b 	bl	800500c <strtok>
 80013d6:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80013d8:	e011      	b.n	80013fe <esp_event+0x76>
  {
    pArray[i] = pToken;
 80013da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	3368      	adds	r3, #104	@ 0x68
 80013e0:	443b      	add	r3, r7
 80013e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013e4:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80013e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013ea:	3301      	adds	r3, #1
 80013ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80013ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	dc08      	bgt.n	8001406 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 80013f4:	492e      	ldr	r1, [pc, #184]	@ (80014b0 <esp_event+0x128>)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f003 fe08 	bl	800500c <strtok>
 80013fc:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80013fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ea      	bne.n	80013da <esp_event+0x52>
 8001404:	e000      	b.n	8001408 <esp_event+0x80>
      break;
 8001406:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8001408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800140a:	492a      	ldr	r1, [pc, #168]	@ (80014b4 <esp_event+0x12c>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fee7 	bl	80001e0 <strcmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d12c      	bne.n	8001472 <esp_event+0xea>
  {
  	if(!strcmp(pArray[2],"ON"))
 8001418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141a:	4927      	ldr	r1, [pc, #156]	@ (80014b8 <esp_event+0x130>)
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fedf 	bl	80001e0 <strcmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <esp_event+0xa8>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8001428:	2020      	movs	r0, #32
 800142a:	f7ff ff89 	bl	8001340 <MX_GPIO_LED_ON>
 800142e:	e00a      	b.n	8001446 <esp_event+0xbe>

  	}
	else if(!strcmp(pArray[2],"OFF"))
 8001430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001432:	4922      	ldr	r1, [pc, #136]	@ (80014bc <esp_event+0x134>)
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe fed3 	bl	80001e0 <strcmp>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <esp_event+0xbe>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8001440:	2020      	movs	r0, #32
 8001442:	f7ff ff8f 	bl	8001364 <MX_GPIO_LED_OFF>
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001448:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800144a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800144c:	f107 000c 	add.w	r0, r7, #12
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	491a      	ldr	r1, [pc, #104]	@ (80014c0 <esp_event+0x138>)
 8001456:	f003 fcb9 	bl	8004dcc <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc50 	bl	8000d04 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <esp_event+0x13c>)
 800146c:	f003 fc36 	bl	8004cdc <iprintf>
 8001470:	e017      	b.n	80014a2 <esp_event+0x11a>
  else if(!strncmp(pArray[1]," New conn",8))
 8001472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001474:	2208      	movs	r2, #8
 8001476:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <esp_event+0x140>)
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fdb4 	bl	8004fe6 <strncmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00b      	beq.n	800149c <esp_event+0x114>
  else if(!strncmp(pArray[1]," Already log",8))
 8001484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001486:	2208      	movs	r2, #8
 8001488:	4910      	ldr	r1, [pc, #64]	@ (80014cc <esp_event+0x144>)
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fdab 	bl	8004fe6 <strncmp>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <esp_event+0x118>
	  esp_client_conn();
 8001496:	f7ff fb09 	bl	8000aac <esp_client_conn>
      return;
 800149a:	e002      	b.n	80014a2 <esp_event+0x11a>
     return;
 800149c:	bf00      	nop
 800149e:	e000      	b.n	80014a2 <esp_event+0x11a>
      return;
 80014a0:	bf00      	nop
}
 80014a2:	3768      	adds	r7, #104	@ 0x68
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200009b4 	.word	0x200009b4
 80014ac:	080063c8 	.word	0x080063c8
 80014b0:	080063dc 	.word	0x080063dc
 80014b4:	080063e0 	.word	0x080063e0
 80014b8:	080063e4 	.word	0x080063e4
 80014bc:	080063e8 	.word	0x080063e8
 80014c0:	080063ec 	.word	0x080063ec
 80014c4:	08006414 	.word	0x08006414
 80014c8:	080063f8 	.word	0x080063f8
 80014cc:	08006404 	.word	0x08006404

080014d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014e0:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ea:	db0a      	blt.n	8001502 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014fa:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	}
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200009f4 	.word	0x200009f4
 8001514:	20000000 	.word	0x20000000
 8001518:	200009b0 	.word	0x200009b0

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <Error_Handler+0x8>

08001528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <HAL_MspInit+0x4c>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153c:	6453      	str	r3, [r2, #68]	@ 0x44
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_MspInit+0x4c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001566:	2007      	movs	r0, #7
 8001568:	f000 fbac 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_TIM_Base_MspInit+0x48>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d115      	bne.n	80015b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a0c      	ldr	r2, [pc, #48]	@ (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_TIM_Base_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	201d      	movs	r0, #29
 80015ac:	f000 fb95 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015b0:	201d      	movs	r0, #29
 80015b2:	f000 fbae 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11d      	bne.n	8001626 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 8001606:	2340      	movs	r3, #64	@ 0x40
 8001608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_TIM_MspPostInit+0x70>)
 8001622:	f000 fc23 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40000400 	.word	0x40000400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <HAL_UART_MspInit+0x108>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d134      	bne.n	80016c8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a38      	ldr	r2, [pc, #224]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001696:	230c      	movs	r3, #12
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a6:	2307      	movs	r3, #7
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4826      	ldr	r0, [pc, #152]	@ (800174c <HAL_UART_MspInit+0x110>)
 80016b2:	f000 fbdb 	bl	8001e6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2026      	movs	r0, #38	@ 0x26
 80016bc:	f000 fb0d 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c0:	2026      	movs	r0, #38	@ 0x26
 80016c2:	f000 fb26 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016c6:	e038      	b.n	800173a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_UART_MspInit+0x114>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d133      	bne.n	800173a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_UART_MspInit+0x10c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23c0      	movs	r3, #192	@ 0xc0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800171a:	2308      	movs	r3, #8
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <HAL_UART_MspInit+0x118>)
 8001726:	f000 fba1 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2047      	movs	r0, #71	@ 0x47
 8001730:	f000 fad3 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001734:	2047      	movs	r0, #71	@ 0x47
 8001736:	f000 faec 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40004400 	.word	0x40004400
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40011400 	.word	0x40011400
 8001754:	40020800 	.word	0x40020800

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f975 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <TIM3_IRQHandler+0x10>)
 80017be:	f001 fb79 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200008d8 	.word	0x200008d8

080017cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <USART2_IRQHandler+0x10>)
 80017d2:	f002 fa6b 	bl	8003cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000920 	.word	0x20000920

080017e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <USART6_IRQHandler+0x10>)
 80017e6:	f002 fa61 	bl	8003cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000968 	.word	0x20000968

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_kill>:

int _kill(int pid, int sig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180e:	f003 fcb5 	bl	800517c <__errno>
 8001812:	4603      	mov	r3, r0
 8001814:	2216      	movs	r2, #22
 8001816:	601a      	str	r2, [r3, #0]
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_exit>:

void _exit (int status)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ffe7 	bl	8001804 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001836:	bf00      	nop
 8001838:	e7fd      	b.n	8001836 <_exit+0x12>

0800183a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e00a      	b.n	8001862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184c:	f3af 8000 	nop.w
 8001850:	4601      	mov	r1, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	b2ca      	uxtb	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbf0      	blt.n	800184c <_read+0x12>
  }

  return len;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e009      	b.n	800189a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	60ba      	str	r2, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa7c 	bl	8000d8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbf1      	blt.n	8001886 <_write+0x12>
  }
  return len;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_close>:

int _close(int file)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d4:	605a      	str	r2, [r3, #4]
  return 0;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_isatty>:

int _isatty(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f003 fc1a 	bl	800517c <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20020000 	.word	0x20020000
 8001974:	00000400 	.word	0x00000400
 8001978:	200009f8 	.word	0x200009f8
 800197c:	20000b50 	.word	0x20000b50

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a8:	f7ff ffea 	bl	8001980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f003 fbd9 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff f9f1 	bl	8000dbc <main>
  bx  lr    
 80019da:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019e8:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 80019ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80019f0:	20000b4c 	.word	0x20000b4c

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_Init+0x40>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <HAL_Init+0x40>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <HAL_Init+0x40>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f94f 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fd7c 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f967 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f92f 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000004 	.word	0x20000004
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	20000008 	.word	0x20000008

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	200009fc 	.word	0x200009fc

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200009fc 	.word	0x200009fc

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000000c 	.word	0x2000000c

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff feb6 	bl	8001ac4 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e052      	b.n	8001e1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0216 	bic.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_DMA_Abort+0x62>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc8:	e013      	b.n	8001df2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dca:	f7ff fe7b 	bl	8001ac4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d90c      	bls.n	8001df2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e015      	b.n	8001e1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e4      	bne.n	8001dca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00c      	b.n	8001e5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e159      	b.n	800213c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8148 	bne.w	8002136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a2 	beq.w	8002136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a56      	ldr	r2, [pc, #344]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b54      	ldr	r3, [pc, #336]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_GPIO_Init+0x2ec>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	@ (800215c <HAL_GPIO_Init+0x2f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x202>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	@ (8002160 <HAL_GPIO_Init+0x2f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x1fe>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	@ (8002164 <HAL_GPIO_Init+0x2f8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x1fa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <HAL_GPIO_Init+0x2fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x1f6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	@ (800216c <HAL_GPIO_Init+0x300>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x1f2>
 800205a:	2304      	movs	r3, #4
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800205e:	2307      	movs	r3, #7
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	@ (8002158 <HAL_GPIO_Init+0x2ec>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_GPIO_Init+0x304>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f aea2 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e267      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d075      	beq.n	8002316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800222a:	4b88      	ldr	r3, [pc, #544]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d00c      	beq.n	8002250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b85      	ldr	r3, [pc, #532]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800223e:	2b08      	cmp	r3, #8
 8002240:	d112      	bne.n	8002268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002242:	4b82      	ldr	r3, [pc, #520]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800224e:	d10b      	bne.n	8002268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4b7e      	ldr	r3, [pc, #504]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05b      	beq.n	8002314 <HAL_RCC_OscConfig+0x108>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d157      	bne.n	8002314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e242      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002270:	d106      	bne.n	8002280 <HAL_RCC_OscConfig+0x74>
 8002272:	4b76      	ldr	r3, [pc, #472]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a75      	ldr	r2, [pc, #468]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e01d      	b.n	80022bc <HAL_RCC_OscConfig+0xb0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b70      	ldr	r3, [pc, #448]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6f      	ldr	r2, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b6d      	ldr	r3, [pc, #436]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6c      	ldr	r2, [pc, #432]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0xb0>
 80022a4:	4b69      	ldr	r3, [pc, #420]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a68      	ldr	r2, [pc, #416]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b66      	ldr	r3, [pc, #408]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a65      	ldr	r2, [pc, #404]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fbfe 	bl	8001ac4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7ff fbfa 	bl	8001ac4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	@ 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e207      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0xc0>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fbea 	bl	8001ac4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fbe6 	bl	8001ac4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	@ 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1f3      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	4b51      	ldr	r3, [pc, #324]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0xe8>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d063      	beq.n	80023ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002322:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b47      	ldr	r3, [pc, #284]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002336:	2b08      	cmp	r3, #8
 8002338:	d11c      	bne.n	8002374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d116      	bne.n	8002374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	4b41      	ldr	r3, [pc, #260]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x152>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e1c7      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4937      	ldr	r1, [pc, #220]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	e03a      	b.n	80023ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800237c:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <HAL_RCC_OscConfig+0x244>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff fb9f 	bl	8001ac4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238a:	f7ff fb9b 	bl	8001ac4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1a8      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b28      	ldr	r3, [pc, #160]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4925      	ldr	r1, [pc, #148]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_OscConfig+0x244>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb7e 	bl	8001ac4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023cc:	f7ff fb7a 	bl	8001ac4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e187      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_RCC_OscConfig+0x248>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff fb5e 	bl	8001ac4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb5a 	bl	8001ac4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e167      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCC_OscConfig+0x240>)
 8002420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x200>
 800242a:	e01b      	b.n	8002464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_OscConfig+0x248>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff fb47 	bl	8001ac4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	e00e      	b.n	8002458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243a:	f7ff fb43 	bl	8001ac4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d907      	bls.n	8002458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e150      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
 800244c:	40023800 	.word	0x40023800
 8002450:	42470000 	.word	0x42470000
 8002454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ea      	bne.n	800243a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8097 	beq.w	80025a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b81      	ldr	r3, [pc, #516]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b7d      	ldr	r3, [pc, #500]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a7c      	ldr	r2, [pc, #496]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b7a      	ldr	r3, [pc, #488]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b77      	ldr	r3, [pc, #476]	@ (8002680 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b74      	ldr	r3, [pc, #464]	@ (8002680 <HAL_RCC_OscConfig+0x474>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a73      	ldr	r2, [pc, #460]	@ (8002680 <HAL_RCC_OscConfig+0x474>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff fb03 	bl	8001ac4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff faff 	bl	8001ac4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e10c      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002680 <HAL_RCC_OscConfig+0x474>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2ea>
 80024e8:	4b64      	ldr	r3, [pc, #400]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ec:	4a63      	ldr	r2, [pc, #396]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f4:	e01c      	b.n	8002530 <HAL_RCC_OscConfig+0x324>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x30c>
 80024fe:	4b5f      	ldr	r3, [pc, #380]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a5e      	ldr	r2, [pc, #376]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	4b5c      	ldr	r3, [pc, #368]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	4a5b      	ldr	r2, [pc, #364]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6713      	str	r3, [r2, #112]	@ 0x70
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0x324>
 8002518:	4b58      	ldr	r3, [pc, #352]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	4a57      	ldr	r2, [pc, #348]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	@ 0x70
 8002524:	4b55      	ldr	r3, [pc, #340]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	4a54      	ldr	r2, [pc, #336]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d015      	beq.n	8002564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff fac4 	bl	8001ac4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff fac0 	bl	8001ac4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0cb      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	4b49      	ldr	r3, [pc, #292]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ee      	beq.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7ff faae 	bl	8001ac4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7ff faaa 	bl	8001ac4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0b5      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	4a38      	ldr	r2, [pc, #224]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a1 	beq.w	80026ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025aa:	4b34      	ldr	r3, [pc, #208]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d05c      	beq.n	8002670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d141      	bne.n	8002642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <HAL_RCC_OscConfig+0x478>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fa7e 	bl	8001ac4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff fa7a 	bl	8001ac4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e087      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b27      	ldr	r3, [pc, #156]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	019b      	lsls	r3, r3, #6
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	491b      	ldr	r1, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <HAL_RCC_OscConfig+0x478>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff fa53 	bl	8001ac4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fa4f 	bl	8001ac4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e05c      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x416>
 8002640:	e054      	b.n	80026ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <HAL_RCC_OscConfig+0x478>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fa3c 	bl	8001ac4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fa38 	bl	8001ac4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e045      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_RCC_OscConfig+0x470>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
 800266e:	e03d      	b.n	80026ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e038      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
 800267c:	40023800 	.word	0x40023800
 8002680:	40007000 	.word	0x40007000
 8002684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x4ec>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d028      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d121      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d11a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026b8:	4013      	ands	r3, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d111      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	3b01      	subs	r3, #1
 80026d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0cc      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b68      	ldr	r3, [pc, #416]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d90c      	bls.n	8002738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b65      	ldr	r3, [pc, #404]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a58      	ldr	r2, [pc, #352]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800275a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a52      	ldr	r2, [pc, #328]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d044      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d119      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b3f      	ldr	r3, [pc, #252]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e06f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e067      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b37      	ldr	r3, [pc, #220]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4934      	ldr	r1, [pc, #208]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7ff f96a 	bl	8001ac4 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7ff f966 	bl	8001ac4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e04f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20c      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	@ (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286e:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002882:	f000 f821 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	490a      	ldr	r1, [pc, #40]	@ (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f8ca 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08006428 	.word	0x08006428
 80028c0:	20000004 	.word	0x20000004
 80028c4:	20000008 	.word	0x20000008

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028cc:	b094      	sub	sp, #80	@ 0x50
 80028ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e0:	4b79      	ldr	r3, [pc, #484]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d00d      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x40>
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	f200 80e1 	bhi.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x34>
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x3a>
 80028fa:	e0db      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b73      	ldr	r3, [pc, #460]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x204>)
 80028fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002900:	e0db      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002902:	4b73      	ldr	r3, [pc, #460]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002906:	e0d8      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002910:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002912:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	2200      	movs	r2, #0
 8002926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002928:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	633b      	str	r3, [r7, #48]	@ 0x30
 8002932:	2300      	movs	r3, #0
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
 8002936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4621      	mov	r1, r4
 8002954:	1a51      	subs	r1, r2, r1
 8002956:	6139      	str	r1, [r7, #16]
 8002958:	4629      	mov	r1, r5
 800295a:	eb63 0301 	sbc.w	r3, r3, r1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800296c:	4659      	mov	r1, fp
 800296e:	018b      	lsls	r3, r1, #6
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002976:	4651      	mov	r1, sl
 8002978:	018a      	lsls	r2, r1, #6
 800297a:	4651      	mov	r1, sl
 800297c:	ebb2 0801 	subs.w	r8, r2, r1
 8002980:	4659      	mov	r1, fp
 8002982:	eb63 0901 	sbc.w	r9, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299a:	4690      	mov	r8, r2
 800299c:	4699      	mov	r9, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb18 0303 	adds.w	r3, r8, r3
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	462b      	mov	r3, r5
 80029a8:	eb49 0303 	adc.w	r3, r9, r3
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ba:	4629      	mov	r1, r5
 80029bc:	024b      	lsls	r3, r1, #9
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c4:	4621      	mov	r1, r4
 80029c6:	024a      	lsls	r2, r1, #9
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029d8:	f7fd fc6a 	bl	80002b0 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e4:	e058      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	4611      	mov	r1, r2
 80029f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	0159      	lsls	r1, r3, #5
 8002a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a12:	0150      	lsls	r0, r2, #5
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4641      	mov	r1, r8
 8002a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a1e:	4649      	mov	r1, r9
 8002a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a38:	ebb2 040a 	subs.w	r4, r2, sl
 8002a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	00eb      	lsls	r3, r5, #3
 8002a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4e:	00e2      	lsls	r2, r4, #3
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	4643      	mov	r3, r8
 8002a56:	18e3      	adds	r3, r4, r3
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	eb45 0303 	adc.w	r3, r5, r3
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	028b      	lsls	r3, r1, #10
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a78:	4621      	mov	r1, r4
 8002a7a:	028a      	lsls	r2, r1, #10
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a82:	2200      	movs	r2, #0
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	61fa      	str	r2, [r7, #28]
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	f7fd fc10 	bl	80002b0 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3750      	adds	r7, #80	@ 0x50
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	@ (8002ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af0:	f7ff fff0 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0a9b      	lsrs	r3, r3, #10
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	@ (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08006438 	.word	0x08006438

08002b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b18:	f7ff ffdc 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0b5b      	lsrs	r3, r3, #13
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	@ (8002b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	08006438 	.word	0x08006438

08002b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e041      	b.n	8002bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe fd08 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 fc3c 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e044      	b.n	8002c7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	@ (8002c8c <HAL_TIM_Base_Start_IT+0xb0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d018      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x6c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1e:	d013      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x6c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1a      	ldr	r2, [pc, #104]	@ (8002c90 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x6c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x6c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x6c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <HAL_TIM_Base_Start_IT+0xc0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d010      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	e007      	b.n	8002c7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800
 8002c98:	40000c00 	.word	0x40000c00
 8002c9c:	40014000 	.word	0x40014000

08002ca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e041      	b.n	8002d36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f839 	bl	8002d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 fb8a 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x24>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e022      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d109      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x3e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e015      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_PWM_Start+0x58>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e008      	b.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e068      	b.n	8002e98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x82>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd4:	e013      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de4:	e00b      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xa2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002df4:	e003      	b.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fda8 	bl	800395c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <HAL_TIM_PWM_Start+0x14c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_TIM_PWM_Start+0x14c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x10e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e38:	d013      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x10e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_TIM_PWM_Start+0x150>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x10e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <HAL_TIM_PWM_Start+0x154>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x10e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <HAL_TIM_PWM_Start+0x158>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x10e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <HAL_TIM_PWM_Start+0x15c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d111      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b06      	cmp	r3, #6
 8002e72:	d010      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e84:	e007      	b.n	8002e96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40014000 	.word	0x40014000

08002eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d020      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0202 	mvn.w	r2, #2
 8002ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa5b 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa4d 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa5e 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0204 	mvn.w	r2, #4
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa35 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa27 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa38 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa0f 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa01 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fa12 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0210 	mvn.w	r2, #16
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9e9 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f9db 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f9ec 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0201 	mvn.w	r2, #1
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe fa58 	bl	80014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fd2a 	bl	8003a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f9bd 	bl	80033e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0220 	mvn.w	r2, #32
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fcfc 	bl	8003a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0ae      	b.n	8003210 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f200 809f 	bhi.w	8003200 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003201 	.word	0x08003201
 80030d0:	08003201 	.word	0x08003201
 80030d4:	08003201 	.word	0x08003201
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	08003201 	.word	0x08003201
 80030e0:	08003201 	.word	0x08003201
 80030e4:	08003201 	.word	0x08003201
 80030e8:	0800317f 	.word	0x0800317f
 80030ec:	08003201 	.word	0x08003201
 80030f0:	08003201 	.word	0x08003201
 80030f4:	08003201 	.word	0x08003201
 80030f8:	080031bf 	.word	0x080031bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fa04 	bl	8003510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
      break;
 800313a:	e064      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa4a 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
      break;
 800317c:	e043      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa95 	bl	80036b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	61da      	str	r2, [r3, #28]
      break;
 80031bc:	e023      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fadf 	bl	8003788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	61da      	str	r2, [r3, #28]
      break;
 80031fe:	e002      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
      break;
 8003204:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800320e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIM_ConfigClockSource+0x1c>
 8003230:	2302      	movs	r3, #2
 8003232:	e0b4      	b.n	800339e <HAL_TIM_ConfigClockSource+0x186>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800325a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326c:	d03e      	beq.n	80032ec <HAL_TIM_ConfigClockSource+0xd4>
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003272:	f200 8087 	bhi.w	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327a:	f000 8086 	beq.w	800338a <HAL_TIM_ConfigClockSource+0x172>
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003282:	d87f      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b70      	cmp	r3, #112	@ 0x70
 8003286:	d01a      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xa6>
 8003288:	2b70      	cmp	r3, #112	@ 0x70
 800328a:	d87b      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b60      	cmp	r3, #96	@ 0x60
 800328e:	d050      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x11a>
 8003290:	2b60      	cmp	r3, #96	@ 0x60
 8003292:	d877      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b50      	cmp	r3, #80	@ 0x50
 8003296:	d03c      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0xfa>
 8003298:	2b50      	cmp	r3, #80	@ 0x50
 800329a:	d873      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d058      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x13a>
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d86f      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b30      	cmp	r3, #48	@ 0x30
 80032a6:	d064      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b30      	cmp	r3, #48	@ 0x30
 80032aa:	d86b      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d060      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d867      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d05a      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032bc:	e062      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	f000 fb25 	bl	800391c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	609a      	str	r2, [r3, #8]
      break;
 80032ea:	e04f      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032fc:	f000 fb0e 	bl	800391c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330e:	609a      	str	r2, [r3, #8]
      break;
 8003310:	e03c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	461a      	mov	r2, r3
 8003320:	f000 fa82 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2150      	movs	r1, #80	@ 0x50
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fadb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003330:	e02c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 faa1 	bl	8003886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2160      	movs	r1, #96	@ 0x60
 800334a:	4618      	mov	r0, r3
 800334c:	f000 facb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003350:	e01c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800335e:	461a      	mov	r2, r3
 8003360:	f000 fa62 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2140      	movs	r1, #64	@ 0x40
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fabb 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003370:	e00c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f000 fab2 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 8003382:	e003      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      break;
 8003388:	e000      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800338a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3a      	ldr	r2, [pc, #232]	@ (80034f4 <TIM_Base_SetConfig+0xfc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <TIM_Base_SetConfig+0x38>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003416:	d00b      	beq.n	8003430 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a37      	ldr	r2, [pc, #220]	@ (80034f8 <TIM_Base_SetConfig+0x100>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_Base_SetConfig+0x38>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a36      	ldr	r2, [pc, #216]	@ (80034fc <TIM_Base_SetConfig+0x104>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_Base_SetConfig+0x38>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a35      	ldr	r2, [pc, #212]	@ (8003500 <TIM_Base_SetConfig+0x108>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d108      	bne.n	8003442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2b      	ldr	r2, [pc, #172]	@ (80034f4 <TIM_Base_SetConfig+0xfc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01b      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003450:	d017      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <TIM_Base_SetConfig+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a27      	ldr	r2, [pc, #156]	@ (80034fc <TIM_Base_SetConfig+0x104>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00f      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a26      	ldr	r2, [pc, #152]	@ (8003500 <TIM_Base_SetConfig+0x108>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a25      	ldr	r2, [pc, #148]	@ (8003504 <TIM_Base_SetConfig+0x10c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a24      	ldr	r2, [pc, #144]	@ (8003508 <TIM_Base_SetConfig+0x110>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_Base_SetConfig+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a23      	ldr	r2, [pc, #140]	@ (800350c <TIM_Base_SetConfig+0x114>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d108      	bne.n	8003494 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	@ (80034f4 <TIM_Base_SetConfig+0xfc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800

08003510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0201 	bic.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0302 	bic.w	r3, r3, #2
 8003558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <TIM_OC1_SetConfig+0xc8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10c      	bne.n	8003586 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0308 	bic.w	r3, r3, #8
 8003572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <TIM_OC1_SetConfig+0xc8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40010000 	.word	0x40010000

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 0210 	bic.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1e      	ldr	r2, [pc, #120]	@ (80036b0 <TIM_OC2_SetConfig+0xd4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10d      	bne.n	8003658 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a15      	ldr	r2, [pc, #84]	@ (80036b0 <TIM_OC2_SetConfig+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d113      	bne.n	8003688 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000

080036b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <TIM_OC3_SetConfig+0xd0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <TIM_OC3_SetConfig+0xd0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d113      	bne.n	800375e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800373c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40010000 	.word	0x40010000

08003788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	031b      	lsls	r3, r3, #12
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a10      	ldr	r2, [pc, #64]	@ (8003824 <TIM_OC4_SetConfig+0x9c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0210 	bic.w	r2, r3, #16
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e050      	b.n	8003a62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0c:	d013      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a13      	ldr	r2, [pc, #76]	@ (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10c      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000

08003a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e042      	b.n	8003b44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd fdb2 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	@ 0x24
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fdbd 	bl	8004670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d175      	bne.n	8003c58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Transmit+0x2c>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e06e      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2221      	movs	r2, #33	@ 0x21
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd ff9b 	bl	8001ac4 <HAL_GetTick>
 8003b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_UART_Transmit+0x6c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e003      	b.n	8003bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc0:	e02e      	b.n	8003c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	@ 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fb1f 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e03a      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cb      	bne.n	8003bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	@ 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 faeb 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e006      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d112      	bne.n	8003ca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Receive_IT+0x26>
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e00b      	b.n	8003ca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	461a      	mov	r2, r3
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fb12 	bl	80042c2 <UART_Start_Receive_IT>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	e000      	b.n	8003ca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b0ba      	sub	sp, #232	@ 0xe8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fbf2 	bl	80044f4 <UART_Receive_IT>
      return;
 8003d10:	e25b      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80de 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80d1 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
 8003d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d011      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81f2 	beq.w	80041c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fb7d 	bl	80044f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b40      	cmp	r3, #64	@ 0x40
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_UART_IRQHandler+0x17a>
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04f      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa85 	bl	8004336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d141      	bne.n	8003ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1d9      	bne.n	8003e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	4a7e      	ldr	r2, [pc, #504]	@ (800408c <HAL_UART_IRQHandler+0x3e0>)
 8003e94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd ffc3 	bl	8001e26 <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e00e      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f994 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00a      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f990 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f98c 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ed2:	e175      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	bf00      	nop
    return;
 8003ed6:	e173      	b.n	80041c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 814f 	bne.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8148 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8141 	beq.w	8004180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	f040 80b6 	bne.w	8004090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8145 	beq.w	80041c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f42:	429a      	cmp	r2, r3
 8003f44:	f080 813e 	bcs.w	80041c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5a:	f000 8088 	beq.w	800406e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1d9      	bne.n	8003f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e1      	bne.n	8003faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800400a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800400c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004050:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004052:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e3      	bne.n	800402c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	4618      	mov	r0, r3
 800406a:	f7fd fe6c 	bl	8001d46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8b7 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408a:	e09b      	b.n	80041c4 <HAL_UART_IRQHandler+0x518>
 800408c:	080043fd 	.word	0x080043fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 808e 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8089 	beq.w	80041c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040da:	647a      	str	r2, [r7, #68]	@ 0x44
 80040dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e3      	bne.n	80040b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	623b      	str	r3, [r7, #32]
   return(result);
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004112:	633a      	str	r2, [r7, #48]	@ 0x30
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e3      	bne.n	80040ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60fb      	str	r3, [r7, #12]
   return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0310 	bic.w	r3, r3, #16
 800414a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e3      	bne.n	8004134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f83d 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800417e:	e023      	b.n	80041c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f943 	bl	8004424 <UART_Transmit_IT>
    return;
 800419e:	e014      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f983 	bl	80044c4 <UART_EndTransmit_IT>
    return;
 80041be:	e004      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
    return;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_UART_IRQHandler+0x51e>
      return;
 80041c8:	bf00      	nop
  }
}
 80041ca:	37e8      	adds	r7, #232	@ 0xe8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	e03b      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d037      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fd fc4b 	bl	8001ac4 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e03a      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d020      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d01d      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d116      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f857 	bl	8004336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2208      	movs	r2, #8
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0b4      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2222      	movs	r2, #34	@ 0x22
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004306:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0220 	orr.w	r2, r2, #32
 8004326:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b095      	sub	sp, #84	@ 0x54
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800435e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e5      	bne.n	800433e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	61fb      	str	r3, [r7, #28]
   return(result);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d119      	bne.n	80043e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0310 	bic.w	r3, r3, #16
 80043c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ce:	61ba      	str	r2, [r7, #24]
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043f0:	bf00      	nop
 80043f2:	3754      	adds	r7, #84	@ 0x54
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fee4 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b21      	cmp	r3, #33	@ 0x21
 8004436:	d13e      	bne.n	80044b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d114      	bne.n	800446c <UART_Transmit_IT+0x48>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d110      	bne.n	800446c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]
 800446a:	e008      	b.n	800447e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6211      	str	r1, [r2, #32]
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4619      	mov	r1, r3
 800448c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fe73 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	@ 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b22      	cmp	r3, #34	@ 0x22
 8004506:	f040 80ae 	bne.w	8004666 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	d117      	bne.n	8004544 <UART_Receive_IT+0x50>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	b29a      	uxth	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	629a      	str	r2, [r3, #40]	@ 0x28
 8004542:	e026      	b.n	8004592 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004556:	d007      	beq.n	8004568 <UART_Receive_IT+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x82>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	e008      	b.n	8004588 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004582:	b2da      	uxtb	r2, r3
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4619      	mov	r1, r3
 80045a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d15d      	bne.n	8004662 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0220 	bic.w	r2, r2, #32
 80045b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d135      	bne.n	8004658 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	613b      	str	r3, [r7, #16]
   return(result);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	627b      	str	r3, [r7, #36]	@ 0x24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004612:	623a      	str	r2, [r7, #32]
 8004614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	69f9      	ldr	r1, [r7, #28]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d10a      	bne.n	800464a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fdd1 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
 8004656:	e002      	b.n	800465e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fc fae1 	bl	8000c20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e002      	b.n	8004668 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	@ 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004674:	b0c0      	sub	sp, #256	@ 0x100
 8004676:	af00      	add	r7, sp, #0
 8004678:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	ea40 0301 	orr.w	r3, r0, r1
 8004698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046c8:	f021 010c 	bic.w	r1, r1, #12
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046d6:	430b      	orrs	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ea:	6999      	ldr	r1, [r3, #24]
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	ea40 0301 	orr.w	r3, r0, r1
 80046f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <UART_SetConfig+0x2cc>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d005      	beq.n	8004710 <UART_SetConfig+0xa0>
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b8d      	ldr	r3, [pc, #564]	@ (8004940 <UART_SetConfig+0x2d0>)
 800470c:	429a      	cmp	r2, r3
 800470e:	d104      	bne.n	800471a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fa00 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8004714:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004718:	e003      	b.n	8004722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471a:	f7fe f9e7 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 800471e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472c:	f040 810c 	bne.w	8004948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004734:	2200      	movs	r2, #0
 8004736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800473a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800473e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	1891      	adds	r1, r2, r2
 8004748:	65b9      	str	r1, [r7, #88]	@ 0x58
 800474a:	415b      	adcs	r3, r3
 800474c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800474e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004752:	4621      	mov	r1, r4
 8004754:	eb12 0801 	adds.w	r8, r2, r1
 8004758:	4629      	mov	r1, r5
 800475a:	eb43 0901 	adc.w	r9, r3, r1
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004772:	4690      	mov	r8, r2
 8004774:	4699      	mov	r9, r3
 8004776:	4623      	mov	r3, r4
 8004778:	eb18 0303 	adds.w	r3, r8, r3
 800477c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004780:	462b      	mov	r3, r5
 8004782:	eb49 0303 	adc.w	r3, r9, r3
 8004786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004796:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800479a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800479e:	460b      	mov	r3, r1
 80047a0:	18db      	adds	r3, r3, r3
 80047a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047a4:	4613      	mov	r3, r2
 80047a6:	eb42 0303 	adc.w	r3, r2, r3
 80047aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047b4:	f7fb fd7c 	bl	80002b0 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4b61      	ldr	r3, [pc, #388]	@ (8004944 <UART_SetConfig+0x2d4>)
 80047be:	fba3 2302 	umull	r2, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	011c      	lsls	r4, r3, #4
 80047c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	1891      	adds	r1, r2, r2
 80047de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047e0:	415b      	adcs	r3, r3
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047e8:	4641      	mov	r1, r8
 80047ea:	eb12 0a01 	adds.w	sl, r2, r1
 80047ee:	4649      	mov	r1, r9
 80047f0:	eb43 0b01 	adc.w	fp, r3, r1
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004808:	4692      	mov	sl, r2
 800480a:	469b      	mov	fp, r3
 800480c:	4643      	mov	r3, r8
 800480e:	eb1a 0303 	adds.w	r3, sl, r3
 8004812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004816:	464b      	mov	r3, r9
 8004818:	eb4b 0303 	adc.w	r3, fp, r3
 800481c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800482c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004834:	460b      	mov	r3, r1
 8004836:	18db      	adds	r3, r3, r3
 8004838:	643b      	str	r3, [r7, #64]	@ 0x40
 800483a:	4613      	mov	r3, r2
 800483c:	eb42 0303 	adc.w	r3, r2, r3
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
 8004842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800484a:	f7fb fd31 	bl	80002b0 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4611      	mov	r1, r2
 8004854:	4b3b      	ldr	r3, [pc, #236]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004856:	fba3 2301 	umull	r2, r3, r3, r1
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2264      	movs	r2, #100	@ 0x64
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	1acb      	subs	r3, r1, r3
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800486a:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <UART_SetConfig+0x2d4>)
 800486c:	fba3 2302 	umull	r2, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004878:	441c      	add	r4, r3
 800487a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487e:	2200      	movs	r2, #0
 8004880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004884:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	1891      	adds	r1, r2, r2
 8004892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004894:	415b      	adcs	r3, r3
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800489c:	4641      	mov	r1, r8
 800489e:	1851      	adds	r1, r2, r1
 80048a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048a2:	4649      	mov	r1, r9
 80048a4:	414b      	adcs	r3, r1
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048b4:	4659      	mov	r1, fp
 80048b6:	00cb      	lsls	r3, r1, #3
 80048b8:	4651      	mov	r1, sl
 80048ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048be:	4651      	mov	r1, sl
 80048c0:	00ca      	lsls	r2, r1, #3
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	4642      	mov	r2, r8
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048d0:	464b      	mov	r3, r9
 80048d2:	460a      	mov	r2, r1
 80048d4:	eb42 0303 	adc.w	r3, r2, r3
 80048d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048f0:	460b      	mov	r3, r1
 80048f2:	18db      	adds	r3, r3, r3
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f6:	4613      	mov	r3, r2
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004906:	f7fb fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004910:	fba3 1302 	umull	r1, r3, r3, r2
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	2164      	movs	r1, #100	@ 0x64
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	3332      	adds	r3, #50	@ 0x32
 8004922:	4a08      	ldr	r2, [pc, #32]	@ (8004944 <UART_SetConfig+0x2d4>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	f003 0207 	and.w	r2, r3, #7
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4422      	add	r2, r4
 8004936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004938:	e106      	b.n	8004b48 <UART_SetConfig+0x4d8>
 800493a:	bf00      	nop
 800493c:	40011000 	.word	0x40011000
 8004940:	40011400 	.word	0x40011400
 8004944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004952:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800495a:	4642      	mov	r2, r8
 800495c:	464b      	mov	r3, r9
 800495e:	1891      	adds	r1, r2, r2
 8004960:	6239      	str	r1, [r7, #32]
 8004962:	415b      	adcs	r3, r3
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
 8004966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496a:	4641      	mov	r1, r8
 800496c:	1854      	adds	r4, r2, r1
 800496e:	4649      	mov	r1, r9
 8004970:	eb43 0501 	adc.w	r5, r3, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	00eb      	lsls	r3, r5, #3
 800497e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004982:	00e2      	lsls	r2, r4, #3
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	4643      	mov	r3, r8
 800498a:	18e3      	adds	r3, r4, r3
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004990:	464b      	mov	r3, r9
 8004992:	eb45 0303 	adc.w	r3, r5, r3
 8004996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049b6:	4629      	mov	r1, r5
 80049b8:	008b      	lsls	r3, r1, #2
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c0:	4621      	mov	r1, r4
 80049c2:	008a      	lsls	r2, r1, #2
 80049c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049c8:	f7fb fc72 	bl	80002b0 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4b60      	ldr	r3, [pc, #384]	@ (8004b54 <UART_SetConfig+0x4e4>)
 80049d2:	fba3 2302 	umull	r2, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	011c      	lsls	r4, r3, #4
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	61b9      	str	r1, [r7, #24]
 80049f4:	415b      	adcs	r3, r3
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6139      	str	r1, [r7, #16]
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a54:	4649      	mov	r1, r9
 8004a56:	008b      	lsls	r3, r1, #2
 8004a58:	4641      	mov	r1, r8
 8004a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a5e:	4641      	mov	r1, r8
 8004a60:	008a      	lsls	r2, r1, #2
 8004a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a66:	f7fb fc23 	bl	80002b0 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 2301 	umull	r2, r3, r3, r1
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2264      	movs	r2, #100	@ 0x64
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	1acb      	subs	r3, r1, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	@ 0x32
 8004a84:	4a33      	ldr	r2, [pc, #204]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a90:	441c      	add	r4, r3
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	1851      	adds	r1, r2, r1
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	00cb      	lsls	r3, r1, #3
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	00ca      	lsls	r2, r1, #3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4642      	mov	r2, r8
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	eb42 0303 	adc.w	r3, r2, r3
 8004aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004af6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b04:	4649      	mov	r1, r9
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	4641      	mov	r1, r8
 8004b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0e:	4641      	mov	r1, r8
 8004b10:	008a      	lsls	r2, r1, #2
 8004b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b16:	f7fb fbcb 	bl	80002b0 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	@ 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	3332      	adds	r3, #50	@ 0x32
 8004b32:	4a08      	ldr	r2, [pc, #32]	@ (8004b54 <UART_SetConfig+0x4e4>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4422      	add	r2, r4
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b54:	51eb851f 	.word	0x51eb851f

08004b58 <std>:
 8004b58:	2300      	movs	r3, #0
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b66:	6083      	str	r3, [r0, #8]
 8004b68:	8181      	strh	r1, [r0, #12]
 8004b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b6c:	81c2      	strh	r2, [r0, #14]
 8004b6e:	6183      	str	r3, [r0, #24]
 8004b70:	4619      	mov	r1, r3
 8004b72:	2208      	movs	r2, #8
 8004b74:	305c      	adds	r0, #92	@ 0x5c
 8004b76:	f000 fa21 	bl	8004fbc <memset>
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <std+0x58>)
 8004b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <std+0x5c>)
 8004b80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <std+0x60>)
 8004b84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <std+0x64>)
 8004b88:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <std+0x68>)
 8004b8c:	6224      	str	r4, [r4, #32]
 8004b8e:	429c      	cmp	r4, r3
 8004b90:	d006      	beq.n	8004ba0 <std+0x48>
 8004b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b96:	4294      	cmp	r4, r2
 8004b98:	d002      	beq.n	8004ba0 <std+0x48>
 8004b9a:	33d0      	adds	r3, #208	@ 0xd0
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d105      	bne.n	8004bac <std+0x54>
 8004ba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba8:	f000 bb12 	b.w	80051d0 <__retarget_lock_init_recursive>
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	bf00      	nop
 8004bb0:	08004e0d 	.word	0x08004e0d
 8004bb4:	08004e2f 	.word	0x08004e2f
 8004bb8:	08004e67 	.word	0x08004e67
 8004bbc:	08004e8b 	.word	0x08004e8b
 8004bc0:	20000a00 	.word	0x20000a00

08004bc4 <stdio_exit_handler>:
 8004bc4:	4a02      	ldr	r2, [pc, #8]	@ (8004bd0 <stdio_exit_handler+0xc>)
 8004bc6:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <stdio_exit_handler+0x10>)
 8004bc8:	4803      	ldr	r0, [pc, #12]	@ (8004bd8 <stdio_exit_handler+0x14>)
 8004bca:	f000 b869 	b.w	8004ca0 <_fwalk_sglue>
 8004bce:	bf00      	nop
 8004bd0:	20000010 	.word	0x20000010
 8004bd4:	08005d99 	.word	0x08005d99
 8004bd8:	20000020 	.word	0x20000020

08004bdc <cleanup_stdio>:
 8004bdc:	6841      	ldr	r1, [r0, #4]
 8004bde:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <cleanup_stdio+0x34>)
 8004be0:	4299      	cmp	r1, r3
 8004be2:	b510      	push	{r4, lr}
 8004be4:	4604      	mov	r4, r0
 8004be6:	d001      	beq.n	8004bec <cleanup_stdio+0x10>
 8004be8:	f001 f8d6 	bl	8005d98 <_fflush_r>
 8004bec:	68a1      	ldr	r1, [r4, #8]
 8004bee:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <cleanup_stdio+0x38>)
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d002      	beq.n	8004bfa <cleanup_stdio+0x1e>
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f001 f8cf 	bl	8005d98 <_fflush_r>
 8004bfa:	68e1      	ldr	r1, [r4, #12]
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <cleanup_stdio+0x3c>)
 8004bfe:	4299      	cmp	r1, r3
 8004c00:	d004      	beq.n	8004c0c <cleanup_stdio+0x30>
 8004c02:	4620      	mov	r0, r4
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c08:	f001 b8c6 	b.w	8005d98 <_fflush_r>
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000a00 	.word	0x20000a00
 8004c14:	20000a68 	.word	0x20000a68
 8004c18:	20000ad0 	.word	0x20000ad0

08004c1c <global_stdio_init.part.0>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <global_stdio_init.part.0+0x30>)
 8004c20:	4c0b      	ldr	r4, [pc, #44]	@ (8004c50 <global_stdio_init.part.0+0x34>)
 8004c22:	4a0c      	ldr	r2, [pc, #48]	@ (8004c54 <global_stdio_init.part.0+0x38>)
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	4620      	mov	r0, r4
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	f7ff ff94 	bl	8004b58 <std>
 8004c30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c34:	2201      	movs	r2, #1
 8004c36:	2109      	movs	r1, #9
 8004c38:	f7ff ff8e 	bl	8004b58 <std>
 8004c3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c40:	2202      	movs	r2, #2
 8004c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c46:	2112      	movs	r1, #18
 8004c48:	f7ff bf86 	b.w	8004b58 <std>
 8004c4c:	20000b38 	.word	0x20000b38
 8004c50:	20000a00 	.word	0x20000a00
 8004c54:	08004bc5 	.word	0x08004bc5

08004c58 <__sfp_lock_acquire>:
 8004c58:	4801      	ldr	r0, [pc, #4]	@ (8004c60 <__sfp_lock_acquire+0x8>)
 8004c5a:	f000 baba 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	20000b41 	.word	0x20000b41

08004c64 <__sfp_lock_release>:
 8004c64:	4801      	ldr	r0, [pc, #4]	@ (8004c6c <__sfp_lock_release+0x8>)
 8004c66:	f000 bab5 	b.w	80051d4 <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	20000b41 	.word	0x20000b41

08004c70 <__sinit>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7ff fff0 	bl	8004c58 <__sfp_lock_acquire>
 8004c78:	6a23      	ldr	r3, [r4, #32]
 8004c7a:	b11b      	cbz	r3, 8004c84 <__sinit+0x14>
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f7ff bff0 	b.w	8004c64 <__sfp_lock_release>
 8004c84:	4b04      	ldr	r3, [pc, #16]	@ (8004c98 <__sinit+0x28>)
 8004c86:	6223      	str	r3, [r4, #32]
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <__sinit+0x2c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f5      	bne.n	8004c7c <__sinit+0xc>
 8004c90:	f7ff ffc4 	bl	8004c1c <global_stdio_init.part.0>
 8004c94:	e7f2      	b.n	8004c7c <__sinit+0xc>
 8004c96:	bf00      	nop
 8004c98:	08004bdd 	.word	0x08004bdd
 8004c9c:	20000b38 	.word	0x20000b38

08004ca0 <_fwalk_sglue>:
 8004ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	4688      	mov	r8, r1
 8004ca8:	4614      	mov	r4, r2
 8004caa:	2600      	movs	r6, #0
 8004cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8004cb4:	d505      	bpl.n	8004cc2 <_fwalk_sglue+0x22>
 8004cb6:	6824      	ldr	r4, [r4, #0]
 8004cb8:	2c00      	cmp	r4, #0
 8004cba:	d1f7      	bne.n	8004cac <_fwalk_sglue+0xc>
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	89ab      	ldrh	r3, [r5, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d907      	bls.n	8004cd8 <_fwalk_sglue+0x38>
 8004cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <_fwalk_sglue+0x38>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c0      	blx	r8
 8004cd6:	4306      	orrs	r6, r0
 8004cd8:	3568      	adds	r5, #104	@ 0x68
 8004cda:	e7e9      	b.n	8004cb0 <_fwalk_sglue+0x10>

08004cdc <iprintf>:
 8004cdc:	b40f      	push	{r0, r1, r2, r3}
 8004cde:	b507      	push	{r0, r1, r2, lr}
 8004ce0:	4906      	ldr	r1, [pc, #24]	@ (8004cfc <iprintf+0x20>)
 8004ce2:	ab04      	add	r3, sp, #16
 8004ce4:	6808      	ldr	r0, [r1, #0]
 8004ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cea:	6881      	ldr	r1, [r0, #8]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	f000 fd29 	bl	8005744 <_vfiprintf_r>
 8004cf2:	b003      	add	sp, #12
 8004cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf8:	b004      	add	sp, #16
 8004cfa:	4770      	bx	lr
 8004cfc:	2000001c 	.word	0x2000001c

08004d00 <putchar>:
 8004d00:	4b02      	ldr	r3, [pc, #8]	@ (8004d0c <putchar+0xc>)
 8004d02:	4601      	mov	r1, r0
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	6882      	ldr	r2, [r0, #8]
 8004d08:	f001 b8e2 	b.w	8005ed0 <_putc_r>
 8004d0c:	2000001c 	.word	0x2000001c

08004d10 <_puts_r>:
 8004d10:	6a03      	ldr	r3, [r0, #32]
 8004d12:	b570      	push	{r4, r5, r6, lr}
 8004d14:	6884      	ldr	r4, [r0, #8]
 8004d16:	4605      	mov	r5, r0
 8004d18:	460e      	mov	r6, r1
 8004d1a:	b90b      	cbnz	r3, 8004d20 <_puts_r+0x10>
 8004d1c:	f7ff ffa8 	bl	8004c70 <__sinit>
 8004d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d22:	07db      	lsls	r3, r3, #31
 8004d24:	d405      	bmi.n	8004d32 <_puts_r+0x22>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	0598      	lsls	r0, r3, #22
 8004d2a:	d402      	bmi.n	8004d32 <_puts_r+0x22>
 8004d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d2e:	f000 fa50 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	0719      	lsls	r1, r3, #28
 8004d36:	d502      	bpl.n	8004d3e <_puts_r+0x2e>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d135      	bne.n	8004daa <_puts_r+0x9a>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f8e5 	bl	8004f10 <__swsetup_r>
 8004d46:	b380      	cbz	r0, 8004daa <_puts_r+0x9a>
 8004d48:	f04f 35ff 	mov.w	r5, #4294967295
 8004d4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d4e:	07da      	lsls	r2, r3, #31
 8004d50:	d405      	bmi.n	8004d5e <_puts_r+0x4e>
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	059b      	lsls	r3, r3, #22
 8004d56:	d402      	bmi.n	8004d5e <_puts_r+0x4e>
 8004d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d5a:	f000 fa3b 	bl	80051d4 <__retarget_lock_release_recursive>
 8004d5e:	4628      	mov	r0, r5
 8004d60:	bd70      	pop	{r4, r5, r6, pc}
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da04      	bge.n	8004d70 <_puts_r+0x60>
 8004d66:	69a2      	ldr	r2, [r4, #24]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dc17      	bgt.n	8004d9c <_puts_r+0x8c>
 8004d6c:	290a      	cmp	r1, #10
 8004d6e:	d015      	beq.n	8004d9c <_puts_r+0x8c>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	7019      	strb	r1, [r3, #0]
 8004d78:	68a3      	ldr	r3, [r4, #8]
 8004d7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	60a3      	str	r3, [r4, #8]
 8004d82:	2900      	cmp	r1, #0
 8004d84:	d1ed      	bne.n	8004d62 <_puts_r+0x52>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da11      	bge.n	8004dae <_puts_r+0x9e>
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	210a      	movs	r1, #10
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 f87f 	bl	8004e92 <__swbuf_r>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d0d7      	beq.n	8004d48 <_puts_r+0x38>
 8004d98:	250a      	movs	r5, #10
 8004d9a:	e7d7      	b.n	8004d4c <_puts_r+0x3c>
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 f877 	bl	8004e92 <__swbuf_r>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1e7      	bne.n	8004d78 <_puts_r+0x68>
 8004da8:	e7ce      	b.n	8004d48 <_puts_r+0x38>
 8004daa:	3e01      	subs	r6, #1
 8004dac:	e7e4      	b.n	8004d78 <_puts_r+0x68>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	6022      	str	r2, [r4, #0]
 8004db4:	220a      	movs	r2, #10
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e7ee      	b.n	8004d98 <_puts_r+0x88>
	...

08004dbc <puts>:
 8004dbc:	4b02      	ldr	r3, [pc, #8]	@ (8004dc8 <puts+0xc>)
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	f7ff bfa5 	b.w	8004d10 <_puts_r>
 8004dc6:	bf00      	nop
 8004dc8:	2000001c 	.word	0x2000001c

08004dcc <siprintf>:
 8004dcc:	b40e      	push	{r1, r2, r3}
 8004dce:	b500      	push	{lr}
 8004dd0:	b09c      	sub	sp, #112	@ 0x70
 8004dd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ddc:	4809      	ldr	r0, [pc, #36]	@ (8004e04 <siprintf+0x38>)
 8004dde:	9107      	str	r1, [sp, #28]
 8004de0:	9104      	str	r1, [sp, #16]
 8004de2:	4909      	ldr	r1, [pc, #36]	@ (8004e08 <siprintf+0x3c>)
 8004de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	a902      	add	r1, sp, #8
 8004df0:	f000 fb82 	bl	80054f8 <_svfiprintf_r>
 8004df4:	9b02      	ldr	r3, [sp, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	b01c      	add	sp, #112	@ 0x70
 8004dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e00:	b003      	add	sp, #12
 8004e02:	4770      	bx	lr
 8004e04:	2000001c 	.word	0x2000001c
 8004e08:	ffff0208 	.word	0xffff0208

08004e0c <__sread>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e14:	f000 f98e 	bl	8005134 <_read_r>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bfab      	itete	ge
 8004e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e20:	181b      	addge	r3, r3, r0
 8004e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e26:	bfac      	ite	ge
 8004e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e2a:	81a3      	strhlt	r3, [r4, #12]
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <__swrite>:
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	461f      	mov	r7, r3
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	4605      	mov	r5, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d505      	bpl.n	8004e4c <__swrite+0x1e>
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2302      	movs	r3, #2
 8004e46:	2200      	movs	r2, #0
 8004e48:	f000 f962 	bl	8005110 <_lseek_r>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e62:	f000 b979 	b.w	8005158 <_write_r>

08004e66 <__sseek>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	460c      	mov	r4, r1
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 f94f 	bl	8005110 <_lseek_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	bf15      	itete	ne
 8004e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e82:	81a3      	strheq	r3, [r4, #12]
 8004e84:	bf18      	it	ne
 8004e86:	81a3      	strhne	r3, [r4, #12]
 8004e88:	bd10      	pop	{r4, pc}

08004e8a <__sclose>:
 8004e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8e:	f000 b92f 	b.w	80050f0 <_close_r>

08004e92 <__swbuf_r>:
 8004e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e94:	460e      	mov	r6, r1
 8004e96:	4614      	mov	r4, r2
 8004e98:	4605      	mov	r5, r0
 8004e9a:	b118      	cbz	r0, 8004ea4 <__swbuf_r+0x12>
 8004e9c:	6a03      	ldr	r3, [r0, #32]
 8004e9e:	b90b      	cbnz	r3, 8004ea4 <__swbuf_r+0x12>
 8004ea0:	f7ff fee6 	bl	8004c70 <__sinit>
 8004ea4:	69a3      	ldr	r3, [r4, #24]
 8004ea6:	60a3      	str	r3, [r4, #8]
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	071a      	lsls	r2, r3, #28
 8004eac:	d501      	bpl.n	8004eb2 <__swbuf_r+0x20>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	b943      	cbnz	r3, 8004ec4 <__swbuf_r+0x32>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 f82b 	bl	8004f10 <__swsetup_r>
 8004eba:	b118      	cbz	r0, 8004ec4 <__swbuf_r+0x32>
 8004ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	6922      	ldr	r2, [r4, #16]
 8004ec8:	1a98      	subs	r0, r3, r2
 8004eca:	6963      	ldr	r3, [r4, #20]
 8004ecc:	b2f6      	uxtb	r6, r6
 8004ece:	4283      	cmp	r3, r0
 8004ed0:	4637      	mov	r7, r6
 8004ed2:	dc05      	bgt.n	8004ee0 <__swbuf_r+0x4e>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 ff5e 	bl	8005d98 <_fflush_r>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d1ed      	bne.n	8004ebc <__swbuf_r+0x2a>
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	6022      	str	r2, [r4, #0]
 8004eec:	701e      	strb	r6, [r3, #0]
 8004eee:	6962      	ldr	r2, [r4, #20]
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d004      	beq.n	8004f00 <__swbuf_r+0x6e>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	07db      	lsls	r3, r3, #31
 8004efa:	d5e1      	bpl.n	8004ec0 <__swbuf_r+0x2e>
 8004efc:	2e0a      	cmp	r6, #10
 8004efe:	d1df      	bne.n	8004ec0 <__swbuf_r+0x2e>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 ff48 	bl	8005d98 <_fflush_r>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d0d9      	beq.n	8004ec0 <__swbuf_r+0x2e>
 8004f0c:	e7d6      	b.n	8004ebc <__swbuf_r+0x2a>
	...

08004f10 <__swsetup_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4b29      	ldr	r3, [pc, #164]	@ (8004fb8 <__swsetup_r+0xa8>)
 8004f14:	4605      	mov	r5, r0
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	460c      	mov	r4, r1
 8004f1a:	b118      	cbz	r0, 8004f24 <__swsetup_r+0x14>
 8004f1c:	6a03      	ldr	r3, [r0, #32]
 8004f1e:	b90b      	cbnz	r3, 8004f24 <__swsetup_r+0x14>
 8004f20:	f7ff fea6 	bl	8004c70 <__sinit>
 8004f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f28:	0719      	lsls	r1, r3, #28
 8004f2a:	d422      	bmi.n	8004f72 <__swsetup_r+0x62>
 8004f2c:	06da      	lsls	r2, r3, #27
 8004f2e:	d407      	bmi.n	8004f40 <__swsetup_r+0x30>
 8004f30:	2209      	movs	r2, #9
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	e033      	b.n	8004fa8 <__swsetup_r+0x98>
 8004f40:	0758      	lsls	r0, r3, #29
 8004f42:	d512      	bpl.n	8004f6a <__swsetup_r+0x5a>
 8004f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f46:	b141      	cbz	r1, 8004f5a <__swsetup_r+0x4a>
 8004f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	d002      	beq.n	8004f56 <__swsetup_r+0x46>
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f975 	bl	8005240 <_free_r>
 8004f56:	2300      	movs	r3, #0
 8004f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	2300      	movs	r3, #0
 8004f64:	6063      	str	r3, [r4, #4]
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f043 0308 	orr.w	r3, r3, #8
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	b94b      	cbnz	r3, 8004f8a <__swsetup_r+0x7a>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d003      	beq.n	8004f8a <__swsetup_r+0x7a>
 8004f82:	4621      	mov	r1, r4
 8004f84:	4628      	mov	r0, r5
 8004f86:	f000 ff67 	bl	8005e58 <__smakebuf_r>
 8004f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8e:	f013 0201 	ands.w	r2, r3, #1
 8004f92:	d00a      	beq.n	8004faa <__swsetup_r+0x9a>
 8004f94:	2200      	movs	r2, #0
 8004f96:	60a2      	str	r2, [r4, #8]
 8004f98:	6962      	ldr	r2, [r4, #20]
 8004f9a:	4252      	negs	r2, r2
 8004f9c:	61a2      	str	r2, [r4, #24]
 8004f9e:	6922      	ldr	r2, [r4, #16]
 8004fa0:	b942      	cbnz	r2, 8004fb4 <__swsetup_r+0xa4>
 8004fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fa6:	d1c5      	bne.n	8004f34 <__swsetup_r+0x24>
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
 8004faa:	0799      	lsls	r1, r3, #30
 8004fac:	bf58      	it	pl
 8004fae:	6962      	ldrpl	r2, [r4, #20]
 8004fb0:	60a2      	str	r2, [r4, #8]
 8004fb2:	e7f4      	b.n	8004f9e <__swsetup_r+0x8e>
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e7f7      	b.n	8004fa8 <__swsetup_r+0x98>
 8004fb8:	2000001c 	.word	0x2000001c

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <strchr>:
 8004fcc:	b2c9      	uxtb	r1, r1
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd6:	b112      	cbz	r2, 8004fde <strchr+0x12>
 8004fd8:	428a      	cmp	r2, r1
 8004fda:	d1f9      	bne.n	8004fd0 <strchr+0x4>
 8004fdc:	4770      	bx	lr
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	bf18      	it	ne
 8004fe2:	2000      	movne	r0, #0
 8004fe4:	4770      	bx	lr

08004fe6 <strncmp>:
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	b16a      	cbz	r2, 8005006 <strncmp+0x20>
 8004fea:	3901      	subs	r1, #1
 8004fec:	1884      	adds	r4, r0, r2
 8004fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d103      	bne.n	8005002 <strncmp+0x1c>
 8004ffa:	42a0      	cmp	r0, r4
 8004ffc:	d001      	beq.n	8005002 <strncmp+0x1c>
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	d1f5      	bne.n	8004fee <strncmp+0x8>
 8005002:	1ad0      	subs	r0, r2, r3
 8005004:	bd10      	pop	{r4, pc}
 8005006:	4610      	mov	r0, r2
 8005008:	e7fc      	b.n	8005004 <strncmp+0x1e>
	...

0800500c <strtok>:
 800500c:	4b16      	ldr	r3, [pc, #88]	@ (8005068 <strtok+0x5c>)
 800500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	681f      	ldr	r7, [r3, #0]
 8005014:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005016:	4605      	mov	r5, r0
 8005018:	460e      	mov	r6, r1
 800501a:	b9ec      	cbnz	r4, 8005058 <strtok+0x4c>
 800501c:	2050      	movs	r0, #80	@ 0x50
 800501e:	f000 f959 	bl	80052d4 <malloc>
 8005022:	4602      	mov	r2, r0
 8005024:	6478      	str	r0, [r7, #68]	@ 0x44
 8005026:	b920      	cbnz	r0, 8005032 <strtok+0x26>
 8005028:	4b10      	ldr	r3, [pc, #64]	@ (800506c <strtok+0x60>)
 800502a:	4811      	ldr	r0, [pc, #68]	@ (8005070 <strtok+0x64>)
 800502c:	215b      	movs	r1, #91	@ 0x5b
 800502e:	f000 f8e9 	bl	8005204 <__assert_func>
 8005032:	e9c0 4400 	strd	r4, r4, [r0]
 8005036:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800503a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800503e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005042:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005046:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800504a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800504e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005052:	6184      	str	r4, [r0, #24]
 8005054:	7704      	strb	r4, [r0, #28]
 8005056:	6244      	str	r4, [r0, #36]	@ 0x24
 8005058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	2301      	movs	r3, #1
 8005060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005064:	f000 b806 	b.w	8005074 <__strtok_r>
 8005068:	2000001c 	.word	0x2000001c
 800506c:	08006440 	.word	0x08006440
 8005070:	08006457 	.word	0x08006457

08005074 <__strtok_r>:
 8005074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	b908      	cbnz	r0, 800507e <__strtok_r+0xa>
 800507a:	6814      	ldr	r4, [r2, #0]
 800507c:	b144      	cbz	r4, 8005090 <__strtok_r+0x1c>
 800507e:	4620      	mov	r0, r4
 8005080:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005084:	460f      	mov	r7, r1
 8005086:	f817 6b01 	ldrb.w	r6, [r7], #1
 800508a:	b91e      	cbnz	r6, 8005094 <__strtok_r+0x20>
 800508c:	b965      	cbnz	r5, 80050a8 <__strtok_r+0x34>
 800508e:	6015      	str	r5, [r2, #0]
 8005090:	2000      	movs	r0, #0
 8005092:	e005      	b.n	80050a0 <__strtok_r+0x2c>
 8005094:	42b5      	cmp	r5, r6
 8005096:	d1f6      	bne.n	8005086 <__strtok_r+0x12>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <__strtok_r+0xa>
 800509c:	6014      	str	r4, [r2, #0]
 800509e:	7003      	strb	r3, [r0, #0]
 80050a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a2:	461c      	mov	r4, r3
 80050a4:	e00c      	b.n	80050c0 <__strtok_r+0x4c>
 80050a6:	b915      	cbnz	r5, 80050ae <__strtok_r+0x3a>
 80050a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050ac:	460e      	mov	r6, r1
 80050ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050b2:	42ab      	cmp	r3, r5
 80050b4:	d1f7      	bne.n	80050a6 <__strtok_r+0x32>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f3      	beq.n	80050a2 <__strtok_r+0x2e>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80050c0:	6014      	str	r4, [r2, #0]
 80050c2:	e7ed      	b.n	80050a0 <__strtok_r+0x2c>

080050c4 <strstr>:
 80050c4:	780a      	ldrb	r2, [r1, #0]
 80050c6:	b570      	push	{r4, r5, r6, lr}
 80050c8:	b96a      	cbnz	r2, 80050e6 <strstr+0x22>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d109      	bne.n	80050e4 <strstr+0x20>
 80050d0:	460c      	mov	r4, r1
 80050d2:	4605      	mov	r5, r0
 80050d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f6      	beq.n	80050ca <strstr+0x6>
 80050dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80050e0:	429e      	cmp	r6, r3
 80050e2:	d0f7      	beq.n	80050d4 <strstr+0x10>
 80050e4:	3001      	adds	r0, #1
 80050e6:	7803      	ldrb	r3, [r0, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ef      	bne.n	80050cc <strstr+0x8>
 80050ec:	4618      	mov	r0, r3
 80050ee:	e7ec      	b.n	80050ca <strstr+0x6>

080050f0 <_close_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4d06      	ldr	r5, [pc, #24]	@ (800510c <_close_r+0x1c>)
 80050f4:	2300      	movs	r3, #0
 80050f6:	4604      	mov	r4, r0
 80050f8:	4608      	mov	r0, r1
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	f7fc fbd6 	bl	80018ac <_close>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_close_r+0x1a>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_close_r+0x1a>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000b3c 	.word	0x20000b3c

08005110 <_lseek_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	@ (8005130 <_lseek_r+0x20>)
 8005114:	4604      	mov	r4, r0
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	2200      	movs	r2, #0
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f7fc fbeb 	bl	80018fa <_lseek>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_lseek_r+0x1e>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_lseek_r+0x1e>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000b3c 	.word	0x20000b3c

08005134 <_read_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	@ (8005154 <_read_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fc fb79 	bl	800183a <_read>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_read_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_read_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000b3c 	.word	0x20000b3c

08005158 <_write_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	@ (8005178 <_write_r+0x20>)
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fc fb84 	bl	8001874 <_write>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_write_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_write_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000b3c 	.word	0x20000b3c

0800517c <__errno>:
 800517c:	4b01      	ldr	r3, [pc, #4]	@ (8005184 <__errno+0x8>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000001c 	.word	0x2000001c

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	4d0d      	ldr	r5, [pc, #52]	@ (80051c0 <__libc_init_array+0x38>)
 800518c:	4c0d      	ldr	r4, [pc, #52]	@ (80051c4 <__libc_init_array+0x3c>)
 800518e:	1b64      	subs	r4, r4, r5
 8005190:	10a4      	asrs	r4, r4, #2
 8005192:	2600      	movs	r6, #0
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	4d0b      	ldr	r5, [pc, #44]	@ (80051c8 <__libc_init_array+0x40>)
 800519a:	4c0c      	ldr	r4, [pc, #48]	@ (80051cc <__libc_init_array+0x44>)
 800519c:	f000 ff9a 	bl	80060d4 <_init>
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	2600      	movs	r6, #0
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	08006528 	.word	0x08006528
 80051c4:	08006528 	.word	0x08006528
 80051c8:	08006528 	.word	0x08006528
 80051cc:	0800652c 	.word	0x0800652c

080051d0 <__retarget_lock_init_recursive>:
 80051d0:	4770      	bx	lr

080051d2 <__retarget_lock_acquire_recursive>:
 80051d2:	4770      	bx	lr

080051d4 <__retarget_lock_release_recursive>:
 80051d4:	4770      	bx	lr

080051d6 <strcpy>:
 80051d6:	4603      	mov	r3, r0
 80051d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051dc:	f803 2b01 	strb.w	r2, [r3], #1
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d1f9      	bne.n	80051d8 <strcpy+0x2>
 80051e4:	4770      	bx	lr

080051e6 <memcpy>:
 80051e6:	440a      	add	r2, r1
 80051e8:	4291      	cmp	r1, r2
 80051ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80051ee:	d100      	bne.n	80051f2 <memcpy+0xc>
 80051f0:	4770      	bx	lr
 80051f2:	b510      	push	{r4, lr}
 80051f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051fc:	4291      	cmp	r1, r2
 80051fe:	d1f9      	bne.n	80051f4 <memcpy+0xe>
 8005200:	bd10      	pop	{r4, pc}
	...

08005204 <__assert_func>:
 8005204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005206:	4614      	mov	r4, r2
 8005208:	461a      	mov	r2, r3
 800520a:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <__assert_func+0x2c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4605      	mov	r5, r0
 8005210:	68d8      	ldr	r0, [r3, #12]
 8005212:	b954      	cbnz	r4, 800522a <__assert_func+0x26>
 8005214:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <__assert_func+0x30>)
 8005216:	461c      	mov	r4, r3
 8005218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800521c:	9100      	str	r1, [sp, #0]
 800521e:	462b      	mov	r3, r5
 8005220:	4905      	ldr	r1, [pc, #20]	@ (8005238 <__assert_func+0x34>)
 8005222:	f000 fde1 	bl	8005de8 <fiprintf>
 8005226:	f000 fed3 	bl	8005fd0 <abort>
 800522a:	4b04      	ldr	r3, [pc, #16]	@ (800523c <__assert_func+0x38>)
 800522c:	e7f4      	b.n	8005218 <__assert_func+0x14>
 800522e:	bf00      	nop
 8005230:	2000001c 	.word	0x2000001c
 8005234:	080064ec 	.word	0x080064ec
 8005238:	080064be 	.word	0x080064be
 800523c:	080064b1 	.word	0x080064b1

08005240 <_free_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4605      	mov	r5, r0
 8005244:	2900      	cmp	r1, #0
 8005246:	d041      	beq.n	80052cc <_free_r+0x8c>
 8005248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800524c:	1f0c      	subs	r4, r1, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	bfb8      	it	lt
 8005252:	18e4      	addlt	r4, r4, r3
 8005254:	f000 f8e8 	bl	8005428 <__malloc_lock>
 8005258:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <_free_r+0x90>)
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	b933      	cbnz	r3, 800526c <_free_r+0x2c>
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	4628      	mov	r0, r5
 8005264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005268:	f000 b8e4 	b.w	8005434 <__malloc_unlock>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x42>
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	1821      	adds	r1, r4, r0
 8005274:	428b      	cmp	r3, r1
 8005276:	bf01      	itttt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	1809      	addeq	r1, r1, r0
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	e7ed      	b.n	800525e <_free_r+0x1e>
 8005282:	461a      	mov	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b10b      	cbz	r3, 800528c <_free_r+0x4c>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d9fa      	bls.n	8005282 <_free_r+0x42>
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	1850      	adds	r0, r2, r1
 8005290:	42a0      	cmp	r0, r4
 8005292:	d10b      	bne.n	80052ac <_free_r+0x6c>
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	4401      	add	r1, r0
 8005298:	1850      	adds	r0, r2, r1
 800529a:	4283      	cmp	r3, r0
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	d1e0      	bne.n	8005262 <_free_r+0x22>
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	4408      	add	r0, r1
 80052a8:	6010      	str	r0, [r2, #0]
 80052aa:	e7da      	b.n	8005262 <_free_r+0x22>
 80052ac:	d902      	bls.n	80052b4 <_free_r+0x74>
 80052ae:	230c      	movs	r3, #12
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	e7d6      	b.n	8005262 <_free_r+0x22>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	1821      	adds	r1, r4, r0
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf04      	itt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	bf04      	itt	eq
 80052c4:	1809      	addeq	r1, r1, r0
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	6054      	str	r4, [r2, #4]
 80052ca:	e7ca      	b.n	8005262 <_free_r+0x22>
 80052cc:	bd38      	pop	{r3, r4, r5, pc}
 80052ce:	bf00      	nop
 80052d0:	20000b48 	.word	0x20000b48

080052d4 <malloc>:
 80052d4:	4b02      	ldr	r3, [pc, #8]	@ (80052e0 <malloc+0xc>)
 80052d6:	4601      	mov	r1, r0
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f000 b825 	b.w	8005328 <_malloc_r>
 80052de:	bf00      	nop
 80052e0:	2000001c 	.word	0x2000001c

080052e4 <sbrk_aligned>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005324 <sbrk_aligned+0x40>)
 80052e8:	460c      	mov	r4, r1
 80052ea:	6831      	ldr	r1, [r6, #0]
 80052ec:	4605      	mov	r5, r0
 80052ee:	b911      	cbnz	r1, 80052f6 <sbrk_aligned+0x12>
 80052f0:	f000 fe5e 	bl	8005fb0 <_sbrk_r>
 80052f4:	6030      	str	r0, [r6, #0]
 80052f6:	4621      	mov	r1, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 fe59 	bl	8005fb0 <_sbrk_r>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d103      	bne.n	800530a <sbrk_aligned+0x26>
 8005302:	f04f 34ff 	mov.w	r4, #4294967295
 8005306:	4620      	mov	r0, r4
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	1cc4      	adds	r4, r0, #3
 800530c:	f024 0403 	bic.w	r4, r4, #3
 8005310:	42a0      	cmp	r0, r4
 8005312:	d0f8      	beq.n	8005306 <sbrk_aligned+0x22>
 8005314:	1a21      	subs	r1, r4, r0
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fe4a 	bl	8005fb0 <_sbrk_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d1f2      	bne.n	8005306 <sbrk_aligned+0x22>
 8005320:	e7ef      	b.n	8005302 <sbrk_aligned+0x1e>
 8005322:	bf00      	nop
 8005324:	20000b44 	.word	0x20000b44

08005328 <_malloc_r>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	1ccd      	adds	r5, r1, #3
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	2d00      	cmp	r5, #0
 800533c:	4606      	mov	r6, r0
 800533e:	db01      	blt.n	8005344 <_malloc_r+0x1c>
 8005340:	42a9      	cmp	r1, r5
 8005342:	d904      	bls.n	800534e <_malloc_r+0x26>
 8005344:	230c      	movs	r3, #12
 8005346:	6033      	str	r3, [r6, #0]
 8005348:	2000      	movs	r0, #0
 800534a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005424 <_malloc_r+0xfc>
 8005352:	f000 f869 	bl	8005428 <__malloc_lock>
 8005356:	f8d8 3000 	ldr.w	r3, [r8]
 800535a:	461c      	mov	r4, r3
 800535c:	bb44      	cbnz	r4, 80053b0 <_malloc_r+0x88>
 800535e:	4629      	mov	r1, r5
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbf 	bl	80052e4 <sbrk_aligned>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	4604      	mov	r4, r0
 800536a:	d158      	bne.n	800541e <_malloc_r+0xf6>
 800536c:	f8d8 4000 	ldr.w	r4, [r8]
 8005370:	4627      	mov	r7, r4
 8005372:	2f00      	cmp	r7, #0
 8005374:	d143      	bne.n	80053fe <_malloc_r+0xd6>
 8005376:	2c00      	cmp	r4, #0
 8005378:	d04b      	beq.n	8005412 <_malloc_r+0xea>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4639      	mov	r1, r7
 800537e:	4630      	mov	r0, r6
 8005380:	eb04 0903 	add.w	r9, r4, r3
 8005384:	f000 fe14 	bl	8005fb0 <_sbrk_r>
 8005388:	4581      	cmp	r9, r0
 800538a:	d142      	bne.n	8005412 <_malloc_r+0xea>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	1a6d      	subs	r5, r5, r1
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffa6 	bl	80052e4 <sbrk_aligned>
 8005398:	3001      	adds	r0, #1
 800539a:	d03a      	beq.n	8005412 <_malloc_r+0xea>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	442b      	add	r3, r5
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	f8d8 3000 	ldr.w	r3, [r8]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	bb62      	cbnz	r2, 8005404 <_malloc_r+0xdc>
 80053aa:	f8c8 7000 	str.w	r7, [r8]
 80053ae:	e00f      	b.n	80053d0 <_malloc_r+0xa8>
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	1b52      	subs	r2, r2, r5
 80053b4:	d420      	bmi.n	80053f8 <_malloc_r+0xd0>
 80053b6:	2a0b      	cmp	r2, #11
 80053b8:	d917      	bls.n	80053ea <_malloc_r+0xc2>
 80053ba:	1961      	adds	r1, r4, r5
 80053bc:	42a3      	cmp	r3, r4
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	bf18      	it	ne
 80053c2:	6059      	strne	r1, [r3, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	bf08      	it	eq
 80053c8:	f8c8 1000 	streq.w	r1, [r8]
 80053cc:	5162      	str	r2, [r4, r5]
 80053ce:	604b      	str	r3, [r1, #4]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f82f 	bl	8005434 <__malloc_unlock>
 80053d6:	f104 000b 	add.w	r0, r4, #11
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	f020 0007 	bic.w	r0, r0, #7
 80053e0:	1ac2      	subs	r2, r0, r3
 80053e2:	bf1c      	itt	ne
 80053e4:	1a1b      	subne	r3, r3, r0
 80053e6:	50a3      	strne	r3, [r4, r2]
 80053e8:	e7af      	b.n	800534a <_malloc_r+0x22>
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	bf0c      	ite	eq
 80053f0:	f8c8 2000 	streq.w	r2, [r8]
 80053f4:	605a      	strne	r2, [r3, #4]
 80053f6:	e7eb      	b.n	80053d0 <_malloc_r+0xa8>
 80053f8:	4623      	mov	r3, r4
 80053fa:	6864      	ldr	r4, [r4, #4]
 80053fc:	e7ae      	b.n	800535c <_malloc_r+0x34>
 80053fe:	463c      	mov	r4, r7
 8005400:	687f      	ldr	r7, [r7, #4]
 8005402:	e7b6      	b.n	8005372 <_malloc_r+0x4a>
 8005404:	461a      	mov	r2, r3
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	42a3      	cmp	r3, r4
 800540a:	d1fb      	bne.n	8005404 <_malloc_r+0xdc>
 800540c:	2300      	movs	r3, #0
 800540e:	6053      	str	r3, [r2, #4]
 8005410:	e7de      	b.n	80053d0 <_malloc_r+0xa8>
 8005412:	230c      	movs	r3, #12
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	4630      	mov	r0, r6
 8005418:	f000 f80c 	bl	8005434 <__malloc_unlock>
 800541c:	e794      	b.n	8005348 <_malloc_r+0x20>
 800541e:	6005      	str	r5, [r0, #0]
 8005420:	e7d6      	b.n	80053d0 <_malloc_r+0xa8>
 8005422:	bf00      	nop
 8005424:	20000b48 	.word	0x20000b48

08005428 <__malloc_lock>:
 8005428:	4801      	ldr	r0, [pc, #4]	@ (8005430 <__malloc_lock+0x8>)
 800542a:	f7ff bed2 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	20000b40 	.word	0x20000b40

08005434 <__malloc_unlock>:
 8005434:	4801      	ldr	r0, [pc, #4]	@ (800543c <__malloc_unlock+0x8>)
 8005436:	f7ff becd 	b.w	80051d4 <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	20000b40 	.word	0x20000b40

08005440 <__ssputs_r>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	688e      	ldr	r6, [r1, #8]
 8005446:	461f      	mov	r7, r3
 8005448:	42be      	cmp	r6, r7
 800544a:	680b      	ldr	r3, [r1, #0]
 800544c:	4682      	mov	sl, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4690      	mov	r8, r2
 8005452:	d82d      	bhi.n	80054b0 <__ssputs_r+0x70>
 8005454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005458:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800545c:	d026      	beq.n	80054ac <__ssputs_r+0x6c>
 800545e:	6965      	ldr	r5, [r4, #20]
 8005460:	6909      	ldr	r1, [r1, #16]
 8005462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005466:	eba3 0901 	sub.w	r9, r3, r1
 800546a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800546e:	1c7b      	adds	r3, r7, #1
 8005470:	444b      	add	r3, r9
 8005472:	106d      	asrs	r5, r5, #1
 8005474:	429d      	cmp	r5, r3
 8005476:	bf38      	it	cc
 8005478:	461d      	movcc	r5, r3
 800547a:	0553      	lsls	r3, r2, #21
 800547c:	d527      	bpl.n	80054ce <__ssputs_r+0x8e>
 800547e:	4629      	mov	r1, r5
 8005480:	f7ff ff52 	bl	8005328 <_malloc_r>
 8005484:	4606      	mov	r6, r0
 8005486:	b360      	cbz	r0, 80054e2 <__ssputs_r+0xa2>
 8005488:	6921      	ldr	r1, [r4, #16]
 800548a:	464a      	mov	r2, r9
 800548c:	f7ff feab 	bl	80051e6 <memcpy>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	6126      	str	r6, [r4, #16]
 800549e:	6165      	str	r5, [r4, #20]
 80054a0:	444e      	add	r6, r9
 80054a2:	eba5 0509 	sub.w	r5, r5, r9
 80054a6:	6026      	str	r6, [r4, #0]
 80054a8:	60a5      	str	r5, [r4, #8]
 80054aa:	463e      	mov	r6, r7
 80054ac:	42be      	cmp	r6, r7
 80054ae:	d900      	bls.n	80054b2 <__ssputs_r+0x72>
 80054b0:	463e      	mov	r6, r7
 80054b2:	6820      	ldr	r0, [r4, #0]
 80054b4:	4632      	mov	r2, r6
 80054b6:	4641      	mov	r1, r8
 80054b8:	f000 fd3e 	bl	8005f38 <memmove>
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	1b9b      	subs	r3, r3, r6
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	4433      	add	r3, r6
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	2000      	movs	r0, #0
 80054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ce:	462a      	mov	r2, r5
 80054d0:	f000 fd85 	bl	8005fde <_realloc_r>
 80054d4:	4606      	mov	r6, r0
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d1e0      	bne.n	800549c <__ssputs_r+0x5c>
 80054da:	6921      	ldr	r1, [r4, #16]
 80054dc:	4650      	mov	r0, sl
 80054de:	f7ff feaf 	bl	8005240 <_free_r>
 80054e2:	230c      	movs	r3, #12
 80054e4:	f8ca 3000 	str.w	r3, [sl]
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e7e9      	b.n	80054ca <__ssputs_r+0x8a>
	...

080054f8 <_svfiprintf_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	4698      	mov	r8, r3
 80054fe:	898b      	ldrh	r3, [r1, #12]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	b09d      	sub	sp, #116	@ 0x74
 8005504:	4607      	mov	r7, r0
 8005506:	460d      	mov	r5, r1
 8005508:	4614      	mov	r4, r2
 800550a:	d510      	bpl.n	800552e <_svfiprintf_r+0x36>
 800550c:	690b      	ldr	r3, [r1, #16]
 800550e:	b973      	cbnz	r3, 800552e <_svfiprintf_r+0x36>
 8005510:	2140      	movs	r1, #64	@ 0x40
 8005512:	f7ff ff09 	bl	8005328 <_malloc_r>
 8005516:	6028      	str	r0, [r5, #0]
 8005518:	6128      	str	r0, [r5, #16]
 800551a:	b930      	cbnz	r0, 800552a <_svfiprintf_r+0x32>
 800551c:	230c      	movs	r3, #12
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	b01d      	add	sp, #116	@ 0x74
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	2340      	movs	r3, #64	@ 0x40
 800552c:	616b      	str	r3, [r5, #20]
 800552e:	2300      	movs	r3, #0
 8005530:	9309      	str	r3, [sp, #36]	@ 0x24
 8005532:	2320      	movs	r3, #32
 8005534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005538:	f8cd 800c 	str.w	r8, [sp, #12]
 800553c:	2330      	movs	r3, #48	@ 0x30
 800553e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056dc <_svfiprintf_r+0x1e4>
 8005542:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005546:	f04f 0901 	mov.w	r9, #1
 800554a:	4623      	mov	r3, r4
 800554c:	469a      	mov	sl, r3
 800554e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005552:	b10a      	cbz	r2, 8005558 <_svfiprintf_r+0x60>
 8005554:	2a25      	cmp	r2, #37	@ 0x25
 8005556:	d1f9      	bne.n	800554c <_svfiprintf_r+0x54>
 8005558:	ebba 0b04 	subs.w	fp, sl, r4
 800555c:	d00b      	beq.n	8005576 <_svfiprintf_r+0x7e>
 800555e:	465b      	mov	r3, fp
 8005560:	4622      	mov	r2, r4
 8005562:	4629      	mov	r1, r5
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff ff6b 	bl	8005440 <__ssputs_r>
 800556a:	3001      	adds	r0, #1
 800556c:	f000 80a7 	beq.w	80056be <_svfiprintf_r+0x1c6>
 8005570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005572:	445a      	add	r2, fp
 8005574:	9209      	str	r2, [sp, #36]	@ 0x24
 8005576:	f89a 3000 	ldrb.w	r3, [sl]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 809f 	beq.w	80056be <_svfiprintf_r+0x1c6>
 8005580:	2300      	movs	r3, #0
 8005582:	f04f 32ff 	mov.w	r2, #4294967295
 8005586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800558a:	f10a 0a01 	add.w	sl, sl, #1
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	9307      	str	r3, [sp, #28]
 8005592:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005596:	931a      	str	r3, [sp, #104]	@ 0x68
 8005598:	4654      	mov	r4, sl
 800559a:	2205      	movs	r2, #5
 800559c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a0:	484e      	ldr	r0, [pc, #312]	@ (80056dc <_svfiprintf_r+0x1e4>)
 80055a2:	f7fa fe35 	bl	8000210 <memchr>
 80055a6:	9a04      	ldr	r2, [sp, #16]
 80055a8:	b9d8      	cbnz	r0, 80055e2 <_svfiprintf_r+0xea>
 80055aa:	06d0      	lsls	r0, r2, #27
 80055ac:	bf44      	itt	mi
 80055ae:	2320      	movmi	r3, #32
 80055b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055b4:	0711      	lsls	r1, r2, #28
 80055b6:	bf44      	itt	mi
 80055b8:	232b      	movmi	r3, #43	@ 0x2b
 80055ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055be:	f89a 3000 	ldrb.w	r3, [sl]
 80055c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c4:	d015      	beq.n	80055f2 <_svfiprintf_r+0xfa>
 80055c6:	9a07      	ldr	r2, [sp, #28]
 80055c8:	4654      	mov	r4, sl
 80055ca:	2000      	movs	r0, #0
 80055cc:	f04f 0c0a 	mov.w	ip, #10
 80055d0:	4621      	mov	r1, r4
 80055d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d6:	3b30      	subs	r3, #48	@ 0x30
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d94b      	bls.n	8005674 <_svfiprintf_r+0x17c>
 80055dc:	b1b0      	cbz	r0, 800560c <_svfiprintf_r+0x114>
 80055de:	9207      	str	r2, [sp, #28]
 80055e0:	e014      	b.n	800560c <_svfiprintf_r+0x114>
 80055e2:	eba0 0308 	sub.w	r3, r0, r8
 80055e6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	46a2      	mov	sl, r4
 80055f0:	e7d2      	b.n	8005598 <_svfiprintf_r+0xa0>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	1d19      	adds	r1, r3, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	9103      	str	r1, [sp, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bfbb      	ittet	lt
 80055fe:	425b      	neglt	r3, r3
 8005600:	f042 0202 	orrlt.w	r2, r2, #2
 8005604:	9307      	strge	r3, [sp, #28]
 8005606:	9307      	strlt	r3, [sp, #28]
 8005608:	bfb8      	it	lt
 800560a:	9204      	strlt	r2, [sp, #16]
 800560c:	7823      	ldrb	r3, [r4, #0]
 800560e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005610:	d10a      	bne.n	8005628 <_svfiprintf_r+0x130>
 8005612:	7863      	ldrb	r3, [r4, #1]
 8005614:	2b2a      	cmp	r3, #42	@ 0x2a
 8005616:	d132      	bne.n	800567e <_svfiprintf_r+0x186>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	9203      	str	r2, [sp, #12]
 8005620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005624:	3402      	adds	r4, #2
 8005626:	9305      	str	r3, [sp, #20]
 8005628:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056ec <_svfiprintf_r+0x1f4>
 800562c:	7821      	ldrb	r1, [r4, #0]
 800562e:	2203      	movs	r2, #3
 8005630:	4650      	mov	r0, sl
 8005632:	f7fa fded 	bl	8000210 <memchr>
 8005636:	b138      	cbz	r0, 8005648 <_svfiprintf_r+0x150>
 8005638:	9b04      	ldr	r3, [sp, #16]
 800563a:	eba0 000a 	sub.w	r0, r0, sl
 800563e:	2240      	movs	r2, #64	@ 0x40
 8005640:	4082      	lsls	r2, r0
 8005642:	4313      	orrs	r3, r2
 8005644:	3401      	adds	r4, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	4824      	ldr	r0, [pc, #144]	@ (80056e0 <_svfiprintf_r+0x1e8>)
 800564e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005652:	2206      	movs	r2, #6
 8005654:	f7fa fddc 	bl	8000210 <memchr>
 8005658:	2800      	cmp	r0, #0
 800565a:	d036      	beq.n	80056ca <_svfiprintf_r+0x1d2>
 800565c:	4b21      	ldr	r3, [pc, #132]	@ (80056e4 <_svfiprintf_r+0x1ec>)
 800565e:	bb1b      	cbnz	r3, 80056a8 <_svfiprintf_r+0x1b0>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	3307      	adds	r3, #7
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	3308      	adds	r3, #8
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	4433      	add	r3, r6
 8005670:	9309      	str	r3, [sp, #36]	@ 0x24
 8005672:	e76a      	b.n	800554a <_svfiprintf_r+0x52>
 8005674:	fb0c 3202 	mla	r2, ip, r2, r3
 8005678:	460c      	mov	r4, r1
 800567a:	2001      	movs	r0, #1
 800567c:	e7a8      	b.n	80055d0 <_svfiprintf_r+0xd8>
 800567e:	2300      	movs	r3, #0
 8005680:	3401      	adds	r4, #1
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	4619      	mov	r1, r3
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4620      	mov	r0, r4
 800568c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005690:	3a30      	subs	r2, #48	@ 0x30
 8005692:	2a09      	cmp	r2, #9
 8005694:	d903      	bls.n	800569e <_svfiprintf_r+0x1a6>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c6      	beq.n	8005628 <_svfiprintf_r+0x130>
 800569a:	9105      	str	r1, [sp, #20]
 800569c:	e7c4      	b.n	8005628 <_svfiprintf_r+0x130>
 800569e:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a2:	4604      	mov	r4, r0
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7f0      	b.n	800568a <_svfiprintf_r+0x192>
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <_svfiprintf_r+0x1f0>)
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	4638      	mov	r0, r7
 80056b4:	f3af 8000 	nop.w
 80056b8:	1c42      	adds	r2, r0, #1
 80056ba:	4606      	mov	r6, r0
 80056bc:	d1d6      	bne.n	800566c <_svfiprintf_r+0x174>
 80056be:	89ab      	ldrh	r3, [r5, #12]
 80056c0:	065b      	lsls	r3, r3, #25
 80056c2:	f53f af2d 	bmi.w	8005520 <_svfiprintf_r+0x28>
 80056c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056c8:	e72c      	b.n	8005524 <_svfiprintf_r+0x2c>
 80056ca:	ab03      	add	r3, sp, #12
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	462a      	mov	r2, r5
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <_svfiprintf_r+0x1f0>)
 80056d2:	a904      	add	r1, sp, #16
 80056d4:	4638      	mov	r0, r7
 80056d6:	f000 f9bb 	bl	8005a50 <_printf_i>
 80056da:	e7ed      	b.n	80056b8 <_svfiprintf_r+0x1c0>
 80056dc:	080064ed 	.word	0x080064ed
 80056e0:	080064f7 	.word	0x080064f7
 80056e4:	00000000 	.word	0x00000000
 80056e8:	08005441 	.word	0x08005441
 80056ec:	080064f3 	.word	0x080064f3

080056f0 <__sfputc_r>:
 80056f0:	6893      	ldr	r3, [r2, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	b410      	push	{r4}
 80056f8:	6093      	str	r3, [r2, #8]
 80056fa:	da08      	bge.n	800570e <__sfputc_r+0x1e>
 80056fc:	6994      	ldr	r4, [r2, #24]
 80056fe:	42a3      	cmp	r3, r4
 8005700:	db01      	blt.n	8005706 <__sfputc_r+0x16>
 8005702:	290a      	cmp	r1, #10
 8005704:	d103      	bne.n	800570e <__sfputc_r+0x1e>
 8005706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800570a:	f7ff bbc2 	b.w	8004e92 <__swbuf_r>
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	1c58      	adds	r0, r3, #1
 8005712:	6010      	str	r0, [r2, #0]
 8005714:	7019      	strb	r1, [r3, #0]
 8005716:	4608      	mov	r0, r1
 8005718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571c:	4770      	bx	lr

0800571e <__sfputs_r>:
 800571e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005720:	4606      	mov	r6, r0
 8005722:	460f      	mov	r7, r1
 8005724:	4614      	mov	r4, r2
 8005726:	18d5      	adds	r5, r2, r3
 8005728:	42ac      	cmp	r4, r5
 800572a:	d101      	bne.n	8005730 <__sfputs_r+0x12>
 800572c:	2000      	movs	r0, #0
 800572e:	e007      	b.n	8005740 <__sfputs_r+0x22>
 8005730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005734:	463a      	mov	r2, r7
 8005736:	4630      	mov	r0, r6
 8005738:	f7ff ffda 	bl	80056f0 <__sfputc_r>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d1f3      	bne.n	8005728 <__sfputs_r+0xa>
 8005740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005744 <_vfiprintf_r>:
 8005744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005748:	460d      	mov	r5, r1
 800574a:	b09d      	sub	sp, #116	@ 0x74
 800574c:	4614      	mov	r4, r2
 800574e:	4698      	mov	r8, r3
 8005750:	4606      	mov	r6, r0
 8005752:	b118      	cbz	r0, 800575c <_vfiprintf_r+0x18>
 8005754:	6a03      	ldr	r3, [r0, #32]
 8005756:	b90b      	cbnz	r3, 800575c <_vfiprintf_r+0x18>
 8005758:	f7ff fa8a 	bl	8004c70 <__sinit>
 800575c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800575e:	07d9      	lsls	r1, r3, #31
 8005760:	d405      	bmi.n	800576e <_vfiprintf_r+0x2a>
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	059a      	lsls	r2, r3, #22
 8005766:	d402      	bmi.n	800576e <_vfiprintf_r+0x2a>
 8005768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800576a:	f7ff fd32 	bl	80051d2 <__retarget_lock_acquire_recursive>
 800576e:	89ab      	ldrh	r3, [r5, #12]
 8005770:	071b      	lsls	r3, r3, #28
 8005772:	d501      	bpl.n	8005778 <_vfiprintf_r+0x34>
 8005774:	692b      	ldr	r3, [r5, #16]
 8005776:	b99b      	cbnz	r3, 80057a0 <_vfiprintf_r+0x5c>
 8005778:	4629      	mov	r1, r5
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff fbc8 	bl	8004f10 <__swsetup_r>
 8005780:	b170      	cbz	r0, 80057a0 <_vfiprintf_r+0x5c>
 8005782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005784:	07dc      	lsls	r4, r3, #31
 8005786:	d504      	bpl.n	8005792 <_vfiprintf_r+0x4e>
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	b01d      	add	sp, #116	@ 0x74
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	0598      	lsls	r0, r3, #22
 8005796:	d4f7      	bmi.n	8005788 <_vfiprintf_r+0x44>
 8005798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800579a:	f7ff fd1b 	bl	80051d4 <__retarget_lock_release_recursive>
 800579e:	e7f3      	b.n	8005788 <_vfiprintf_r+0x44>
 80057a0:	2300      	movs	r3, #0
 80057a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057a4:	2320      	movs	r3, #32
 80057a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ae:	2330      	movs	r3, #48	@ 0x30
 80057b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005960 <_vfiprintf_r+0x21c>
 80057b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057b8:	f04f 0901 	mov.w	r9, #1
 80057bc:	4623      	mov	r3, r4
 80057be:	469a      	mov	sl, r3
 80057c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c4:	b10a      	cbz	r2, 80057ca <_vfiprintf_r+0x86>
 80057c6:	2a25      	cmp	r2, #37	@ 0x25
 80057c8:	d1f9      	bne.n	80057be <_vfiprintf_r+0x7a>
 80057ca:	ebba 0b04 	subs.w	fp, sl, r4
 80057ce:	d00b      	beq.n	80057e8 <_vfiprintf_r+0xa4>
 80057d0:	465b      	mov	r3, fp
 80057d2:	4622      	mov	r2, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	4630      	mov	r0, r6
 80057d8:	f7ff ffa1 	bl	800571e <__sfputs_r>
 80057dc:	3001      	adds	r0, #1
 80057de:	f000 80a7 	beq.w	8005930 <_vfiprintf_r+0x1ec>
 80057e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057e4:	445a      	add	r2, fp
 80057e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80057e8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 809f 	beq.w	8005930 <_vfiprintf_r+0x1ec>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057fc:	f10a 0a01 	add.w	sl, sl, #1
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	9307      	str	r3, [sp, #28]
 8005804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005808:	931a      	str	r3, [sp, #104]	@ 0x68
 800580a:	4654      	mov	r4, sl
 800580c:	2205      	movs	r2, #5
 800580e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005812:	4853      	ldr	r0, [pc, #332]	@ (8005960 <_vfiprintf_r+0x21c>)
 8005814:	f7fa fcfc 	bl	8000210 <memchr>
 8005818:	9a04      	ldr	r2, [sp, #16]
 800581a:	b9d8      	cbnz	r0, 8005854 <_vfiprintf_r+0x110>
 800581c:	06d1      	lsls	r1, r2, #27
 800581e:	bf44      	itt	mi
 8005820:	2320      	movmi	r3, #32
 8005822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005826:	0713      	lsls	r3, r2, #28
 8005828:	bf44      	itt	mi
 800582a:	232b      	movmi	r3, #43	@ 0x2b
 800582c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005830:	f89a 3000 	ldrb.w	r3, [sl]
 8005834:	2b2a      	cmp	r3, #42	@ 0x2a
 8005836:	d015      	beq.n	8005864 <_vfiprintf_r+0x120>
 8005838:	9a07      	ldr	r2, [sp, #28]
 800583a:	4654      	mov	r4, sl
 800583c:	2000      	movs	r0, #0
 800583e:	f04f 0c0a 	mov.w	ip, #10
 8005842:	4621      	mov	r1, r4
 8005844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005848:	3b30      	subs	r3, #48	@ 0x30
 800584a:	2b09      	cmp	r3, #9
 800584c:	d94b      	bls.n	80058e6 <_vfiprintf_r+0x1a2>
 800584e:	b1b0      	cbz	r0, 800587e <_vfiprintf_r+0x13a>
 8005850:	9207      	str	r2, [sp, #28]
 8005852:	e014      	b.n	800587e <_vfiprintf_r+0x13a>
 8005854:	eba0 0308 	sub.w	r3, r0, r8
 8005858:	fa09 f303 	lsl.w	r3, r9, r3
 800585c:	4313      	orrs	r3, r2
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	46a2      	mov	sl, r4
 8005862:	e7d2      	b.n	800580a <_vfiprintf_r+0xc6>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	1d19      	adds	r1, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	9103      	str	r1, [sp, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbb      	ittet	lt
 8005870:	425b      	neglt	r3, r3
 8005872:	f042 0202 	orrlt.w	r2, r2, #2
 8005876:	9307      	strge	r3, [sp, #28]
 8005878:	9307      	strlt	r3, [sp, #28]
 800587a:	bfb8      	it	lt
 800587c:	9204      	strlt	r2, [sp, #16]
 800587e:	7823      	ldrb	r3, [r4, #0]
 8005880:	2b2e      	cmp	r3, #46	@ 0x2e
 8005882:	d10a      	bne.n	800589a <_vfiprintf_r+0x156>
 8005884:	7863      	ldrb	r3, [r4, #1]
 8005886:	2b2a      	cmp	r3, #42	@ 0x2a
 8005888:	d132      	bne.n	80058f0 <_vfiprintf_r+0x1ac>
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	1d1a      	adds	r2, r3, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	9203      	str	r2, [sp, #12]
 8005892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005896:	3402      	adds	r4, #2
 8005898:	9305      	str	r3, [sp, #20]
 800589a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005970 <_vfiprintf_r+0x22c>
 800589e:	7821      	ldrb	r1, [r4, #0]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4650      	mov	r0, sl
 80058a4:	f7fa fcb4 	bl	8000210 <memchr>
 80058a8:	b138      	cbz	r0, 80058ba <_vfiprintf_r+0x176>
 80058aa:	9b04      	ldr	r3, [sp, #16]
 80058ac:	eba0 000a 	sub.w	r0, r0, sl
 80058b0:	2240      	movs	r2, #64	@ 0x40
 80058b2:	4082      	lsls	r2, r0
 80058b4:	4313      	orrs	r3, r2
 80058b6:	3401      	adds	r4, #1
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058be:	4829      	ldr	r0, [pc, #164]	@ (8005964 <_vfiprintf_r+0x220>)
 80058c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058c4:	2206      	movs	r2, #6
 80058c6:	f7fa fca3 	bl	8000210 <memchr>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d03f      	beq.n	800594e <_vfiprintf_r+0x20a>
 80058ce:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <_vfiprintf_r+0x224>)
 80058d0:	bb1b      	cbnz	r3, 800591a <_vfiprintf_r+0x1d6>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	3307      	adds	r3, #7
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	3308      	adds	r3, #8
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e0:	443b      	add	r3, r7
 80058e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e4:	e76a      	b.n	80057bc <_vfiprintf_r+0x78>
 80058e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ea:	460c      	mov	r4, r1
 80058ec:	2001      	movs	r0, #1
 80058ee:	e7a8      	b.n	8005842 <_vfiprintf_r+0xfe>
 80058f0:	2300      	movs	r3, #0
 80058f2:	3401      	adds	r4, #1
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	4619      	mov	r1, r3
 80058f8:	f04f 0c0a 	mov.w	ip, #10
 80058fc:	4620      	mov	r0, r4
 80058fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005902:	3a30      	subs	r2, #48	@ 0x30
 8005904:	2a09      	cmp	r2, #9
 8005906:	d903      	bls.n	8005910 <_vfiprintf_r+0x1cc>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0c6      	beq.n	800589a <_vfiprintf_r+0x156>
 800590c:	9105      	str	r1, [sp, #20]
 800590e:	e7c4      	b.n	800589a <_vfiprintf_r+0x156>
 8005910:	fb0c 2101 	mla	r1, ip, r1, r2
 8005914:	4604      	mov	r4, r0
 8005916:	2301      	movs	r3, #1
 8005918:	e7f0      	b.n	80058fc <_vfiprintf_r+0x1b8>
 800591a:	ab03      	add	r3, sp, #12
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	462a      	mov	r2, r5
 8005920:	4b12      	ldr	r3, [pc, #72]	@ (800596c <_vfiprintf_r+0x228>)
 8005922:	a904      	add	r1, sp, #16
 8005924:	4630      	mov	r0, r6
 8005926:	f3af 8000 	nop.w
 800592a:	4607      	mov	r7, r0
 800592c:	1c78      	adds	r0, r7, #1
 800592e:	d1d6      	bne.n	80058de <_vfiprintf_r+0x19a>
 8005930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005932:	07d9      	lsls	r1, r3, #31
 8005934:	d405      	bmi.n	8005942 <_vfiprintf_r+0x1fe>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	059a      	lsls	r2, r3, #22
 800593a:	d402      	bmi.n	8005942 <_vfiprintf_r+0x1fe>
 800593c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800593e:	f7ff fc49 	bl	80051d4 <__retarget_lock_release_recursive>
 8005942:	89ab      	ldrh	r3, [r5, #12]
 8005944:	065b      	lsls	r3, r3, #25
 8005946:	f53f af1f 	bmi.w	8005788 <_vfiprintf_r+0x44>
 800594a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800594c:	e71e      	b.n	800578c <_vfiprintf_r+0x48>
 800594e:	ab03      	add	r3, sp, #12
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	462a      	mov	r2, r5
 8005954:	4b05      	ldr	r3, [pc, #20]	@ (800596c <_vfiprintf_r+0x228>)
 8005956:	a904      	add	r1, sp, #16
 8005958:	4630      	mov	r0, r6
 800595a:	f000 f879 	bl	8005a50 <_printf_i>
 800595e:	e7e4      	b.n	800592a <_vfiprintf_r+0x1e6>
 8005960:	080064ed 	.word	0x080064ed
 8005964:	080064f7 	.word	0x080064f7
 8005968:	00000000 	.word	0x00000000
 800596c:	0800571f 	.word	0x0800571f
 8005970:	080064f3 	.word	0x080064f3

08005974 <_printf_common>:
 8005974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	4616      	mov	r6, r2
 800597a:	4698      	mov	r8, r3
 800597c:	688a      	ldr	r2, [r1, #8]
 800597e:	690b      	ldr	r3, [r1, #16]
 8005980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005984:	4293      	cmp	r3, r2
 8005986:	bfb8      	it	lt
 8005988:	4613      	movlt	r3, r2
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005990:	4607      	mov	r7, r0
 8005992:	460c      	mov	r4, r1
 8005994:	b10a      	cbz	r2, 800599a <_printf_common+0x26>
 8005996:	3301      	adds	r3, #1
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	0699      	lsls	r1, r3, #26
 800599e:	bf42      	ittt	mi
 80059a0:	6833      	ldrmi	r3, [r6, #0]
 80059a2:	3302      	addmi	r3, #2
 80059a4:	6033      	strmi	r3, [r6, #0]
 80059a6:	6825      	ldr	r5, [r4, #0]
 80059a8:	f015 0506 	ands.w	r5, r5, #6
 80059ac:	d106      	bne.n	80059bc <_printf_common+0x48>
 80059ae:	f104 0a19 	add.w	sl, r4, #25
 80059b2:	68e3      	ldr	r3, [r4, #12]
 80059b4:	6832      	ldr	r2, [r6, #0]
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	dc26      	bgt.n	8005a0a <_printf_common+0x96>
 80059bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	3b00      	subs	r3, #0
 80059c4:	bf18      	it	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	0692      	lsls	r2, r2, #26
 80059ca:	d42b      	bmi.n	8005a24 <_printf_common+0xb0>
 80059cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059d0:	4641      	mov	r1, r8
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c8      	blx	r9
 80059d6:	3001      	adds	r0, #1
 80059d8:	d01e      	beq.n	8005a18 <_printf_common+0xa4>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	6922      	ldr	r2, [r4, #16]
 80059de:	f003 0306 	and.w	r3, r3, #6
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	bf02      	ittt	eq
 80059e6:	68e5      	ldreq	r5, [r4, #12]
 80059e8:	6833      	ldreq	r3, [r6, #0]
 80059ea:	1aed      	subeq	r5, r5, r3
 80059ec:	68a3      	ldr	r3, [r4, #8]
 80059ee:	bf0c      	ite	eq
 80059f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059f4:	2500      	movne	r5, #0
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bfc4      	itt	gt
 80059fa:	1a9b      	subgt	r3, r3, r2
 80059fc:	18ed      	addgt	r5, r5, r3
 80059fe:	2600      	movs	r6, #0
 8005a00:	341a      	adds	r4, #26
 8005a02:	42b5      	cmp	r5, r6
 8005a04:	d11a      	bne.n	8005a3c <_printf_common+0xc8>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e008      	b.n	8005a1c <_printf_common+0xa8>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	4641      	mov	r1, r8
 8005a10:	4638      	mov	r0, r7
 8005a12:	47c8      	blx	r9
 8005a14:	3001      	adds	r0, #1
 8005a16:	d103      	bne.n	8005a20 <_printf_common+0xac>
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	3501      	adds	r5, #1
 8005a22:	e7c6      	b.n	80059b2 <_printf_common+0x3e>
 8005a24:	18e1      	adds	r1, r4, r3
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	2030      	movs	r0, #48	@ 0x30
 8005a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a2e:	4422      	add	r2, r4
 8005a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a38:	3302      	adds	r3, #2
 8005a3a:	e7c7      	b.n	80059cc <_printf_common+0x58>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4641      	mov	r1, r8
 8005a42:	4638      	mov	r0, r7
 8005a44:	47c8      	blx	r9
 8005a46:	3001      	adds	r0, #1
 8005a48:	d0e6      	beq.n	8005a18 <_printf_common+0xa4>
 8005a4a:	3601      	adds	r6, #1
 8005a4c:	e7d9      	b.n	8005a02 <_printf_common+0x8e>
	...

08005a50 <_printf_i>:
 8005a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	7e0f      	ldrb	r7, [r1, #24]
 8005a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a58:	2f78      	cmp	r7, #120	@ 0x78
 8005a5a:	4691      	mov	r9, r2
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	469a      	mov	sl, r3
 8005a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a66:	d807      	bhi.n	8005a78 <_printf_i+0x28>
 8005a68:	2f62      	cmp	r7, #98	@ 0x62
 8005a6a:	d80a      	bhi.n	8005a82 <_printf_i+0x32>
 8005a6c:	2f00      	cmp	r7, #0
 8005a6e:	f000 80d2 	beq.w	8005c16 <_printf_i+0x1c6>
 8005a72:	2f58      	cmp	r7, #88	@ 0x58
 8005a74:	f000 80b9 	beq.w	8005bea <_printf_i+0x19a>
 8005a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a80:	e03a      	b.n	8005af8 <_printf_i+0xa8>
 8005a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a86:	2b15      	cmp	r3, #21
 8005a88:	d8f6      	bhi.n	8005a78 <_printf_i+0x28>
 8005a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a90 <_printf_i+0x40>)
 8005a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005a79 	.word	0x08005a79
 8005a9c:	08005a79 	.word	0x08005a79
 8005aa0:	08005a79 	.word	0x08005a79
 8005aa4:	08005a79 	.word	0x08005a79
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005a79 	.word	0x08005a79
 8005ab0:	08005a79 	.word	0x08005a79
 8005ab4:	08005a79 	.word	0x08005a79
 8005ab8:	08005a79 	.word	0x08005a79
 8005abc:	08005bfd 	.word	0x08005bfd
 8005ac0:	08005b27 	.word	0x08005b27
 8005ac4:	08005bb7 	.word	0x08005bb7
 8005ac8:	08005a79 	.word	0x08005a79
 8005acc:	08005a79 	.word	0x08005a79
 8005ad0:	08005c1f 	.word	0x08005c1f
 8005ad4:	08005a79 	.word	0x08005a79
 8005ad8:	08005b27 	.word	0x08005b27
 8005adc:	08005a79 	.word	0x08005a79
 8005ae0:	08005a79 	.word	0x08005a79
 8005ae4:	08005bbf 	.word	0x08005bbf
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6032      	str	r2, [r6, #0]
 8005af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005af8:	2301      	movs	r3, #1
 8005afa:	e09d      	b.n	8005c38 <_printf_i+0x1e8>
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	1d19      	adds	r1, r3, #4
 8005b02:	6031      	str	r1, [r6, #0]
 8005b04:	0606      	lsls	r6, r0, #24
 8005b06:	d501      	bpl.n	8005b0c <_printf_i+0xbc>
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	e003      	b.n	8005b14 <_printf_i+0xc4>
 8005b0c:	0645      	lsls	r5, r0, #25
 8005b0e:	d5fb      	bpl.n	8005b08 <_printf_i+0xb8>
 8005b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	da03      	bge.n	8005b20 <_printf_i+0xd0>
 8005b18:	232d      	movs	r3, #45	@ 0x2d
 8005b1a:	426d      	negs	r5, r5
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b20:	4859      	ldr	r0, [pc, #356]	@ (8005c88 <_printf_i+0x238>)
 8005b22:	230a      	movs	r3, #10
 8005b24:	e011      	b.n	8005b4a <_printf_i+0xfa>
 8005b26:	6821      	ldr	r1, [r4, #0]
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	0608      	lsls	r0, r1, #24
 8005b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b30:	d402      	bmi.n	8005b38 <_printf_i+0xe8>
 8005b32:	0649      	lsls	r1, r1, #25
 8005b34:	bf48      	it	mi
 8005b36:	b2ad      	uxthmi	r5, r5
 8005b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b3a:	4853      	ldr	r0, [pc, #332]	@ (8005c88 <_printf_i+0x238>)
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	bf14      	ite	ne
 8005b40:	230a      	movne	r3, #10
 8005b42:	2308      	moveq	r3, #8
 8005b44:	2100      	movs	r1, #0
 8005b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b4a:	6866      	ldr	r6, [r4, #4]
 8005b4c:	60a6      	str	r6, [r4, #8]
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	bfa2      	ittt	ge
 8005b52:	6821      	ldrge	r1, [r4, #0]
 8005b54:	f021 0104 	bicge.w	r1, r1, #4
 8005b58:	6021      	strge	r1, [r4, #0]
 8005b5a:	b90d      	cbnz	r5, 8005b60 <_printf_i+0x110>
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d04b      	beq.n	8005bf8 <_printf_i+0x1a8>
 8005b60:	4616      	mov	r6, r2
 8005b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b66:	fb03 5711 	mls	r7, r3, r1, r5
 8005b6a:	5dc7      	ldrb	r7, [r0, r7]
 8005b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b70:	462f      	mov	r7, r5
 8005b72:	42bb      	cmp	r3, r7
 8005b74:	460d      	mov	r5, r1
 8005b76:	d9f4      	bls.n	8005b62 <_printf_i+0x112>
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d10b      	bne.n	8005b94 <_printf_i+0x144>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	07df      	lsls	r7, r3, #31
 8005b80:	d508      	bpl.n	8005b94 <_printf_i+0x144>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	4299      	cmp	r1, r3
 8005b88:	bfde      	ittt	le
 8005b8a:	2330      	movle	r3, #48	@ 0x30
 8005b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b94:	1b92      	subs	r2, r2, r6
 8005b96:	6122      	str	r2, [r4, #16]
 8005b98:	f8cd a000 	str.w	sl, [sp]
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	aa03      	add	r2, sp, #12
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7ff fee6 	bl	8005974 <_printf_common>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d14a      	bne.n	8005c42 <_printf_i+0x1f2>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	b004      	add	sp, #16
 8005bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	f043 0320 	orr.w	r3, r3, #32
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	4833      	ldr	r0, [pc, #204]	@ (8005c8c <_printf_i+0x23c>)
 8005bc0:	2778      	movs	r7, #120	@ 0x78
 8005bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	6831      	ldr	r1, [r6, #0]
 8005bca:	061f      	lsls	r7, r3, #24
 8005bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bd0:	d402      	bmi.n	8005bd8 <_printf_i+0x188>
 8005bd2:	065f      	lsls	r7, r3, #25
 8005bd4:	bf48      	it	mi
 8005bd6:	b2ad      	uxthmi	r5, r5
 8005bd8:	6031      	str	r1, [r6, #0]
 8005bda:	07d9      	lsls	r1, r3, #31
 8005bdc:	bf44      	itt	mi
 8005bde:	f043 0320 	orrmi.w	r3, r3, #32
 8005be2:	6023      	strmi	r3, [r4, #0]
 8005be4:	b11d      	cbz	r5, 8005bee <_printf_i+0x19e>
 8005be6:	2310      	movs	r3, #16
 8005be8:	e7ac      	b.n	8005b44 <_printf_i+0xf4>
 8005bea:	4827      	ldr	r0, [pc, #156]	@ (8005c88 <_printf_i+0x238>)
 8005bec:	e7e9      	b.n	8005bc2 <_printf_i+0x172>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f023 0320 	bic.w	r3, r3, #32
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	e7f6      	b.n	8005be6 <_printf_i+0x196>
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	e7bd      	b.n	8005b78 <_printf_i+0x128>
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	6961      	ldr	r1, [r4, #20]
 8005c02:	1d18      	adds	r0, r3, #4
 8005c04:	6030      	str	r0, [r6, #0]
 8005c06:	062e      	lsls	r6, r5, #24
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0x1c0>
 8005c0c:	6019      	str	r1, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <_printf_i+0x1c6>
 8005c10:	0668      	lsls	r0, r5, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0x1bc>
 8005c14:	8019      	strh	r1, [r3, #0]
 8005c16:	2300      	movs	r3, #0
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	4616      	mov	r6, r2
 8005c1c:	e7bc      	b.n	8005b98 <_printf_i+0x148>
 8005c1e:	6833      	ldr	r3, [r6, #0]
 8005c20:	1d1a      	adds	r2, r3, #4
 8005c22:	6032      	str	r2, [r6, #0]
 8005c24:	681e      	ldr	r6, [r3, #0]
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7fa faf0 	bl	8000210 <memchr>
 8005c30:	b108      	cbz	r0, 8005c36 <_printf_i+0x1e6>
 8005c32:	1b80      	subs	r0, r0, r6
 8005c34:	6060      	str	r0, [r4, #4]
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c40:	e7aa      	b.n	8005b98 <_printf_i+0x148>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	4632      	mov	r2, r6
 8005c46:	4649      	mov	r1, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	47d0      	blx	sl
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d0ad      	beq.n	8005bac <_printf_i+0x15c>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	079b      	lsls	r3, r3, #30
 8005c54:	d413      	bmi.n	8005c7e <_printf_i+0x22e>
 8005c56:	68e0      	ldr	r0, [r4, #12]
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	4298      	cmp	r0, r3
 8005c5c:	bfb8      	it	lt
 8005c5e:	4618      	movlt	r0, r3
 8005c60:	e7a6      	b.n	8005bb0 <_printf_i+0x160>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4632      	mov	r2, r6
 8005c66:	4649      	mov	r1, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	47d0      	blx	sl
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d09d      	beq.n	8005bac <_printf_i+0x15c>
 8005c70:	3501      	adds	r5, #1
 8005c72:	68e3      	ldr	r3, [r4, #12]
 8005c74:	9903      	ldr	r1, [sp, #12]
 8005c76:	1a5b      	subs	r3, r3, r1
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	dcf2      	bgt.n	8005c62 <_printf_i+0x212>
 8005c7c:	e7eb      	b.n	8005c56 <_printf_i+0x206>
 8005c7e:	2500      	movs	r5, #0
 8005c80:	f104 0619 	add.w	r6, r4, #25
 8005c84:	e7f5      	b.n	8005c72 <_printf_i+0x222>
 8005c86:	bf00      	nop
 8005c88:	080064fe 	.word	0x080064fe
 8005c8c:	0800650f 	.word	0x0800650f

08005c90 <__sflush_r>:
 8005c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c98:	0716      	lsls	r6, r2, #28
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	d454      	bmi.n	8005d4a <__sflush_r+0xba>
 8005ca0:	684b      	ldr	r3, [r1, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dc02      	bgt.n	8005cac <__sflush_r+0x1c>
 8005ca6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dd48      	ble.n	8005d3e <__sflush_r+0xae>
 8005cac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d045      	beq.n	8005d3e <__sflush_r+0xae>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cb8:	682f      	ldr	r7, [r5, #0]
 8005cba:	6a21      	ldr	r1, [r4, #32]
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	d030      	beq.n	8005d22 <__sflush_r+0x92>
 8005cc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	0759      	lsls	r1, r3, #29
 8005cc6:	d505      	bpl.n	8005cd4 <__sflush_r+0x44>
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cce:	b10b      	cbz	r3, 8005cd4 <__sflush_r+0x44>
 8005cd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cd2:	1ad2      	subs	r2, r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cd8:	6a21      	ldr	r1, [r4, #32]
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b0      	blx	r6
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	d106      	bne.n	8005cf2 <__sflush_r+0x62>
 8005ce4:	6829      	ldr	r1, [r5, #0]
 8005ce6:	291d      	cmp	r1, #29
 8005ce8:	d82b      	bhi.n	8005d42 <__sflush_r+0xb2>
 8005cea:	4a2a      	ldr	r2, [pc, #168]	@ (8005d94 <__sflush_r+0x104>)
 8005cec:	410a      	asrs	r2, r1
 8005cee:	07d6      	lsls	r6, r2, #31
 8005cf0:	d427      	bmi.n	8005d42 <__sflush_r+0xb2>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6062      	str	r2, [r4, #4]
 8005cf6:	04d9      	lsls	r1, r3, #19
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	6022      	str	r2, [r4, #0]
 8005cfc:	d504      	bpl.n	8005d08 <__sflush_r+0x78>
 8005cfe:	1c42      	adds	r2, r0, #1
 8005d00:	d101      	bne.n	8005d06 <__sflush_r+0x76>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b903      	cbnz	r3, 8005d08 <__sflush_r+0x78>
 8005d06:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d0a:	602f      	str	r7, [r5, #0]
 8005d0c:	b1b9      	cbz	r1, 8005d3e <__sflush_r+0xae>
 8005d0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d002      	beq.n	8005d1c <__sflush_r+0x8c>
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff fa92 	bl	8005240 <_free_r>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d20:	e00d      	b.n	8005d3e <__sflush_r+0xae>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b0      	blx	r6
 8005d28:	4602      	mov	r2, r0
 8005d2a:	1c50      	adds	r0, r2, #1
 8005d2c:	d1c9      	bne.n	8005cc2 <__sflush_r+0x32>
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0c6      	beq.n	8005cc2 <__sflush_r+0x32>
 8005d34:	2b1d      	cmp	r3, #29
 8005d36:	d001      	beq.n	8005d3c <__sflush_r+0xac>
 8005d38:	2b16      	cmp	r3, #22
 8005d3a:	d11e      	bne.n	8005d7a <__sflush_r+0xea>
 8005d3c:	602f      	str	r7, [r5, #0]
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e022      	b.n	8005d88 <__sflush_r+0xf8>
 8005d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	e01b      	b.n	8005d82 <__sflush_r+0xf2>
 8005d4a:	690f      	ldr	r7, [r1, #16]
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	d0f6      	beq.n	8005d3e <__sflush_r+0xae>
 8005d50:	0793      	lsls	r3, r2, #30
 8005d52:	680e      	ldr	r6, [r1, #0]
 8005d54:	bf08      	it	eq
 8005d56:	694b      	ldreq	r3, [r1, #20]
 8005d58:	600f      	str	r7, [r1, #0]
 8005d5a:	bf18      	it	ne
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	eba6 0807 	sub.w	r8, r6, r7
 8005d62:	608b      	str	r3, [r1, #8]
 8005d64:	f1b8 0f00 	cmp.w	r8, #0
 8005d68:	dde9      	ble.n	8005d3e <__sflush_r+0xae>
 8005d6a:	6a21      	ldr	r1, [r4, #32]
 8005d6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d6e:	4643      	mov	r3, r8
 8005d70:	463a      	mov	r2, r7
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b0      	blx	r6
 8005d76:	2800      	cmp	r0, #0
 8005d78:	dc08      	bgt.n	8005d8c <__sflush_r+0xfc>
 8005d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8c:	4407      	add	r7, r0
 8005d8e:	eba8 0800 	sub.w	r8, r8, r0
 8005d92:	e7e7      	b.n	8005d64 <__sflush_r+0xd4>
 8005d94:	dfbffffe 	.word	0xdfbffffe

08005d98 <_fflush_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	690b      	ldr	r3, [r1, #16]
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	b913      	cbnz	r3, 8005da8 <_fflush_r+0x10>
 8005da2:	2500      	movs	r5, #0
 8005da4:	4628      	mov	r0, r5
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	b118      	cbz	r0, 8005db2 <_fflush_r+0x1a>
 8005daa:	6a03      	ldr	r3, [r0, #32]
 8005dac:	b90b      	cbnz	r3, 8005db2 <_fflush_r+0x1a>
 8005dae:	f7fe ff5f 	bl	8004c70 <__sinit>
 8005db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f3      	beq.n	8005da2 <_fflush_r+0xa>
 8005dba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005dbc:	07d0      	lsls	r0, r2, #31
 8005dbe:	d404      	bmi.n	8005dca <_fflush_r+0x32>
 8005dc0:	0599      	lsls	r1, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_fflush_r+0x32>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dc6:	f7ff fa04 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4621      	mov	r1, r4
 8005dce:	f7ff ff5f 	bl	8005c90 <__sflush_r>
 8005dd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dd4:	07da      	lsls	r2, r3, #31
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	d4e4      	bmi.n	8005da4 <_fflush_r+0xc>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	d4e1      	bmi.n	8005da4 <_fflush_r+0xc>
 8005de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005de2:	f7ff f9f7 	bl	80051d4 <__retarget_lock_release_recursive>
 8005de6:	e7dd      	b.n	8005da4 <_fflush_r+0xc>

08005de8 <fiprintf>:
 8005de8:	b40e      	push	{r1, r2, r3}
 8005dea:	b503      	push	{r0, r1, lr}
 8005dec:	4601      	mov	r1, r0
 8005dee:	ab03      	add	r3, sp, #12
 8005df0:	4805      	ldr	r0, [pc, #20]	@ (8005e08 <fiprintf+0x20>)
 8005df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df6:	6800      	ldr	r0, [r0, #0]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	f7ff fca3 	bl	8005744 <_vfiprintf_r>
 8005dfe:	b002      	add	sp, #8
 8005e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e04:	b003      	add	sp, #12
 8005e06:	4770      	bx	lr
 8005e08:	2000001c 	.word	0x2000001c

08005e0c <__swhatbuf_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	b096      	sub	sp, #88	@ 0x58
 8005e18:	4615      	mov	r5, r2
 8005e1a:	461e      	mov	r6, r3
 8005e1c:	da0d      	bge.n	8005e3a <__swhatbuf_r+0x2e>
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e24:	f04f 0100 	mov.w	r1, #0
 8005e28:	bf14      	ite	ne
 8005e2a:	2340      	movne	r3, #64	@ 0x40
 8005e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e30:	2000      	movs	r0, #0
 8005e32:	6031      	str	r1, [r6, #0]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	b016      	add	sp, #88	@ 0x58
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	f000 f896 	bl	8005f6c <_fstat_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dbec      	blt.n	8005e1e <__swhatbuf_r+0x12>
 8005e44:	9901      	ldr	r1, [sp, #4]
 8005e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e4e:	4259      	negs	r1, r3
 8005e50:	4159      	adcs	r1, r3
 8005e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e56:	e7eb      	b.n	8005e30 <__swhatbuf_r+0x24>

08005e58 <__smakebuf_r>:
 8005e58:	898b      	ldrh	r3, [r1, #12]
 8005e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5c:	079d      	lsls	r5, r3, #30
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	d507      	bpl.n	8005e74 <__smakebuf_r+0x1c>
 8005e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	b003      	add	sp, #12
 8005e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e74:	ab01      	add	r3, sp, #4
 8005e76:	466a      	mov	r2, sp
 8005e78:	f7ff ffc8 	bl	8005e0c <__swhatbuf_r>
 8005e7c:	9f00      	ldr	r7, [sp, #0]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4639      	mov	r1, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff fa50 	bl	8005328 <_malloc_r>
 8005e88:	b948      	cbnz	r0, 8005e9e <__smakebuf_r+0x46>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	059a      	lsls	r2, r3, #22
 8005e90:	d4ee      	bmi.n	8005e70 <__smakebuf_r+0x18>
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	e7e2      	b.n	8005e64 <__smakebuf_r+0xc>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	6020      	str	r0, [r4, #0]
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eae:	b15b      	cbz	r3, 8005ec8 <__smakebuf_r+0x70>
 8005eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f86b 	bl	8005f90 <_isatty_r>
 8005eba:	b128      	cbz	r0, 8005ec8 <__smakebuf_r+0x70>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	431d      	orrs	r5, r3
 8005ecc:	81a5      	strh	r5, [r4, #12]
 8005ece:	e7cf      	b.n	8005e70 <__smakebuf_r+0x18>

08005ed0 <_putc_r>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	b118      	cbz	r0, 8005ee2 <_putc_r+0x12>
 8005eda:	6a03      	ldr	r3, [r0, #32]
 8005edc:	b90b      	cbnz	r3, 8005ee2 <_putc_r+0x12>
 8005ede:	f7fe fec7 	bl	8004c70 <__sinit>
 8005ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ee4:	07d8      	lsls	r0, r3, #31
 8005ee6:	d405      	bmi.n	8005ef4 <_putc_r+0x24>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	0599      	lsls	r1, r3, #22
 8005eec:	d402      	bmi.n	8005ef4 <_putc_r+0x24>
 8005eee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef0:	f7ff f96f 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	da05      	bge.n	8005f0a <_putc_r+0x3a>
 8005efe:	69a2      	ldr	r2, [r4, #24]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	db12      	blt.n	8005f2a <_putc_r+0x5a>
 8005f04:	b2eb      	uxtb	r3, r5
 8005f06:	2b0a      	cmp	r3, #10
 8005f08:	d00f      	beq.n	8005f2a <_putc_r+0x5a>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	6022      	str	r2, [r4, #0]
 8005f10:	701d      	strb	r5, [r3, #0]
 8005f12:	b2ed      	uxtb	r5, r5
 8005f14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d405      	bmi.n	8005f26 <_putc_r+0x56>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	059b      	lsls	r3, r3, #22
 8005f1e:	d402      	bmi.n	8005f26 <_putc_r+0x56>
 8005f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f22:	f7ff f957 	bl	80051d4 <__retarget_lock_release_recursive>
 8005f26:	4628      	mov	r0, r5
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7fe ffaf 	bl	8004e92 <__swbuf_r>
 8005f34:	4605      	mov	r5, r0
 8005f36:	e7ed      	b.n	8005f14 <_putc_r+0x44>

08005f38 <memmove>:
 8005f38:	4288      	cmp	r0, r1
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	eb01 0402 	add.w	r4, r1, r2
 8005f40:	d902      	bls.n	8005f48 <memmove+0x10>
 8005f42:	4284      	cmp	r4, r0
 8005f44:	4623      	mov	r3, r4
 8005f46:	d807      	bhi.n	8005f58 <memmove+0x20>
 8005f48:	1e43      	subs	r3, r0, #1
 8005f4a:	42a1      	cmp	r1, r4
 8005f4c:	d008      	beq.n	8005f60 <memmove+0x28>
 8005f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f56:	e7f8      	b.n	8005f4a <memmove+0x12>
 8005f58:	4402      	add	r2, r0
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d100      	bne.n	8005f62 <memmove+0x2a>
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f6a:	e7f7      	b.n	8005f5c <memmove+0x24>

08005f6c <_fstat_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	@ (8005f8c <_fstat_r+0x20>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	f7fb fca3 	bl	80018c4 <_fstat>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d102      	bne.n	8005f88 <_fstat_r+0x1c>
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	b103      	cbz	r3, 8005f88 <_fstat_r+0x1c>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000b3c 	.word	0x20000b3c

08005f90 <_isatty_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	@ (8005fac <_isatty_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb fca2 	bl	80018e4 <_isatty>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_isatty_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_isatty_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000b3c 	.word	0x20000b3c

08005fb0 <_sbrk_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d06      	ldr	r5, [pc, #24]	@ (8005fcc <_sbrk_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	f7fb fcaa 	bl	8001914 <_sbrk>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_sbrk_r+0x1a>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_sbrk_r+0x1a>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	20000b3c 	.word	0x20000b3c

08005fd0 <abort>:
 8005fd0:	b508      	push	{r3, lr}
 8005fd2:	2006      	movs	r0, #6
 8005fd4:	f000 f85a 	bl	800608c <raise>
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7fb fc23 	bl	8001824 <_exit>

08005fde <_realloc_r>:
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	4615      	mov	r5, r2
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b921      	cbnz	r1, 8005ff4 <_realloc_r+0x16>
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	4611      	mov	r1, r2
 8005ff0:	f7ff b99a 	b.w	8005328 <_malloc_r>
 8005ff4:	b92a      	cbnz	r2, 8006002 <_realloc_r+0x24>
 8005ff6:	f7ff f923 	bl	8005240 <_free_r>
 8005ffa:	2400      	movs	r4, #0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006002:	f000 f85f 	bl	80060c4 <_malloc_usable_size_r>
 8006006:	4285      	cmp	r5, r0
 8006008:	4606      	mov	r6, r0
 800600a:	d802      	bhi.n	8006012 <_realloc_r+0x34>
 800600c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006010:	d8f4      	bhi.n	8005ffc <_realloc_r+0x1e>
 8006012:	4629      	mov	r1, r5
 8006014:	4640      	mov	r0, r8
 8006016:	f7ff f987 	bl	8005328 <_malloc_r>
 800601a:	4607      	mov	r7, r0
 800601c:	2800      	cmp	r0, #0
 800601e:	d0ec      	beq.n	8005ffa <_realloc_r+0x1c>
 8006020:	42b5      	cmp	r5, r6
 8006022:	462a      	mov	r2, r5
 8006024:	4621      	mov	r1, r4
 8006026:	bf28      	it	cs
 8006028:	4632      	movcs	r2, r6
 800602a:	f7ff f8dc 	bl	80051e6 <memcpy>
 800602e:	4621      	mov	r1, r4
 8006030:	4640      	mov	r0, r8
 8006032:	f7ff f905 	bl	8005240 <_free_r>
 8006036:	463c      	mov	r4, r7
 8006038:	e7e0      	b.n	8005ffc <_realloc_r+0x1e>

0800603a <_raise_r>:
 800603a:	291f      	cmp	r1, #31
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	460c      	mov	r4, r1
 8006042:	d904      	bls.n	800604e <_raise_r+0x14>
 8006044:	2316      	movs	r3, #22
 8006046:	6003      	str	r3, [r0, #0]
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006050:	b112      	cbz	r2, 8006058 <_raise_r+0x1e>
 8006052:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006056:	b94b      	cbnz	r3, 800606c <_raise_r+0x32>
 8006058:	4628      	mov	r0, r5
 800605a:	f000 f831 	bl	80060c0 <_getpid_r>
 800605e:	4622      	mov	r2, r4
 8006060:	4601      	mov	r1, r0
 8006062:	4628      	mov	r0, r5
 8006064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006068:	f000 b818 	b.w	800609c <_kill_r>
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00a      	beq.n	8006086 <_raise_r+0x4c>
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	d103      	bne.n	800607c <_raise_r+0x42>
 8006074:	2316      	movs	r3, #22
 8006076:	6003      	str	r3, [r0, #0]
 8006078:	2001      	movs	r0, #1
 800607a:	e7e7      	b.n	800604c <_raise_r+0x12>
 800607c:	2100      	movs	r1, #0
 800607e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006082:	4620      	mov	r0, r4
 8006084:	4798      	blx	r3
 8006086:	2000      	movs	r0, #0
 8006088:	e7e0      	b.n	800604c <_raise_r+0x12>
	...

0800608c <raise>:
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <raise+0xc>)
 800608e:	4601      	mov	r1, r0
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f7ff bfd2 	b.w	800603a <_raise_r>
 8006096:	bf00      	nop
 8006098:	2000001c 	.word	0x2000001c

0800609c <_kill_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	@ (80060bc <_kill_r+0x20>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	f7fb fbab 	bl	8001804 <_kill>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d102      	bne.n	80060b8 <_kill_r+0x1c>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b103      	cbz	r3, 80060b8 <_kill_r+0x1c>
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	bf00      	nop
 80060bc:	20000b3c 	.word	0x20000b3c

080060c0 <_getpid_r>:
 80060c0:	f7fb bb98 	b.w	80017f4 <_getpid>

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr
