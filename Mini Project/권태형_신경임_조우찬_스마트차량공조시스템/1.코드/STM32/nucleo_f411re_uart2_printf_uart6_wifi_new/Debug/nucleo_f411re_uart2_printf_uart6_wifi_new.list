
nucleo_f411re_uart2_printf_uart6_wifi_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b25c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800b400  0800b400  0000c400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf4  0800bbf4  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbf4  0800bbf4  0000cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbfc  0800bbfc  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbfc  0800bbfc  0000cbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc00  0800bc00  0000cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bc04  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  200001d8  0800bddc  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  0800bddc  0000dd60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131a6  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b72  00000000  00000000  000203ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00022f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e95  00000000  00000000  000241b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019814  00000000  00000000  00025045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001628d  00000000  00000000  0003e859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ede3  00000000  00000000  00054ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f38c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000650c  00000000  00000000  000f390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000f9e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3e4 	.word	0x0800b3e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b3e4 	.word	0x0800b3e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <LCD_init>:
#include "clcd.h"

uint8_t lcdData = 0;
I2C_HandleTypeDef *phLcdI2C;

void LCD_init(I2C_HandleTypeDef *phI2C) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	phLcdI2C = phI2C;
 800101c:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <LCD_init+0x6c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]

	HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	@ 0x32
 8001024:	f001 ff14 	bl	8002e50 <HAL_Delay>
	LCD_cmdMode();
 8001028:	f000 f89a 	bl	8001160 <LCD_cmdMode>
	LCD_writeMode();
 800102c:	f000 f8b8 	bl	80011a0 <LCD_writeMode>
	LCD_sendData(0x30);
 8001030:	2030      	movs	r0, #48	@ 0x30
 8001032:	f000 f849 	bl	80010c8 <LCD_sendData>
	HAL_Delay(5);
 8001036:	2005      	movs	r0, #5
 8001038:	f001 ff0a 	bl	8002e50 <HAL_Delay>
	LCD_sendData(0x30);
 800103c:	2030      	movs	r0, #48	@ 0x30
 800103e:	f000 f843 	bl	80010c8 <LCD_sendData>
	HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f001 ff04 	bl	8002e50 <HAL_Delay>
	LCD_sendData(0x30);
 8001048:	2030      	movs	r0, #48	@ 0x30
 800104a:	f000 f83d 	bl	80010c8 <LCD_sendData>
	LCD_sendData(0x20);
 800104e:	2020      	movs	r0, #32
 8001050:	f000 f83a 	bl	80010c8 <LCD_sendData>
	LCD_sendByte(LCD_4BIT_FUNC_SET);
 8001054:	2028      	movs	r0, #40	@ 0x28
 8001056:	f000 f85f 	bl	8001118 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF);
 800105a:	2008      	movs	r0, #8
 800105c:	f000 f85c 	bl	8001118 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 f859 	bl	8001118 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET);
 8001066:	2006      	movs	r0, #6
 8001068:	f000 f856 	bl	8001118 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 800106c:	200c      	movs	r0, #12
 800106e:	f000 f853 	bl	8001118 <LCD_sendByte>
	LCD_backLightOn();
 8001072:	f000 f865 	bl	8001140 <LCD_backLightOn>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f8 	.word	0x200001f8

08001084 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();			// RS pin Low
 800108e:	f000 f867 	bl	8001160 <LCD_cmdMode>
	LCD_writeMode();		// R/W pin Low
 8001092:	f000 f885 	bl	80011a0 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f83d 	bl	8001118 <LCD_sendByte>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
	LCD_charMode(); 		// RS pin High
 80010b0:	f000 f866 	bl	8001180 <LCD_charMode>
	LCD_writeMode(); 		// R/W pin Low
 80010b4:	f000 f874 	bl	80011a0 <LCD_writeMode>

	LCD_sendByte(data);		// send byte data
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f82c 	bl	8001118 <LCD_sendByte>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LCD_sendData>:
void LCD_sendData(uint8_t data) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	LCD_enableHigh();		// E pin High
 80010d2:	f000 f875 	bl	80011c0 <LCD_enableHigh>
	HAL_Delay(2);			// LCD need delay
 80010d6:	2002      	movs	r0, #2
 80010d8:	f001 feba 	bl	8002e50 <HAL_Delay>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <LCD_sendData+0x4c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	f023 030f 	bic.w	r3, r3, #15
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <LCD_sendData+0x4c>)
 80010fa:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80010fc:	f000 f880 	bl	8001200 <LCD_sendDataToInterface>
	LCD_enableLow();		// E pin Low
 8001100:	f000 f86e 	bl	80011e0 <LCD_enableLow>
	HAL_Delay(2);			// LCD delay
 8001104:	2002      	movs	r0, #2
 8001106:	f001 fea3 	bl	8002e50 <HAL_Delay>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001f4 	.word	0x200001f4

08001118 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send upper data
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ffcf 	bl	80010c8 <LCD_sendData>
	data = data << 4;		// 4bit data shift (move to upper bit)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	71fb      	strb	r3, [r7, #7]
	LCD_sendData(data);		// send lower data
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffc8 	bl	80010c8 <LCD_sendData>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <LCD_backLightOn>:
void LCD_backLightOn() {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_BL);
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <LCD_backLightOn+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b03      	ldr	r3, [pc, #12]	@ (800115c <LCD_backLightOn+0x1c>)
 8001150:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001152:	f000 f855 	bl	8001200 <LCD_sendDataToInterface>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001f4 	.word	0x200001f4

08001160 <LCD_cmdMode>:
void LCD_backLightOff() {
	lcdData &= ~(1 << LCD_BL);
	LCD_sendDataToInterface();
}

void LCD_cmdMode() {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RS); // 0 bit low
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <LCD_cmdMode+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b03      	ldr	r3, [pc, #12]	@ (800117c <LCD_cmdMode+0x1c>)
 8001170:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001172:	f000 f845 	bl	8001200 <LCD_sendDataToInterface>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001f4 	.word	0x200001f4

08001180 <LCD_charMode>:

void LCD_charMode() {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_RS); // 0 bit high
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <LCD_charMode+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b03      	ldr	r3, [pc, #12]	@ (800119c <LCD_charMode+0x1c>)
 8001190:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 8001192:	f000 f835 	bl	8001200 <LCD_sendDataToInterface>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001f4 	.word	0x200001f4

080011a0 <LCD_writeMode>:

void LCD_writeMode() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_RW); // 1 bit low
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <LCD_writeMode+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f023 0302 	bic.w	r3, r3, #2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <LCD_writeMode+0x1c>)
 80011b0:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80011b2:	f000 f825 	bl	8001200 <LCD_sendDataToInterface>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001f4 	.word	0x200001f4

080011c0 <LCD_enableHigh>:

void LCD_enableHigh() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	lcdData |= (1 << LCD_E); // 2 bit high
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <LCD_enableHigh+0x1c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <LCD_enableHigh+0x1c>)
 80011d0:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80011d2:	f000 f815 	bl	8001200 <LCD_sendDataToInterface>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001f4 	.word	0x200001f4

080011e0 <LCD_enableLow>:

void LCD_enableLow() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	lcdData &= ~(1 << LCD_E); // 2 bit low
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <LCD_enableLow+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <LCD_enableLow+0x1c>)
 80011f0:	701a      	strb	r2, [r3, #0]
	LCD_sendDataToInterface();
 80011f2:	f000 f805 	bl	8001200 <LCD_sendDataToInterface>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001f4 	.word	0x200001f4

08001200 <LCD_sendDataToInterface>:


void LCD_sendDataToInterface() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(phLcdI2C, LCD_DEV_ADDR << 1, &lcdData, 1, 100);
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <LCD_sendDataToInterface+0x20>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	2364      	movs	r3, #100	@ 0x64
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <LCD_sendDataToInterface+0x24>)
 8001212:	214e      	movs	r1, #78	@ 0x4e
 8001214:	f002 fed0 	bl	8003fb8 <HAL_I2C_Master_Transmit>
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001f8 	.word	0x200001f8
 8001224:	200001f4 	.word	0x200001f4

08001228 <LCD_writeString>:

void LCD_writeString(char *str) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e009      	b.n	800124a <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff31 	bl	80010a6 <LCD_writeCharData>
	for (int i = 0; str[i]; i++) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ef      	bne.n	8001236 <LCD_writeString+0xe>
	}
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	460a      	mov	r2, r1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = ((0x40 * row) + col);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	019b      	lsls	r3, r3, #6
 8001284:	b2da      	uxtb	r2, r3
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	4413      	add	r3, r2
 800128a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = (0x80 + lcdRegAddr);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	3b80      	subs	r3, #128	@ 0x80
 8001290:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fef5 	bl	8001084 <LCD_writeCmdData>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	603a      	str	r2, [r7, #0]
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	460b      	mov	r3, r1
 80012b0:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 80012b2:	79ba      	ldrb	r2, [r7, #6]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffd1 	bl	8001260 <LCD_gotoXY>
	LCD_writeString(str);
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f7ff ffb2 	bl	8001228 <LCD_writeString>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <DWT_Delay_Init>:
 *      Author: IoT Main
 */

#include "DHT.h"
uint32_t DWT_Delay_Init(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <DWT_Delay_Init+0x58>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <DWT_Delay_Init+0x58>)
 80012d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012da:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <DWT_Delay_Init+0x58>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <DWT_Delay_Init+0x58>)
 80012e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012e6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <DWT_Delay_Init+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001328 <DWT_Delay_Init+0x5c>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <DWT_Delay_Init+0x5c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <DWT_Delay_Init+0x5c>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <DWT_Delay_Init+0x5c>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001306:	bf00      	nop
  __ASM volatile ("NOP");
 8001308:	bf00      	nop
  __ASM volatile ("NOP");
 800130a:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <DWT_Delay_Init+0x5c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 8001314:	2300      	movs	r3, #0
 8001316:	e000      	b.n	800131a <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 8001318:	2301      	movs	r3, #1
  }

}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000edf0 	.word	0xe000edf0
 8001328:	e0001000 	.word	0xe0001000

0800132c <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <DWT_Delay_us+0x40>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800133a:	f003 fdfb 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <DWT_Delay_us+0x44>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001350:	bf00      	nop
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <DWT_Delay_us+0x40>)
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3f8      	bcc.n	8001352 <DWT_Delay_us+0x26>
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e0001000 	.word	0xe0001000
 8001370:	431bde83 	.word	0x431bde83

08001374 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f002 fb0e 	bl	80039c4 <HAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f002 faf2 	bl	80039c4 <HAL_GPIO_Init>
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <DHT11_Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80013ec:	f7ff ff6e 	bl	80012cc <DWT_Delay_Init>
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80013f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <DHT11_Init+0x2c>)
 80013f6:	f7ff ffbd 	bl	8001374 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <DHT11_Init+0x2c>)
 8001402:	f002 fc7b 	bl	8003cfc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140a:	f001 fd21 	bl	8002e50 <HAL_Delay>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020800 	.word	0x40020800

08001418 <DHT11_Start>:

void DHT11_Start (void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800141c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <DHT11_Start+0x50>)
 8001422:	f7ff ffa7 	bl	8001374 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800142c:	480e      	ldr	r0, [pc, #56]	@ (8001468 <DHT11_Start+0x50>)
 800142e:	f002 fc65 	bl	8003cfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001438:	480b      	ldr	r0, [pc, #44]	@ (8001468 <DHT11_Start+0x50>)
 800143a:	f002 fc5f 	bl	8003cfc <HAL_GPIO_WritePin>
	DWT_Delay_us(18000);
 800143e:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001442:	f7ff ff73 	bl	800132c <DWT_Delay_us>
	//delay_us (18000);   // wait for 18ms
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144c:	4806      	ldr	r0, [pc, #24]	@ (8001468 <DHT11_Start+0x50>)
 800144e:	f002 fc55 	bl	8003cfc <HAL_GPIO_WritePin>
	DWT_Delay_us(20);
 8001452:	2014      	movs	r0, #20
 8001454:	f7ff ff6a 	bl	800132c <DWT_Delay_us>
	//delay_us (20);   // wait for 20us
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001458:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <DHT11_Start+0x50>)
 800145e:	f7ff ffa7 	bl	80013b0 <Set_Pin_Input>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40020800 	.word	0x40020800

0800146c <DHT11_Stop>:

void DHT11_Stop (void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001470:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <DHT11_Stop+0x20>)
 8001476:	f7ff ff7d 	bl	8001374 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DHT11_Stop+0x20>)
 8001482:	f002 fc3b 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40020800 	.word	0x40020800

08001490 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]

	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800149a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149e:	4812      	ldr	r0, [pc, #72]	@ (80014e8 <DHT11_Check_Response+0x58>)
 80014a0:	f002 fc14 	bl	8003ccc <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <DHT11_Check_Response+0x3a>
	{
		DWT_Delay_us(80);
 80014aa:	2050      	movs	r0, #80	@ 0x50
 80014ac:	f7ff ff3e 	bl	800132c <DWT_Delay_us>
		//delay_us (80);
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80014b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <DHT11_Check_Response+0x58>)
 80014b6:	f002 fc09 	bl	8003ccc <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <DHT11_Check_Response+0x36>
 80014c0:	2301      	movs	r3, #1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	e001      	b.n	80014ca <DHT11_Check_Response+0x3a>
		else Response = -1; // 255
 80014c6:	23ff      	movs	r3, #255	@ 0xff
 80014c8:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));
 80014ca:	bf00      	nop
 80014cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <DHT11_Check_Response+0x58>)
 80014d2:	f002 fbfb 	bl	8003ccc <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f7      	bne.n	80014cc <DHT11_Check_Response+0x3c>

	return Response;
 80014dc:	79fb      	ldrb	r3, [r7, #7]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020800 	.word	0x40020800

080014ec <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	71bb      	strb	r3, [r7, #6]
 80014f6:	e03a      	b.n	800156e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80014f8:	bf00      	nop
 80014fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014fe:	4820      	ldr	r0, [pc, #128]	@ (8001580 <DHT11_Read+0x94>)
 8001500:	f002 fbe4 	bl	8003ccc <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f7      	beq.n	80014fa <DHT11_Read+0xe>
		DWT_Delay_us(40);
 800150a:	2028      	movs	r0, #40	@ 0x28
 800150c:	f7ff ff0e 	bl	800132c <DWT_Delay_us>
		//delay_us (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001510:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001514:	481a      	ldr	r0, [pc, #104]	@ (8001580 <DHT11_Read+0x94>)
 8001516:	f002 fbd9 	bl	8003ccc <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10e      	bne.n	800153e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2201      	movs	r2, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	b25a      	sxtb	r2, r3
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	4013      	ands	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	e00b      	b.n	8001556 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	f1c3 0307 	rsb	r3, r3, #7
 8001544:	2201      	movs	r2, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	b25a      	sxtb	r2, r3
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4313      	orrs	r3, r2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001556:	bf00      	nop
 8001558:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800155c:	4808      	ldr	r0, [pc, #32]	@ (8001580 <DHT11_Read+0x94>)
 800155e:	f002 fbb5 	bl	8003ccc <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f7      	bne.n	8001558 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	3301      	adds	r3, #1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	2b07      	cmp	r3, #7
 8001572:	d9c1      	bls.n	80014f8 <DHT11_Read+0xc>
	}
	return i;
 8001574:	79fb      	ldrb	r3, [r7, #7]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020800 	.word	0x40020800

08001584 <DHT11_readData>:

DHT11_TypeDef DHT11_readData() // 온습도에서 읽을 데이터들
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	DHT11_TypeDef dht11;
	DHT11_Start();
 800158c:	f7ff ff44 	bl	8001418 <DHT11_Start>
	if ((dht11.status = DHT11_Check_Response()) < 0) return dht11;
 8001590:	f7ff ff7e 	bl	8001490 <DHT11_Check_Response>
 8001594:	4603      	mov	r3, r0
 8001596:	737b      	strb	r3, [r7, #13]
	dht11.rh_byte1 = DHT11_Read ();
 8001598:	f7ff ffa8 	bl	80014ec <DHT11_Read>
 800159c:	4603      	mov	r3, r0
 800159e:	723b      	strb	r3, [r7, #8]
	dht11.rh_byte2 = DHT11_Read ();
 80015a0:	f7ff ffa4 	bl	80014ec <DHT11_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	727b      	strb	r3, [r7, #9]
	dht11.temp_byte1 = DHT11_Read ();
 80015a8:	f7ff ffa0 	bl	80014ec <DHT11_Read>
 80015ac:	4603      	mov	r3, r0
 80015ae:	72bb      	strb	r3, [r7, #10]
	dht11.temp_byte2 = DHT11_Read ();
 80015b0:	f7ff ff9c 	bl	80014ec <DHT11_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	72fb      	strb	r3, [r7, #11]
	dht11.checksum = DHT11_Read();
 80015b8:	f7ff ff98 	bl	80014ec <DHT11_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	733b      	strb	r3, [r7, #12]
	DHT11_Stop();
 80015c0:	f7ff ff54 	bl	800146c <DHT11_Stop>
	return dht11;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	6010      	str	r0, [r2, #0]
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	8093      	strh	r3, [r2, #4]
}
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	2100      	movs	r1, #0
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f007 f97c 	bl	80088f4 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80015fc:	f240 4202 	movw	r2, #1026	@ 0x402
 8001600:	2100      	movs	r1, #0
 8001602:	4826      	ldr	r0, [pc, #152]	@ (800169c <esp_at_command+0xc0>)
 8001604:	f007 f976 	bl	80088f4 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7fe fe49 	bl	80002a0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	2364      	movs	r3, #100	@ 0x64
 8001614:	68f9      	ldr	r1, [r7, #12]
 8001616:	4822      	ldr	r0, [pc, #136]	@ (80016a0 <esp_at_command+0xc4>)
 8001618:	f004 fcc8 	bl	8005fac <HAL_UART_Transmit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d032      	beq.n	8001688 <esp_at_command+0xac>
        return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e035      	b.n	8001694 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <esp_at_command+0xc0>)
 800162a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800162e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001632:	d302      	bcc.n	800163a <esp_at_command+0x5e>
            return -2;
 8001634:	f06f 0301 	mvn.w	r3, #1
 8001638:	e02c      	b.n	8001694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 800163a:	491a      	ldr	r1, [pc, #104]	@ (80016a4 <esp_at_command+0xc8>)
 800163c:	4817      	ldr	r0, [pc, #92]	@ (800169c <esp_at_command+0xc0>)
 800163e:	f007 f9dd 	bl	80089fc <strstr>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <esp_at_command+0x72>
            return -3;
 8001648:	f06f 0302 	mvn.w	r3, #2
 800164c:	e022      	b.n	8001694 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 800164e:	4916      	ldr	r1, [pc, #88]	@ (80016a8 <esp_at_command+0xcc>)
 8001650:	4812      	ldr	r0, [pc, #72]	@ (800169c <esp_at_command+0xc0>)
 8001652:	f007 f9d3 	bl	80089fc <strstr>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00e      	beq.n	800167a <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <esp_at_command+0xc0>)
 800165e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001662:	461a      	mov	r2, r3
 8001664:	490d      	ldr	r1, [pc, #52]	@ (800169c <esp_at_command+0xc0>)
 8001666:	68b8      	ldr	r0, [r7, #8]
 8001668:	f007 fa5d 	bl	8008b26 <memcpy>
            *length = cb_data.length;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <esp_at_command+0xc0>)
 800166e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	801a      	strh	r2, [r3, #0]
            return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e00c      	b.n	8001694 <esp_at_command+0xb8>
        }
        time_out -= 10;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	3b0a      	subs	r3, #10
 800167e:	b29b      	uxth	r3, r3
 8001680:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8001682:	200a      	movs	r0, #10
 8001684:	f001 fbe4 	bl	8002e50 <HAL_Delay>
    while(time_out > 0)
 8001688:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dccb      	bgt.n	8001628 <esp_at_command+0x4c>
    }
    return -4;
 8001690:	f06f 0303 	mvn.w	r3, #3
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000644 	.word	0x20000644
 80016a0:	20000b78 	.word	0x20000b78
 80016a4:	0800b400 	.word	0x0800b400
 80016a8:	0800b408 	.word	0x0800b408

080016ac <esp_reset>:

static int esp_reset(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016bc:	4909      	ldr	r1, [pc, #36]	@ (80016e4 <esp_reset+0x38>)
 80016be:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <esp_reset+0x3c>)
 80016c0:	f7ff ff8c 	bl	80015dc <esp_at_command>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <esp_reset+0x24>
    {
    	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e004      	b.n	80016da <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80016d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016d4:	f001 fbbc 	bl	8002e50 <HAL_Delay>
    return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000020c 	.word	0x2000020c
 80016e8:	0800b40c 	.word	0x0800b40c

080016ec <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80016fa:	f107 020a 	add.w	r2, r7, #10
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	492d      	ldr	r1, [pc, #180]	@ (80017b8 <request_ip_addr+0xcc>)
 8001704:	482d      	ldr	r0, [pc, #180]	@ (80017bc <request_ip_addr+0xd0>)
 8001706:	f7ff ff69 	bl	80015dc <esp_at_command>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001710:	482b      	ldr	r0, [pc, #172]	@ (80017c0 <request_ip_addr+0xd4>)
 8001712:	f006 ffef 	bl	80086f4 <puts>
 8001716:	e049      	b.n	80017ac <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8001718:	492a      	ldr	r1, [pc, #168]	@ (80017c4 <request_ip_addr+0xd8>)
 800171a:	4827      	ldr	r0, [pc, #156]	@ (80017b8 <request_ip_addr+0xcc>)
 800171c:	f007 f912 	bl	8008944 <strtok>
 8001720:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03e      	beq.n	80017a6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	e009      	b.n	8001742 <request_ip_addr+0x56>
                printf("%c", response[i]);
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <request_ip_addr+0xcc>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f006 ff7e 	bl	8008638 <putchar>
            for(int i = 0 ; i < length ; i++)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	3301      	adds	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	897b      	ldrh	r3, [r7, #10]
 8001744:	461a      	mov	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4293      	cmp	r3, r2
 800174a:	dbf0      	blt.n	800172e <request_ip_addr+0x42>
        }

        while(line != NULL)
 800174c:	e02b      	b.n	80017a6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800174e:	491e      	ldr	r1, [pc, #120]	@ (80017c8 <request_ip_addr+0xdc>)
 8001750:	6978      	ldr	r0, [r7, #20]
 8001752:	f007 f953 	bl	80089fc <strstr>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01f      	beq.n	800179c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800175c:	491b      	ldr	r1, [pc, #108]	@ (80017cc <request_ip_addr+0xe0>)
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f007 f8f0 	bl	8008944 <strtok>
                ip = strtok(NULL, "\"");
 8001764:	4919      	ldr	r1, [pc, #100]	@ (80017cc <request_ip_addr+0xe0>)
 8001766:	2000      	movs	r0, #0
 8001768:	f007 f8ec 	bl	8008944 <strtok>
 800176c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800176e:	4918      	ldr	r1, [pc, #96]	@ (80017d0 <request_ip_addr+0xe4>)
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7fe fd35 	bl	80001e0 <strcmp>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00f      	beq.n	800179c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800177c:	2210      	movs	r2, #16
 800177e:	2100      	movs	r1, #0
 8001780:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <request_ip_addr+0xe8>)
 8001782:	f007 f8b7 	bl	80088f4 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7fe fd8a 	bl	80002a0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <request_ip_addr+0xe8>)
 8001794:	f007 f9c7 	bl	8008b26 <memcpy>
                    return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e009      	b.n	80017b0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800179c:	4909      	ldr	r1, [pc, #36]	@ (80017c4 <request_ip_addr+0xd8>)
 800179e:	2000      	movs	r0, #0
 80017a0:	f007 f8d0 	bl	8008944 <strtok>
 80017a4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1d0      	bne.n	800174e <request_ip_addr+0x62>
        }
    }
    return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2000020c 	.word	0x2000020c
 80017bc:	0800b454 	.word	0x0800b454
 80017c0:	0800b460 	.word	0x0800b460
 80017c4:	0800b448 	.word	0x0800b448
 80017c8:	0800b480 	.word	0x0800b480
 80017cc:	0800b450 	.word	0x0800b450
 80017d0:	0800b418 	.word	0x0800b418
 80017d4:	200001fc 	.word	0x200001fc

080017d8 <esp_client_conn>:
int esp_client_conn()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b092      	sub	sp, #72	@ 0x48
 80017dc:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	223c      	movs	r2, #60	@ 0x3c
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f007 f882 	bl	80088f4 <memset>
  uint16_t length = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80017f4:	f107 0008 	add.w	r0, r7, #8
 80017f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <esp_client_conn+0x4c>)
 80017fe:	490a      	ldr	r1, [pc, #40]	@ (8001828 <esp_client_conn+0x50>)
 8001800:	f006 ff80 	bl	8008704 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001804:	1dba      	adds	r2, r7, #6
 8001806:	f107 0008 	add.w	r0, r7, #8
 800180a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180e:	4907      	ldr	r1, [pc, #28]	@ (800182c <esp_client_conn+0x54>)
 8001810:	f7ff fee4 	bl	80015dc <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001814:	4806      	ldr	r0, [pc, #24]	@ (8001830 <esp_client_conn+0x58>)
 8001816:	f000 f90b 	bl	8001a30 <esp_send_data>
	return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3748      	adds	r7, #72	@ 0x48
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0800b48c 	.word	0x0800b48c
 8001828:	0800b49c 	.word	0x0800b49c
 800182c:	2000020c 	.word	0x2000020c
 8001830:	0800b4b8 	.word	0x0800b4b8

08001834 <esp_get_status>:
int esp_get_status()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 800183e:	1dba      	adds	r2, r7, #6
 8001840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001844:	4909      	ldr	r1, [pc, #36]	@ (800186c <esp_get_status+0x38>)
 8001846:	480a      	ldr	r0, [pc, #40]	@ (8001870 <esp_get_status+0x3c>)
 8001848:	f7ff fec8 	bl	80015dc <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 800184c:	4909      	ldr	r1, [pc, #36]	@ (8001874 <esp_get_status+0x40>)
 800184e:	4807      	ldr	r0, [pc, #28]	@ (800186c <esp_get_status+0x38>)
 8001850:	f007 f8d4 	bl	80089fc <strstr>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <esp_get_status+0x2a>
    {
    	return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e001      	b.n	8001862 <esp_get_status+0x2e>
    }
	return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000020c 	.word	0x2000020c
 8001870:	0800b4cc 	.word	0x0800b4cc
 8001874:	0800b4dc 	.word	0x0800b4dc

08001878 <drv_esp_init>:
int drv_esp_init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 800187c:	2210      	movs	r2, #16
 800187e:	2100      	movs	r1, #0
 8001880:	4806      	ldr	r0, [pc, #24]	@ (800189c <drv_esp_init+0x24>)
 8001882:	f007 f837 	bl	80088f4 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8001886:	2201      	movs	r2, #1
 8001888:	4905      	ldr	r1, [pc, #20]	@ (80018a0 <drv_esp_init+0x28>)
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <drv_esp_init+0x2c>)
 800188c:	f004 fc19 	bl	80060c2 <HAL_UART_Receive_IT>

    return esp_reset();
 8001890:	f7ff ff0c 	bl	80016ac <esp_reset>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001fc 	.word	0x200001fc
 80018a0:	20000643 	.word	0x20000643
 80018a4:	20000b78 	.word	0x20000b78

080018a8 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b094      	sub	sp, #80	@ 0x50
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	223c      	movs	r2, #60	@ 0x3c
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 f815 	bl	80088f4 <memset>
  if(ssid == NULL || passwd == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <ap_conn_func+0x2e>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80018d6:	4817      	ldr	r0, [pc, #92]	@ (8001934 <ap_conn_func+0x8c>)
 80018d8:	f006 ff0c 	bl	80086f4 <puts>
 80018dc:	e026      	b.n	800192c <ap_conn_func+0x84>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 80018de:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	4914      	ldr	r1, [pc, #80]	@ (8001938 <ap_conn_func+0x90>)
 80018e8:	4814      	ldr	r0, [pc, #80]	@ (800193c <ap_conn_func+0x94>)
 80018ea:	f7ff fe77 	bl	80015dc <esp_at_command>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <ap_conn_func+0x52>
      printf("Station mode fail\r\n");
 80018f4:	4812      	ldr	r0, [pc, #72]	@ (8001940 <ap_conn_func+0x98>)
 80018f6:	f006 fefd 	bl	80086f4 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80018fa:	f107 000c 	add.w	r0, r7, #12
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4910      	ldr	r1, [pc, #64]	@ (8001944 <ap_conn_func+0x9c>)
 8001904:	f006 fefe 	bl	8008704 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001908:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800190c:	f107 000c 	add.w	r0, r7, #12
 8001910:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001914:	4908      	ldr	r1, [pc, #32]	@ (8001938 <ap_conn_func+0x90>)
 8001916:	f7ff fe61 	bl	80015dc <esp_at_command>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <ap_conn_func+0x84>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <ap_conn_func+0xa0>)
 8001928:	f006 fe74 	bl	8008614 <iprintf>
}
 800192c:	3750      	adds	r7, #80	@ 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	0800b540 	.word	0x0800b540
 8001938:	2000020c 	.word	0x2000020c
 800193c:	0800b56c 	.word	0x0800b56c
 8001940:	0800b57c 	.word	0x0800b57c
 8001944:	0800b590 	.word	0x0800b590
 8001948:	0800b5a8 	.word	0x0800b5a8

0800194c <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <HAL_UART_RxCpltCallback+0x9c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d117      	bne.n	800198e <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800195e:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <HAL_UART_RxCpltCallback+0xa0>)
 8001960:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001968:	d20c      	bcs.n	8001984 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800196a:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <HAL_UART_RxCpltCallback+0xa0>)
 800196c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	b291      	uxth	r1, r2
 8001974:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_UART_RxCpltCallback+0xa0>)
 8001976:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 800197a:	461a      	mov	r2, r3
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_UART_RxCpltCallback+0xa4>)
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_UART_RxCpltCallback+0xa0>)
 8001982:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8001984:	2201      	movs	r2, #1
 8001986:	491a      	ldr	r1, [pc, #104]	@ (80019f0 <HAL_UART_RxCpltCallback+0xa4>)
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f004 fb9a 	bl	80060c2 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_UART_RxCpltCallback+0xa8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d122      	bne.n	80019de <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_UART_RxCpltCallback+0xb0>)
 800199e:	7811      	ldrb	r1, [r2, #0]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_UART_RxCpltCallback+0xb4>)
 80019a2:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <HAL_UART_RxCpltCallback+0xb4>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b0d      	cmp	r3, #13
 80019b0:	d10b      	bne.n	80019ca <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <HAL_UART_RxCpltCallback+0xb4>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_UART_RxCpltCallback+0xb8>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e004      	b.n	80019d4 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <HAL_UART_RxCpltCallback+0xac>)
 80019d2:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	4909      	ldr	r1, [pc, #36]	@ (80019fc <HAL_UART_RxCpltCallback+0xb0>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f004 fb72 	bl	80060c2 <HAL_UART_Receive_IT>
    }
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40011400 	.word	0x40011400
 80019ec:	20000644 	.word	0x20000644
 80019f0:	20000643 	.word	0x20000643
 80019f4:	40004400 	.word	0x40004400
 80019f8:	20000a48 	.word	0x20000a48
 80019fc:	20000642 	.word	0x20000642
 8001a00:	20000610 	.word	0x20000610
 8001a04:	2000060c 	.word	0x2000060c

08001a08 <AiotClient_Init>:


void AiotClient_Init()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8001a0c:	4906      	ldr	r1, [pc, #24]	@ (8001a28 <AiotClient_Init+0x20>)
 8001a0e:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <AiotClient_Init+0x24>)
 8001a10:	f7ff ff4a 	bl	80018a8 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fe69 	bl	80016ec <request_ip_addr>
	esp_client_conn();
 8001a1a:	f7ff fedd 	bl	80017d8 <esp_client_conn>
	esp_get_status();
 8001a1e:	f7ff ff09 	bl	8001834 <esp_get_status>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	0800b608 	.word	0x0800b608
 8001a2c:	0800b614 	.word	0x0800b614

08001a30 <esp_send_data>:

void esp_send_data(char *data)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	@ 0x50
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	223c      	movs	r2, #60	@ 0x3c
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 ff55 	bl	80088f4 <memset>
	uint16_t length = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fc26 	bl	80002a0 <strlen>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	490e      	ldr	r1, [pc, #56]	@ (8001a94 <esp_send_data+0x64>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f006 fe51 	bl	8008704 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8001a62:	f107 020e 	add.w	r2, r7, #14
 8001a66:	f107 0010 	add.w	r0, r7, #16
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	490a      	ldr	r1, [pc, #40]	@ (8001a98 <esp_send_data+0x68>)
 8001a70:	f7ff fdb4 	bl	80015dc <esp_at_command>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <esp_send_data+0x5a>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001a7a:	f107 020e 	add.w	r2, r7, #14
 8001a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a82:	4905      	ldr	r1, [pc, #20]	@ (8001a98 <esp_send_data+0x68>)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fda9 	bl	80015dc <esp_at_command>
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3750      	adds	r7, #80	@ 0x50
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0800b61c 	.word	0x0800b61c
 8001a98:	2000020c 	.word	0x2000020c

08001a9c <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4903      	ldr	r1, [pc, #12]	@ (8001ab0 <drv_uart_init+0x14>)
 8001aa4:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <drv_uart_init+0x18>)
 8001aa6:	f004 fb0c 	bl	80060c2 <HAL_UART_Receive_IT>
    return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000642 	.word	0x20000642
 8001ab4:	20000b30 	.word	0x20000b30

08001ab8 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001ac0:	1d39      	adds	r1, r7, #4
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <__io_putchar+0x2c>)
 8001ac8:	f004 fa70 	bl	8005fac <HAL_UART_Transmit>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <__io_putchar+0x1e>
        return ch;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	e001      	b.n	8001ada <__io_putchar+0x22>
    return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000b30 	.word	0x20000b30

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b0c5      	sub	sp, #276	@ 0x114
 8001aec:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	Auto = 0;
 8001aee:	4bae      	ldr	r3, [pc, #696]	@ (8001da8 <main+0x2c0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
	int ret = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	int pulse = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	int temp_pulse = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f001 f931 	bl	8002d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 fa35 	bl	8001f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f000 fc03 	bl	8002318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b12:	f000 fbad 	bl	8002270 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001b16:	f000 fbd5 	bl	80022c4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001b1a:	f000 fb19 	bl	8002150 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b1e:	f000 fae9 	bl	80020f4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b22:	f000 fa93 	bl	800204c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001b26:	48a1      	ldr	r0, [pc, #644]	@ (8001dac <main+0x2c4>)
 8001b28:	f006 fde4 	bl	80086f4 <puts>
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	49a0      	ldr	r1, [pc, #640]	@ (8001db0 <main+0x2c8>)
 8001b30:	48a0      	ldr	r0, [pc, #640]	@ (8001db4 <main+0x2cc>)
 8001b32:	f004 fac6 	bl	80060c2 <HAL_UART_Receive_IT>
  DHT11_Init();
 8001b36:	f7ff fc57 	bl	80013e8 <DHT11_Init>
  LCD_init(&hi2c1);
 8001b3a:	489f      	ldr	r0, [pc, #636]	@ (8001db8 <main+0x2d0>)
 8001b3c:	f7ff fa6a 	bl	8001014 <LCD_init>
  DHT11_TypeDef dht11Data = DHT11_readData();;
 8001b40:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fd1d 	bl	8001584 <DHT11_readData>
  char buff[200];

  LCD_writeStringXY(0, 0, "hello lcd");
 8001b4a:	4a9c      	ldr	r2, [pc, #624]	@ (8001dbc <main+0x2d4>)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fba7 	bl	80012a2 <LCD_writeStringXY>
  ret |= drv_uart_init();
 8001b54:	f7ff ffa2 	bl	8001a9c <drv_uart_init>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  ret |= drv_esp_init();
 8001b64:	f7ff fe88 	bl	8001878 <drv_esp_init>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if(ret != 0)
 8001b74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <main+0x9e>
  {
	  printf("Esp response error\r\n");
 8001b7c:	4890      	ldr	r0, [pc, #576]	@ (8001dc0 <main+0x2d8>)
 8001b7e:	f006 fdb9 	bl	80086f4 <puts>
	  Error_Handler();
 8001b82:	f000 fdd9 	bl	8002738 <Error_Handler>
  }

  AiotClient_Init();
 8001b86:	f7ff ff3f 	bl	8001a08 <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001b8a:	488e      	ldr	r0, [pc, #568]	@ (8001dc4 <main+0x2dc>)
 8001b8c:	f003 fa56 	bl	800503c <HAL_TIM_Base_Start_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <main+0xb2>
  {
	  Error_Handler();
 8001b96:	f000 fdcf 	bl	8002738 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4889      	ldr	r0, [pc, #548]	@ (8001dc4 <main+0x2dc>)
 8001b9e:	f003 fb09 	bl	80051b4 <HAL_TIM_PWM_Start>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <main+0xc4>
  {
	  Error_Handler();
 8001ba8:	f000 fdc6 	bl	8002738 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001bac:	2104      	movs	r1, #4
 8001bae:	4885      	ldr	r0, [pc, #532]	@ (8001dc4 <main+0x2dc>)
 8001bb0:	f003 fb00 	bl	80051b4 <HAL_TIM_PWM_Start>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <main+0xd6>
    {
  	  Error_Handler();
 8001bba:	f000 fdbd 	bl	8002738 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001bbe:	4982      	ldr	r1, [pc, #520]	@ (8001dc8 <main+0x2e0>)
 8001bc0:	4882      	ldr	r0, [pc, #520]	@ (8001dcc <main+0x2e4>)
 8001bc2:	f006 ff1b 	bl	80089fc <strstr>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01d      	beq.n	8001c08 <main+0x120>
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	@ (8001dcc <main+0x2e4>)
 8001bce:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	4a7d      	ldr	r2, [pc, #500]	@ (8001dcc <main+0x2e4>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	2b0a      	cmp	r3, #10
 8001bda:	d115      	bne.n	8001c08 <main+0x120>
		{
			//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8001bdc:	215b      	movs	r1, #91	@ 0x5b
 8001bde:	487b      	ldr	r0, [pc, #492]	@ (8001dcc <main+0x2e4>)
 8001be0:	f006 fe90 	bl	8008904 <strchr>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4879      	ldr	r0, [pc, #484]	@ (8001dd0 <main+0x2e8>)
 8001bea:	f006 ff94 	bl	8008b16 <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4875      	ldr	r0, [pc, #468]	@ (8001dcc <main+0x2e4>)
 8001bf6:	f006 fe7d 	bl	80088f4 <memset>
			cb_data.length = 0;
 8001bfa:	4b74      	ldr	r3, [pc, #464]	@ (8001dcc <main+0x2e4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8001c02:	4873      	ldr	r0, [pc, #460]	@ (8001dd0 <main+0x2e8>)
 8001c04:	f000 fc30 	bl	8002468 <esp_event>
		}
		if(rx2Flag)
 8001c08:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <main+0x2ec>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <main+0x138>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8001c12:	4971      	ldr	r1, [pc, #452]	@ (8001dd8 <main+0x2f0>)
 8001c14:	4871      	ldr	r0, [pc, #452]	@ (8001ddc <main+0x2f4>)
 8001c16:	f006 fcfd 	bl	8008614 <iprintf>
			rx2Flag =0;
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <main+0x2ec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
		}
		if( dust < 5)
 8001c20:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001c24:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d50f      	bpl.n	8001c52 <main+0x16a>
		{
		    HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2108      	movs	r1, #8
 8001c36:	486a      	ldr	r0, [pc, #424]	@ (8001de0 <main+0x2f8>)
 8001c38:	f002 f860 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4867      	ldr	r0, [pc, #412]	@ (8001de0 <main+0x2f8>)
 8001c42:	f002 f85b 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4865      	ldr	r0, [pc, #404]	@ (8001de0 <main+0x2f8>)
 8001c4c:	f002 f856 	bl	8003cfc <HAL_GPIO_WritePin>
 8001c50:	e030      	b.n	8001cb4 <main+0x1cc>
		}
		else if (5 <= dust && dust< 10)
 8001c52:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001c56:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	db18      	blt.n	8001c96 <main+0x1ae>
 8001c64:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8001c68:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c74:	d50f      	bpl.n	8001c96 <main+0x1ae>
		{
			HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4859      	ldr	r0, [pc, #356]	@ (8001de0 <main+0x2f8>)
 8001c7c:	f002 f83e 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2108      	movs	r1, #8
 8001c84:	4856      	ldr	r0, [pc, #344]	@ (8001de0 <main+0x2f8>)
 8001c86:	f002 f839 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4854      	ldr	r0, [pc, #336]	@ (8001de0 <main+0x2f8>)
 8001c90:	f002 f834 	bl	8003cfc <HAL_GPIO_WritePin>
 8001c94:	e00e      	b.n	8001cb4 <main+0x1cc>
		}
		else
		{
			HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_SET);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4851      	ldr	r0, [pc, #324]	@ (8001de0 <main+0x2f8>)
 8001c9c:	f002 f82e 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	484e      	ldr	r0, [pc, #312]	@ (8001de0 <main+0x2f8>)
 8001ca6:	f002 f829 	bl	8003cfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2108      	movs	r1, #8
 8001cae:	484c      	ldr	r0, [pc, #304]	@ (8001de0 <main+0x2f8>)
 8001cb0:	f002 f824 	bl	8003cfc <HAL_GPIO_WritePin>
		}
		if(Auto == 1)
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <main+0x2c0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f040 8096 	bne.w	8001dec <main+0x304>
		{
			if( dht11Data.rh_byte1 < 30)
 8001cc0:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001cc4:	2b1d      	cmp	r3, #29
 8001cc6:	d803      	bhi.n	8001cd0 <main+0x1e8>
				{
					pulse = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001cce:	e010      	b.n	8001cf2 <main+0x20a>
				}
			else if (30 <= dht11Data.rh_byte1 && dht11Data.rh_byte1< 60)
 8001cd0:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001cd4:	2b1d      	cmp	r3, #29
 8001cd6:	d908      	bls.n	8001cea <main+0x202>
 8001cd8:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001cdc:	2b3b      	cmp	r3, #59	@ 0x3b
 8001cde:	d804      	bhi.n	8001cea <main+0x202>
				{
					pulse = 500;
 8001ce0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ce4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ce8:	e003      	b.n	8001cf2 <main+0x20a>
				}
			else
				{
					pulse = 1000;
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
				}
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, (pulse-1)<0?0:pulse-1 );
 8001cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	bfb8      	it	lt
 8001cfa:	2301      	movlt	r3, #1
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <main+0x2dc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	635a      	str	r2, [r3, #52]	@ 0x34

			sprintf(char_temp,"%d.%d",dht11Data.temp_byte1,dht11Data.temp_byte2);
 8001d04:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001d0e:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001d12:	4934      	ldr	r1, [pc, #208]	@ (8001de4 <main+0x2fc>)
 8001d14:	f006 fcf6 	bl	8008704 <siprintf>
			temp = atof(char_temp);
 8001d18:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 f94b 	bl	8006fb8 <atof>
 8001d22:	ec53 2b10 	vmov	r2, r3, d0
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff75 	bl	8000c18 <__aeabi_d2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			if( temp < 26.5)
 8001d34:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001d38:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001de8 <main+0x300>
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d503      	bpl.n	8001d4e <main+0x266>
				{
					temp_pulse = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001d4c:	e01d      	b.n	8001d8a <main+0x2a2>
				}
			else if (26.5 <= temp && temp < 27.3)
 8001d4e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001d52:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001de8 <main+0x300>
 8001d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	db10      	blt.n	8001d82 <main+0x29a>
 8001d60:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d64:	f7fe fc08 	bl	8000578 <__aeabi_f2d>
 8001d68:	a30d      	add	r3, pc, #52	@ (adr r3, 8001da0 <main+0x2b8>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fecd 	bl	8000b0c <__aeabi_dcmplt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <main+0x29a>
				{
					temp_pulse = 500;
 8001d78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001d80:	e003      	b.n	8001d8a <main+0x2a2>
				}
			else
				{
					temp_pulse = 1000;
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
				}
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, (temp_pulse-1)<0?0:temp_pulse-1 );
 8001d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	bfb8      	it	lt
 8001d92:	2301      	movlt	r3, #1
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <main+0x2dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d9c:	e043      	b.n	8001e26 <main+0x33e>
 8001d9e:	bf00      	nop
 8001da0:	cccccccd 	.word	0xcccccccd
 8001da4:	403b4ccc 	.word	0x403b4ccc
 8001da8:	20000bc1 	.word	0x20000bc1
 8001dac:	0800b62c 	.word	0x0800b62c
 8001db0:	20000bc0 	.word	0x20000bc0
 8001db4:	20000b30 	.word	0x20000b30
 8001db8:	20000a94 	.word	0x20000a94
 8001dbc:	0800b644 	.word	0x0800b644
 8001dc0:	0800b650 	.word	0x0800b650
 8001dc4:	20000ae8 	.word	0x20000ae8
 8001dc8:	0800b664 	.word	0x0800b664
 8001dcc:	20000644 	.word	0x20000644
 8001dd0:	20000bc8 	.word	0x20000bc8
 8001dd4:	2000060c 	.word	0x2000060c
 8001dd8:	20000610 	.word	0x20000610
 8001ddc:	0800b66c 	.word	0x0800b66c
 8001de0:	40020800 	.word	0x40020800
 8001de4:	0800b67c 	.word	0x0800b67c
 8001de8:	41d40000 	.word	0x41d40000
		}
		else if (Auto == 0)
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <main+0x468>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d117      	bne.n	8001e26 <main+0x33e>
		{
			temp_pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
			pulse = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, (pulse-1)<0?0:pulse-1 );
 8001e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	bfb8      	it	lt
 8001e0a:	2301      	movlt	r3, #1
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	4b51      	ldr	r3, [pc, #324]	@ (8001f54 <main+0x46c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, (temp_pulse-1)<0?0:temp_pulse-1 );
 8001e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	bfb8      	it	lt
 8001e1c:	2301      	movlt	r3, #1
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <main+0x46c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	639a      	str	r2, [r3, #56]	@ 0x38

		}

		if(tim3Flag1Sec)	//1초에 한번
 8001e26:	4b4c      	ldr	r3, [pc, #304]	@ (8001f58 <main+0x470>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f43f aec7 	beq.w	8001bbe <main+0xd6>
		{
			dht11Data = DHT11_readData();
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fba6 	bl	8001584 <DHT11_readData>
 8001e38:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001e3c:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001e40:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001e44:	6810      	ldr	r0, [r2, #0]
 8001e46:	6018      	str	r0, [r3, #0]
 8001e48:	8892      	ldrh	r2, [r2, #4]
 8001e4a:	809a      	strh	r2, [r3, #4]
			tim3Flag1Sec = 0;
 8001e4c:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <main+0x470>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
			sprintf(buff,"h: %d%% t: %d.%d'C", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2);
 8001e52:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001e56:	461a      	mov	r2, r3
 8001e58:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001e62:	f107 0008 	add.w	r0, r7, #8
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	493c      	ldr	r1, [pc, #240]	@ (8001f5c <main+0x474>)
 8001e6c:	f006 fc4a 	bl	8008704 <siprintf>
			LCD_writeStringXY(1, 0, buff);
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	461a      	mov	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fa12 	bl	80012a2 <LCD_writeStringXY>
			if(!(tim3Sec%5))
 8001e7e:	4b38      	ldr	r3, [pc, #224]	@ (8001f60 <main+0x478>)
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <main+0x47c>)
 8001e84:	fba3 2301 	umull	r2, r3, r3, r1
 8001e88:	089a      	lsrs	r2, r3, #2
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	1aca      	subs	r2, r1, r3
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d125      	bne.n	8001ee2 <main+0x3fa>
			{
				Start_DustSensor_LED();    // LED 켜기
 8001e96:	f000 fbb9 	bl	800260c <Start_DustSensor_LED>
				HAL_Delay(1);              // 안정화 시간
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 ffd8 	bl	8002e50 <HAL_Delay>
				dust = Read_DustSensor();  // 미세먼지 값 읽기
 8001ea0:	f000 fbce 	bl	8002640 <Read_DustSensor>
 8001ea4:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
				Stop_DustSensor_LED();     // LED 끄기
 8001ea8:	f000 fbbe 	bl	8002628 <Stop_DustSensor_LED>
				printf("Dust Density: %.2f ug/m^3\n", dust);
 8001eac:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001eb0:	f7fe fb62 	bl	8000578 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	482b      	ldr	r0, [pc, #172]	@ (8001f68 <main+0x480>)
 8001eba:	f006 fbab 	bl	8008614 <iprintf>
				sprintf(buff,"dust:%.2f", dust);
 8001ebe:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001ec2:	f7fe fb59 	bl	8000578 <__aeabi_f2d>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	f107 0008 	add.w	r0, r7, #8
 8001ece:	4927      	ldr	r1, [pc, #156]	@ (8001f6c <main+0x484>)
 8001ed0:	f006 fc18 	bl	8008704 <siprintf>
				LCD_writeStringXY(0, 0, buff);
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f9e0 	bl	80012a2 <LCD_writeStringXY>
			}
			if(!(tim3Sec%20)) //20초에 한번
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <main+0x478>)
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <main+0x47c>)
 8001ee8:	fba3 2301 	umull	r2, r3, r3, r1
 8001eec:	091a      	lsrs	r2, r3, #4
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	1aca      	subs	r2, r1, r3
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	f47f ae60 	bne.w	8001bbe <main+0xd6>
			{
				if(esp_get_status() != 0)
 8001efe:	f7ff fc99 	bl	8001834 <esp_get_status>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <main+0x42a>
				{
					printf("server connecting ...\r\n");
 8001f08:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <main+0x488>)
 8001f0a:	f006 fbf3 	bl	80086f4 <puts>
					esp_client_conn();
 8001f0e:	f7ff fc63 	bl	80017d8 <esp_client_conn>
				}
				sprintf(buff,"[KTH_SQL]SENSOR@%d@%d.%d@%.1f\n", dht11Data.rh_byte1, dht11Data.temp_byte1, dht11Data.temp_byte2, dust);
 8001f12:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8001f16:	461d      	mov	r5, r3
 8001f18:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8001f1c:	461e      	mov	r6, r3
 8001f1e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8001f22:	461c      	mov	r4, r3
 8001f24:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001f28:	f7fe fb26 	bl	8000578 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	f107 0008 	add.w	r0, r7, #8
 8001f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f38:	9400      	str	r4, [sp, #0]
 8001f3a:	4633      	mov	r3, r6
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <main+0x48c>)
 8001f40:	f006 fbe0 	bl	8008704 <siprintf>
				esp_send_data(buff);
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fd71 	bl	8001a30 <esp_send_data>
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001f4e:	e636      	b.n	8001bbe <main+0xd6>
 8001f50:	20000bc1 	.word	0x20000bc1
 8001f54:	20000ae8 	.word	0x20000ae8
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	0800b684 	.word	0x0800b684
 8001f60:	20000bc4 	.word	0x20000bc4
 8001f64:	cccccccd 	.word	0xcccccccd
 8001f68:	0800b698 	.word	0x0800b698
 8001f6c:	0800b6b4 	.word	0x0800b6b4
 8001f70:	0800b6c0 	.word	0x0800b6c0
 8001f74:	0800b6d8 	.word	0x0800b6d8

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b094      	sub	sp, #80	@ 0x50
 8001f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7e:	f107 0320 	add.w	r3, r7, #32
 8001f82:	2230      	movs	r2, #48	@ 0x30
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 fcb4 	bl	80088f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <SystemClock_Config+0xcc>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <SystemClock_Config+0xcc>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fac:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <SystemClock_Config+0xcc>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <SystemClock_Config+0xd0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <SystemClock_Config+0xd0>)
 8001fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <SystemClock_Config+0xd0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fe2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fb34 	bl	800466c <HAL_RCC_OscConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800200a:	f000 fb95 	bl	8002738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200e:	230f      	movs	r3, #15
 8002010:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002012:	2302      	movs	r3, #2
 8002014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800201a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fd96 	bl	8004b5c <HAL_RCC_ClockConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002036:	f000 fb7f 	bl	8002738 <Error_Handler>
  }
}
 800203a:	bf00      	nop
 800203c:	3750      	adds	r7, #80	@ 0x50
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000

0800204c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002060:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <MX_ADC1_Init+0xa0>)
 8002062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800206a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 800206e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002072:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002074:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 800207c:	2200      	movs	r2, #0
 800207e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002090:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <MX_ADC1_Init+0xa4>)
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002094:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800209a:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 800209c:	2201      	movs	r2, #1
 800209e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ae:	480e      	ldr	r0, [pc, #56]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 80020b0:	f000 fef2 	bl	8002e98 <HAL_ADC_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80020ba:	f000 fb3d 	bl	8002738 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020be:	2304      	movs	r3, #4
 80020c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <MX_ADC1_Init+0x9c>)
 80020d0:	f001 f8a6 	bl	8003220 <HAL_ADC_ConfigChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80020da:	f000 fb2d 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000a4c 	.word	0x20000a4c
 80020ec:	40012000 	.word	0x40012000
 80020f0:	0f000001 	.word	0x0f000001

080020f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_I2C1_Init+0x50>)
 80020fa:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <MX_I2C1_Init+0x54>)
 80020fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002100:	4a12      	ldr	r2, [pc, #72]	@ (800214c <MX_I2C1_Init+0x58>)
 8002102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <MX_I2C1_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002112:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <MX_I2C1_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_I2C1_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_I2C1_Init+0x50>)
 8002132:	f001 fdfd 	bl	8003d30 <HAL_I2C_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800213c:	f000 fafc 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000a94 	.word	0x20000a94
 8002148:	40005400 	.word	0x40005400
 800214c:	000186a0 	.word	0x000186a0

08002150 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	@ 0x38
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002164:	f107 0320 	add.w	r3, r7, #32
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002180:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <MX_TIM3_Init+0x118>)
 8002182:	4a3a      	ldr	r2, [pc, #232]	@ (800226c <MX_TIM3_Init+0x11c>)
 8002184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002186:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <MX_TIM3_Init+0x118>)
 8002188:	2253      	movs	r2, #83	@ 0x53
 800218a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218c:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <MX_TIM3_Init+0x118>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002192:	4b35      	ldr	r3, [pc, #212]	@ (8002268 <MX_TIM3_Init+0x118>)
 8002194:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <MX_TIM3_Init+0x118>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <MX_TIM3_Init+0x118>)
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021a6:	4830      	ldr	r0, [pc, #192]	@ (8002268 <MX_TIM3_Init+0x118>)
 80021a8:	f002 fef8 	bl	8004f9c <HAL_TIM_Base_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80021b2:	f000 fac1 	bl	8002738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4829      	ldr	r0, [pc, #164]	@ (8002268 <MX_TIM3_Init+0x118>)
 80021c4:	f003 fa58 	bl	8005678 <HAL_TIM_ConfigClockSource>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80021ce:	f000 fab3 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021d2:	4825      	ldr	r0, [pc, #148]	@ (8002268 <MX_TIM3_Init+0x118>)
 80021d4:	f002 ff94 	bl	8005100 <HAL_TIM_PWM_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80021de:	f000 faab 	bl	8002738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ea:	f107 0320 	add.w	r3, r7, #32
 80021ee:	4619      	mov	r1, r3
 80021f0:	481d      	ldr	r0, [pc, #116]	@ (8002268 <MX_TIM3_Init+0x118>)
 80021f2:	f003 fe09 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021fc:	f000 fa9c 	bl	8002738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002200:	2360      	movs	r3, #96	@ 0x60
 8002202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002204:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	4619      	mov	r1, r3
 8002218:	4813      	ldr	r0, [pc, #76]	@ (8002268 <MX_TIM3_Init+0x118>)
 800221a:	f003 f96b 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002224:	f000 fa88 	bl	8002738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2204      	movs	r2, #4
 800222c:	4619      	mov	r1, r3
 800222e:	480e      	ldr	r0, [pc, #56]	@ (8002268 <MX_TIM3_Init+0x118>)
 8002230:	f003 f960 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800223a:	f000 fa7d 	bl	8002738 <Error_Handler>
  }
  sConfigOC.Pulse = 320;
 800223e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002242:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	220c      	movs	r2, #12
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	@ (8002268 <MX_TIM3_Init+0x118>)
 800224c:	f003 f952 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 8002256:	f000 fa6f 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800225a:	4803      	ldr	r0, [pc, #12]	@ (8002268 <MX_TIM3_Init+0x118>)
 800225c:	f000 fb4e 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8002260:	bf00      	nop
 8002262:	3738      	adds	r7, #56	@ 0x38
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000ae8 	.word	0x20000ae8
 800226c:	40000400 	.word	0x40000400

08002270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <MX_USART2_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a8:	f003 fe30 	bl	8005f0c <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f000 fa41 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000b30 	.word	0x20000b30
 80022c0:	40004400 	.word	0x40004400

080022c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <MX_USART6_UART_Init+0x50>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022d0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80022d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	@ (8002310 <MX_USART6_UART_Init+0x4c>)
 80022fc:	f003 fe06 	bl	8005f0c <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002306:	f000 fa17 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000b78 	.word	0x20000b78
 8002314:	40011400 	.word	0x40011400

08002318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a37      	ldr	r2, [pc, #220]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a30      	ldr	r2, [pc, #192]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <MX_GPIO_Init+0xfc>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <MX_GPIO_Init+0xfc>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a29      	ldr	r2, [pc, #164]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <MX_GPIO_Init+0xfc>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <MX_GPIO_Init+0xfc>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_Pin|GREEN_Pin|BLUE_Pin|DHT11_Pin, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	f240 410e 	movw	r1, #1038	@ 0x40e
 80023a4:	481c      	ldr	r0, [pc, #112]	@ (8002418 <MX_GPIO_Init+0x100>)
 80023a6:	f001 fca9 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2120      	movs	r1, #32
 80023ae:	481b      	ldr	r0, [pc, #108]	@ (800241c <MX_GPIO_Init+0x104>)
 80023b0:	f001 fca4 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4813      	ldr	r0, [pc, #76]	@ (8002418 <MX_GPIO_Init+0x100>)
 80023cc:	f001 fafa 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin|DHT11_Pin;
 80023d0:	f240 430e 	movw	r3, #1038	@ 0x40e
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <MX_GPIO_Init+0x100>)
 80023ea:	f001 faeb 	bl	80039c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023ee:	2320      	movs	r3, #32
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <MX_GPIO_Init+0x104>)
 8002406:	f001 fadd 	bl	80039c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	@ 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40020800 	.word	0x40020800
 800241c:	40020000 	.word	0x40020000

08002420 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	b29b      	uxth	r3, r3
 800242c:	2201      	movs	r2, #1
 800242e:	4619      	mov	r1, r3
 8002430:	4803      	ldr	r0, [pc, #12]	@ (8002440 <MX_GPIO_LED_ON+0x20>)
 8002432:	f001 fc63 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020000 	.word	0x40020000

08002444 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	b29b      	uxth	r3, r3
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <MX_GPIO_LED_OFF+0x20>)
 8002456:	f001 fc51 	bl	8003cfc <HAL_GPIO_WritePin>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40020000 	.word	0x40020000

08002468 <esp_event>:
void esp_event(char * recvBuf)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b09c      	sub	sp, #112	@ 0x70
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
  int i=0;
 8002470:	2300      	movs	r3, #0
 8002472:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8002474:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	223c      	movs	r2, #60	@ 0x3c
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f006 fa2f 	bl	80088f4 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fd ff02 	bl	80002a0 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002594 <esp_event+0x12c>)
 80024a2:	2100      	movs	r1, #0
 80024a4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	483b      	ldr	r0, [pc, #236]	@ (8002598 <esp_event+0x130>)
 80024aa:	f006 f8b3 	bl	8008614 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80024ae:	493b      	ldr	r1, [pc, #236]	@ (800259c <esp_event+0x134>)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f006 fa47 	bl	8008944 <strtok>
 80024b6:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80024b8:	e011      	b.n	80024de <esp_event+0x76>
  {
    pArray[i] = pToken;
 80024ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	3368      	adds	r3, #104	@ 0x68
 80024c0:	443b      	add	r3, r7
 80024c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024c4:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80024c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ca:	3301      	adds	r3, #1
 80024cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80024ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	dc08      	bgt.n	80024e6 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 80024d4:	4931      	ldr	r1, [pc, #196]	@ (800259c <esp_event+0x134>)
 80024d6:	2000      	movs	r0, #0
 80024d8:	f006 fa34 	bl	8008944 <strtok>
 80024dc:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 80024de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ea      	bne.n	80024ba <esp_event+0x52>
 80024e4:	e000      	b.n	80024e8 <esp_event+0x80>
      break;
 80024e6:	bf00      	nop
  }

  if(!strcmp(pArray[1],"AUTO"))
 80024e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ea:	492d      	ldr	r1, [pc, #180]	@ (80025a0 <esp_event+0x138>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd fe77 	bl	80001e0 <strcmp>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d132      	bne.n	800255e <esp_event+0xf6>
  {
  	if(!strcmp(pArray[2],"ON"))
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	492a      	ldr	r1, [pc, #168]	@ (80025a4 <esp_event+0x13c>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd fe6f 	bl	80001e0 <strcmp>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <esp_event+0xae>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8002508:	2020      	movs	r0, #32
 800250a:	f7ff ff89 	bl	8002420 <MX_GPIO_LED_ON>
  		Auto = 1;
 800250e:	4b26      	ldr	r3, [pc, #152]	@ (80025a8 <esp_event+0x140>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e00d      	b.n	8002532 <esp_event+0xca>
  	}
	else if(!strcmp(pArray[2],"OFF"))
 8002516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002518:	4924      	ldr	r1, [pc, #144]	@ (80025ac <esp_event+0x144>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7fd fe60 	bl	80001e0 <strcmp>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <esp_event+0xca>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8002526:	2020      	movs	r0, #32
 8002528:	f7ff ff8c 	bl	8002444 <MX_GPIO_LED_OFF>
		Auto = 0;
 800252c:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <esp_event+0x140>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8002532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002534:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	f107 000c 	add.w	r0, r7, #12
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	460b      	mov	r3, r1
 8002540:	491b      	ldr	r1, [pc, #108]	@ (80025b0 <esp_event+0x148>)
 8002542:	f006 f8df 	bl	8008704 <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fa70 	bl	8001a30 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4619      	mov	r1, r3
 8002556:	4817      	ldr	r0, [pc, #92]	@ (80025b4 <esp_event+0x14c>)
 8002558:	f006 f85c 	bl	8008614 <iprintf>
 800255c:	e017      	b.n	800258e <esp_event+0x126>
  else if(!strncmp(pArray[1]," New conn",8))
 800255e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002560:	2208      	movs	r2, #8
 8002562:	4915      	ldr	r1, [pc, #84]	@ (80025b8 <esp_event+0x150>)
 8002564:	4618      	mov	r0, r3
 8002566:	f006 f9da 	bl	800891e <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <esp_event+0x120>
  else if(!strncmp(pArray[1]," Already log",8))
 8002570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002572:	2208      	movs	r2, #8
 8002574:	4911      	ldr	r1, [pc, #68]	@ (80025bc <esp_event+0x154>)
 8002576:	4618      	mov	r0, r3
 8002578:	f006 f9d1 	bl	800891e <strncmp>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d104      	bne.n	800258c <esp_event+0x124>
	  esp_client_conn();
 8002582:	f7ff f929 	bl	80017d8 <esp_client_conn>
      return;
 8002586:	e002      	b.n	800258e <esp_event+0x126>
     return;
 8002588:	bf00      	nop
 800258a:	e000      	b.n	800258e <esp_event+0x126>
      return;
 800258c:	bf00      	nop
}
 800258e:	3768      	adds	r7, #104	@ 0x68
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000bc8 	.word	0x20000bc8
 8002598:	0800b6f8 	.word	0x0800b6f8
 800259c:	0800b70c 	.word	0x0800b70c
 80025a0:	0800b710 	.word	0x0800b710
 80025a4:	0800b718 	.word	0x0800b718
 80025a8:	20000bc1 	.word	0x20000bc1
 80025ac:	0800b71c 	.word	0x0800b71c
 80025b0:	0800b720 	.word	0x0800b720
 80025b4:	0800b748 	.word	0x0800b748
 80025b8:	0800b72c 	.word	0x0800b72c
 80025bc:	0800b738 	.word	0x0800b738

080025c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025d0:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025da:	db0a      	blt.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a07      	ldr	r2, [pc, #28]	@ (8002608 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025ea:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
	}
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000c08 	.word	0x20000c08
 8002604:	20000000 	.word	0x20000000
 8002608:	20000bc4 	.word	0x20000bc4

0800260c <Start_DustSensor_LED>:

void Start_DustSensor_LED(void) {
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
    // LED ON (PB14 HIGH)
    HAL_GPIO_WritePin(TIM3_CH4_GPIO_Port, TIM3_CH4_Pin, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	2102      	movs	r1, #2
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <Start_DustSensor_LED+0x18>)
 8002616:	f001 fb71 	bl	8003cfc <HAL_GPIO_WritePin>

    // 0.32ms 대기 (320us)
    HAL_Delay(1); // 최소 1ms 대기 (HAL_Delay는 ms 단위)
 800261a:	2001      	movs	r0, #1
 800261c:	f000 fc18 	bl	8002e50 <HAL_Delay>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020400 	.word	0x40020400

08002628 <Stop_DustSensor_LED>:

void Stop_DustSensor_LED(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    // LED OFF (PB14 LOW)
    HAL_GPIO_WritePin(TIM3_CH4_GPIO_Port, TIM3_CH4_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	2102      	movs	r1, #2
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <Stop_DustSensor_LED+0x14>)
 8002632:	f001 fb63 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40020400 	.word	0x40020400

08002640 <Read_DustSensor>:

float Read_DustSensor(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
    uint32_t adc_value = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
    float voltage = 0.0;
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
    float dust_density = 0.0;
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

    // ADC 변환 시작
    HAL_ADC_Start(&hadc1);
 8002656:	4834      	ldr	r0, [pc, #208]	@ (8002728 <Read_DustSensor+0xe8>)
 8002658:	f000 fc62 	bl	8002f20 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);  // 변환 완료 대기
 800265c:	210a      	movs	r1, #10
 800265e:	4832      	ldr	r0, [pc, #200]	@ (8002728 <Read_DustSensor+0xe8>)
 8002660:	f000 fd45 	bl	80030ee <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc1);
 8002664:	4830      	ldr	r0, [pc, #192]	@ (8002728 <Read_DustSensor+0xe8>)
 8002666:	f000 fdcd 	bl	8003204 <HAL_ADC_GetValue>
 800266a:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 800266c:	482e      	ldr	r0, [pc, #184]	@ (8002728 <Read_DustSensor+0xe8>)
 800266e:	f000 fd0b 	bl	8003088 <HAL_ADC_Stop>

    // ADC 값을 전압으로 변환 (STM32는 3.3V 기준)
    voltage = (adc_value / 1023.0) * 3.3 * 1.5;
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7fd ff5e 	bl	8000534 <__aeabi_ui2d>
 8002678:	a325      	add	r3, pc, #148	@ (adr r3, 8002710 <Read_DustSensor+0xd0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe f8fd 	bl	800087c <__aeabi_ddiv>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	a323      	add	r3, pc, #140	@ (adr r3, 8002718 <Read_DustSensor+0xd8>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd ffca 	bl	8000628 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <Read_DustSensor+0xec>)
 80026a2:	f7fd ffc1 	bl	8000628 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fab3 	bl	8000c18 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60bb      	str	r3, [r7, #8]

    // 전압을 미세먼지 농도 (mg/m^3)로 변환
    dust_density = (voltage - 0.03) / 0.5 * 100.0; // 공식 사용
 80026b6:	68b8      	ldr	r0, [r7, #8]
 80026b8:	f7fd ff5e 	bl	8000578 <__aeabi_f2d>
 80026bc:	a318      	add	r3, pc, #96	@ (adr r3, 8002720 <Read_DustSensor+0xe0>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd fdf9 	bl	80002b8 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <Read_DustSensor+0xf0>)
 80026d4:	f7fe f8d2 	bl	800087c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <Read_DustSensor+0xf4>)
 80026e6:	f7fd ff9f 	bl	8000628 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa91 	bl	8000c18 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	607b      	str	r3, [r7, #4]

    return dust_density;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	00000000 	.word	0x00000000
 8002714:	408ff800 	.word	0x408ff800
 8002718:	66666666 	.word	0x66666666
 800271c:	400a6666 	.word	0x400a6666
 8002720:	eb851eb8 	.word	0xeb851eb8
 8002724:	3f9eb851 	.word	0x3f9eb851
 8002728:	20000a4c 	.word	0x20000a4c
 800272c:	3ff80000 	.word	0x3ff80000
 8002730:	3fe00000 	.word	0x3fe00000
 8002734:	40590000 	.word	0x40590000

08002738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <Error_Handler+0x8>

08002744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_MspInit+0x4c>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	4a0f      	ldr	r2, [pc, #60]	@ (8002790 <HAL_MspInit+0x4c>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002758:	6453      	str	r3, [r2, #68]	@ 0x44
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_MspInit+0x4c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_MspInit+0x4c>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <HAL_MspInit+0x4c>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_MspInit+0x4c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002782:	2007      	movs	r0, #7
 8002784:	f001 f84a 	bl	800381c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_ADC_MspInit+0x7c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d127      	bne.n	8002806 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_ADC_MspInit+0x80>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = DUST_Pin;
 80027ee:	2310      	movs	r3, #16
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f2:	2303      	movs	r3, #3
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DUST_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	@ (8002818 <HAL_ADC_MspInit+0x84>)
 8002802:	f001 f8df 	bl	80039c4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	@ 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40012000 	.word	0x40012000
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000

0800281c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_I2C_MspInit+0x84>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12c      	bne.n	8002898 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800285a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800285e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002860:	2312      	movs	r3, #18
 8002862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800286c:	2304      	movs	r3, #4
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <HAL_I2C_MspInit+0x8c>)
 8002878:	f001 f8a4 	bl	80039c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 8002886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800288a:	6413      	str	r3, [r2, #64]	@ 0x40
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_I2C_MspInit+0x88>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	@ 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40005400 	.word	0x40005400
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020400 	.word	0x40020400

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <HAL_TIM_Base_MspInit+0x48>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d115      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_TIM_Base_MspInit+0x4c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <HAL_TIM_Base_MspInit+0x4c>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_TIM_Base_MspInit+0x4c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	201d      	movs	r0, #29
 80028e0:	f000 ffa7 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028e4:	201d      	movs	r0, #29
 80028e6:	f000 ffc0 	bl	800386a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <HAL_TIM_MspPostInit+0xa4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d13b      	bne.n	8002996 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a18      	ldr	r2, [pc, #96]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_TIM_MspPostInit+0xa8>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Pin|TIM3_CH2_Pin;
 8002956:	23c0      	movs	r3, #192	@ 0xc0
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002966:	2302      	movs	r3, #2
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	480d      	ldr	r0, [pc, #52]	@ (80029a8 <HAL_TIM_MspPostInit+0xac>)
 8002972:	f001 f827 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH4_Pin;
 8002976:	2302      	movs	r3, #2
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	4806      	ldr	r0, [pc, #24]	@ (80029ac <HAL_TIM_MspPostInit+0xb0>)
 8002992:	f001 f817 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3728      	adds	r7, #40	@ 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400

080029b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	@ 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab8 <HAL_UART_MspInit+0x108>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d134      	bne.n	8002a3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	4a38      	ldr	r2, [pc, #224]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e2:	4b36      	ldr	r3, [pc, #216]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a31      	ldr	r2, [pc, #196]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b2f      	ldr	r3, [pc, #188]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4826      	ldr	r0, [pc, #152]	@ (8002ac0 <HAL_UART_MspInit+0x110>)
 8002a26:	f000 ffcd 	bl	80039c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2026      	movs	r0, #38	@ 0x26
 8002a30:	f000 feff 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a34:	2026      	movs	r0, #38	@ 0x26
 8002a36:	f000 ff18 	bl	800386a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a3a:	e038      	b.n	8002aae <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a20      	ldr	r2, [pc, #128]	@ (8002ac4 <HAL_UART_MspInit+0x114>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d133      	bne.n	8002aae <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a50:	f043 0320 	orr.w	r3, r3, #32
 8002a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_UART_MspInit+0x10c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a7e:	23c0      	movs	r3, #192	@ 0xc0
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	480b      	ldr	r0, [pc, #44]	@ (8002ac8 <HAL_UART_MspInit+0x118>)
 8002a9a:	f000 ff93 	bl	80039c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2047      	movs	r0, #71	@ 0x47
 8002aa4:	f000 fec5 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002aa8:	2047      	movs	r0, #71	@ 0x47
 8002aaa:	f000 fede 	bl	800386a <HAL_NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3730      	adds	r7, #48	@ 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	40020800 	.word	0x40020800

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <NMI_Handler+0x4>

08002ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <HardFault_Handler+0x4>

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <BusFault_Handler+0x4>

08002aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <UsageFault_Handler+0x4>

08002af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b22:	f000 f975 	bl	8002e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <TIM3_IRQHandler+0x10>)
 8002b32:	f002 fbef 	bl	8005314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000ae8 	.word	0x20000ae8

08002b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <USART2_IRQHandler+0x10>)
 8002b46:	f003 fae1 	bl	800610c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000b30 	.word	0x20000b30

08002b54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <USART6_IRQHandler+0x10>)
 8002b5a:	f003 fad7 	bl	800610c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000b78 	.word	0x20000b78

08002b68 <_getpid>:
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_kill>:
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	f005 ff9b 	bl	8008abc <__errno>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2216      	movs	r2, #22
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_exit>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ffe7 	bl	8002b78 <_kill>
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <_exit+0x12>

08002bae <_read>:
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e00a      	b.n	8002bd6 <_read+0x28>
 8002bc0:	f3af 8000 	nop.w
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	60ba      	str	r2, [r7, #8]
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbf0      	blt.n	8002bc0 <_read+0x12>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_write>:
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e009      	b.n	8002c0e <_write+0x26>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60ba      	str	r2, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe ff58 	bl	8001ab8 <__io_putchar>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dbf1      	blt.n	8002bfa <_write+0x12>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_close>:
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_fstat>:
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_isatty>:
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	2301      	movs	r3, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_lseek>:
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_sbrk>:
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <_sbrk+0x5c>)
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <_sbrk+0x60>)
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <_sbrk+0x22>
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <_sbrk+0x64>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <_sbrk+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <_sbrk+0x40>
 8002cb8:	f005 ff00 	bl	8008abc <__errno>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e009      	b.n	8002cdc <_sbrk+0x54>
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4a05      	ldr	r2, [pc, #20]	@ (8002cec <_sbrk+0x64>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20020000 	.word	0x20020000
 8002ce8:	00000400 	.word	0x00000400
 8002cec:	20000c0c 	.word	0x20000c0c
 8002cf0:	20000d60 	.word	0x20000d60

08002cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <SystemInit+0x20>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <SystemInit+0x20>)
 8002d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <Reset_Handler>:
 8002d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d50 <LoopFillZerobss+0xe>
 8002d1c:	f7ff ffea 	bl	8002cf4 <SystemInit>
 8002d20:	480c      	ldr	r0, [pc, #48]	@ (8002d54 <LoopFillZerobss+0x12>)
 8002d22:	490d      	ldr	r1, [pc, #52]	@ (8002d58 <LoopFillZerobss+0x16>)
 8002d24:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <LoopFillZerobss+0x1a>)
 8002d26:	2300      	movs	r3, #0
 8002d28:	e002      	b.n	8002d30 <LoopCopyDataInit>

08002d2a <CopyDataInit>:
 8002d2a:	58d4      	ldr	r4, [r2, r3]
 8002d2c:	50c4      	str	r4, [r0, r3]
 8002d2e:	3304      	adds	r3, #4

08002d30 <LoopCopyDataInit>:
 8002d30:	18c4      	adds	r4, r0, r3
 8002d32:	428c      	cmp	r4, r1
 8002d34:	d3f9      	bcc.n	8002d2a <CopyDataInit>
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <LoopFillZerobss+0x1e>)
 8002d38:	4c0a      	ldr	r4, [pc, #40]	@ (8002d64 <LoopFillZerobss+0x22>)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e001      	b.n	8002d42 <LoopFillZerobss>

08002d3e <FillZerobss>:
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	3204      	adds	r2, #4

08002d42 <LoopFillZerobss>:
 8002d42:	42a2      	cmp	r2, r4
 8002d44:	d3fb      	bcc.n	8002d3e <FillZerobss>
 8002d46:	f005 febf 	bl	8008ac8 <__libc_init_array>
 8002d4a:	f7fe fecd 	bl	8001ae8 <main>
 8002d4e:	4770      	bx	lr
 8002d50:	20020000 	.word	0x20020000
 8002d54:	20000000 	.word	0x20000000
 8002d58:	200001d8 	.word	0x200001d8
 8002d5c:	0800bc04 	.word	0x0800bc04
 8002d60:	200001d8 	.word	0x200001d8
 8002d64:	20000d60 	.word	0x20000d60

08002d68 <ADC_IRQHandler>:
 8002d68:	e7fe      	b.n	8002d68 <ADC_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d70:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <HAL_Init+0x40>)
 8002d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <HAL_Init+0x40>)
 8002d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_Init+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <HAL_Init+0x40>)
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d94:	2003      	movs	r0, #3
 8002d96:	f000 fd41 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f000 f808 	bl	8002db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fcd0 	bl	8002744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00

08002db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <HAL_InitTick+0x54>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <HAL_InitTick+0x58>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd59 	bl	8003886 <HAL_SYSTICK_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00e      	b.n	8002dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d80a      	bhi.n	8002dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f000 fd21 	bl	8003832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df0:	4a06      	ldr	r2, [pc, #24]	@ (8002e0c <HAL_InitTick+0x5c>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000004 	.word	0x20000004
 8002e08:	2000000c 	.word	0x2000000c
 8002e0c:	20000008 	.word	0x20000008

08002e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_IncTick+0x20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_IncTick+0x24>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <HAL_IncTick+0x24>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	20000c10 	.word	0x20000c10

08002e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_GetTick+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000c10 	.word	0x20000c10

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff ffee 	bl	8002e38 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d005      	beq.n	8002e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_Delay+0x44>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e76:	bf00      	nop
 8002e78:	f7ff ffde 	bl	8002e38 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d8f7      	bhi.n	8002e78 <HAL_Delay+0x28>
  {
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e033      	b.n	8002f16 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fc6c 	bl	8002794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ede:	f023 0302 	bic.w	r3, r3, #2
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 faca 	bl	8003484 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f06:	e001      	b.n	8002f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Start+0x1a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e097      	b.n	800306a <HAL_ADC_Start+0x14a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d018      	beq.n	8002f82 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f60:	4b45      	ldr	r3, [pc, #276]	@ (8003078 <HAL_ADC_Start+0x158>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a45      	ldr	r2, [pc, #276]	@ (800307c <HAL_ADC_Start+0x15c>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9a      	lsrs	r2, r3, #18
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f74:	e002      	b.n	8002f7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f9      	bne.n	8002f76 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d15f      	bne.n	8003050 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d106      	bne.n	8002fde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	f023 0206 	bic.w	r2, r3, #6
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fec:	4b24      	ldr	r3, [pc, #144]	@ (8003080 <HAL_ADC_Start+0x160>)
 8002fee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ff8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d129      	bne.n	8003068 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e020      	b.n	8003068 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a16      	ldr	r2, [pc, #88]	@ (8003084 <HAL_ADC_Start+0x164>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d11b      	bne.n	8003068 <HAL_ADC_Start+0x148>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d114      	bne.n	8003068 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	e00b      	b.n	8003068 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f043 0210 	orr.w	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000004 	.word	0x20000004
 800307c:	431bde83 	.word	0x431bde83
 8003080:	40012300 	.word	0x40012300
 8003084:	40012000 	.word	0x40012000

08003088 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_ADC_Stop+0x16>
 800309a:	2302      	movs	r3, #2
 800309c:	e021      	b.n	80030e2 <HAL_ADC_Stop+0x5a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310a:	d113      	bne.n	8003134 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311a:	d10b      	bne.n	8003134 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e063      	b.n	80031fc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7ff fe80 	bl	8002e38 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800313a:	e021      	b.n	8003180 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d01d      	beq.n	8003180 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_ADC_PollForConversion+0x6c>
 800314a:	f7ff fe75 	bl	8002e38 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d212      	bcs.n	8003180 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00b      	beq.n	8003180 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03d      	b.n	80031fc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d1d6      	bne.n	800313c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0212 	mvn.w	r2, #18
 8003196:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d123      	bne.n	80031fa <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11f      	bne.n	80031fa <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d111      	bne.n	80031fa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1c>
 8003238:	2302      	movs	r3, #2
 800323a:	e113      	b.n	8003464 <HAL_ADC_ConfigChannel+0x244>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b09      	cmp	r3, #9
 800324a:	d925      	bls.n	8003298 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	3b1e      	subs	r3, #30
 8003262:	2207      	movs	r2, #7
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68d9      	ldr	r1, [r3, #12]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	4603      	mov	r3, r0
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4403      	add	r3, r0
 800328a:	3b1e      	subs	r3, #30
 800328c:	409a      	lsls	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	e022      	b.n	80032de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	2207      	movs	r2, #7
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6919      	ldr	r1, [r3, #16]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4403      	add	r3, r0
 80032d4:	409a      	lsls	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d824      	bhi.n	8003330 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	3b05      	subs	r3, #5
 80032f8:	221f      	movs	r2, #31
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4618      	mov	r0, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	3b05      	subs	r3, #5
 8003322:	fa00 f203 	lsl.w	r2, r0, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	635a      	str	r2, [r3, #52]	@ 0x34
 800332e:	e04c      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d824      	bhi.n	8003382 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	3b23      	subs	r3, #35	@ 0x23
 800334a:	221f      	movs	r2, #31
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43da      	mvns	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	400a      	ands	r2, r1
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b23      	subs	r3, #35	@ 0x23
 8003374:	fa00 f203 	lsl.w	r2, r0, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003380:	e023      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3b41      	subs	r3, #65	@ 0x41
 8003394:	221f      	movs	r2, #31
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	400a      	ands	r2, r1
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4618      	mov	r0, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b41      	subs	r3, #65	@ 0x41
 80033be:	fa00 f203 	lsl.w	r2, r0, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ca:	4b29      	ldr	r3, [pc, #164]	@ (8003470 <HAL_ADC_ConfigChannel+0x250>)
 80033cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_ADC_ConfigChannel+0x254>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10f      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d8>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d10b      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_ADC_ConfigChannel+0x254>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12b      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <HAL_ADC_ConfigChannel+0x258>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x1f4>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b11      	cmp	r3, #17
 8003412:	d122      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <HAL_ADC_ConfigChannel+0x258>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	4b11      	ldr	r3, [pc, #68]	@ (800347c <HAL_ADC_ConfigChannel+0x25c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <HAL_ADC_ConfigChannel+0x260>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9a      	lsrs	r2, r3, #18
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800344c:	e002      	b.n	8003454 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3b01      	subs	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f9      	bne.n	800344e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	40012000 	.word	0x40012000
 8003478:	10000012 	.word	0x10000012
 800347c:	20000004 	.word	0x20000004
 8003480:	431bde83 	.word	0x431bde83

08003484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348c:	4b79      	ldr	r3, [pc, #484]	@ (8003674 <ADC_Init+0x1f0>)
 800348e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	4a58      	ldr	r2, [pc, #352]	@ (8003678 <ADC_Init+0x1f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800352a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e00f      	b.n	8003582 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0202 	bic.w	r2, r2, #2
 8003590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7e1b      	ldrb	r3, [r3, #24]
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80035ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	3b01      	subs	r3, #1
 80035dc:	035a      	lsls	r2, r3, #13
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e007      	b.n	80035f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	3b01      	subs	r3, #1
 8003614:	051a      	lsls	r2, r3, #20
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800362c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800363a:	025a      	lsls	r2, r3, #9
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	029a      	lsls	r2, r3, #10
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	0f000001 	.word	0x0f000001

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4907      	ldr	r1, [pc, #28]	@ (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	@ (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf28      	it	cs
 800378e:	2304      	movcs	r3, #4
 8003790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3304      	adds	r3, #4
 8003796:	2b06      	cmp	r3, #6
 8003798:	d902      	bls.n	80037a0 <NVIC_EncodePriority+0x30>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3b03      	subs	r3, #3
 800379e:	e000      	b.n	80037a2 <NVIC_EncodePriority+0x32>
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	401a      	ands	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43d9      	mvns	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	4313      	orrs	r3, r2
         );
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f7ff ff8e 	bl	800371c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff29 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff3e 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff8e 	bl	8003770 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5d 	bl	800371c <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff31 	bl	80036e0 <__NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa2 	bl	80037d8 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fac4 	bl	8002e38 <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d008      	beq.n	80038d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2280      	movs	r2, #128	@ 0x80
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e052      	b.n	8003976 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0216 	bic.w	r2, r2, #22
 80038de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <HAL_DMA_Abort+0x62>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0208 	bic.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003920:	e013      	b.n	800394a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003922:	f7ff fa89 	bl	8002e38 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b05      	cmp	r3, #5
 800392e:	d90c      	bls.n	800394a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e015      	b.n	8003976 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e4      	bne.n	8003922 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	223f      	movs	r2, #63	@ 0x3f
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2280      	movs	r2, #128	@ 0x80
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e00c      	b.n	80039b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2205      	movs	r2, #5
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e159      	b.n	8003c94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	f040 8148 	bne.w	8003c8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d005      	beq.n	8003a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d130      	bne.n	8003a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 0201 	and.w	r2, r3, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d017      	beq.n	8003ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d123      	bne.n	8003b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	08da      	lsrs	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3208      	adds	r2, #8
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a2 	beq.w	8003c8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b54      	ldr	r3, [pc, #336]	@ (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b66:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_GPIO_Init+0x2ec>)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a49      	ldr	r2, [pc, #292]	@ (8003cb4 <HAL_GPIO_Init+0x2f0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d019      	beq.n	8003bc6 <HAL_GPIO_Init+0x202>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a48      	ldr	r2, [pc, #288]	@ (8003cb8 <HAL_GPIO_Init+0x2f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0x1fe>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a47      	ldr	r2, [pc, #284]	@ (8003cbc <HAL_GPIO_Init+0x2f8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00d      	beq.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a46      	ldr	r2, [pc, #280]	@ (8003cc0 <HAL_GPIO_Init+0x2fc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <HAL_GPIO_Init+0x1f6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a45      	ldr	r2, [pc, #276]	@ (8003cc4 <HAL_GPIO_Init+0x300>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_GPIO_Init+0x1f2>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x204>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	f002 0203 	and.w	r2, r2, #3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bd8:	4935      	ldr	r1, [pc, #212]	@ (8003cb0 <HAL_GPIO_Init+0x2ec>)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3302      	adds	r3, #2
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003be6:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c10:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c34:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3a:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c88:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc8 <HAL_GPIO_Init+0x304>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	f67f aea2 	bls.w	80039e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3724      	adds	r7, #36	@ 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e12b      	b.n	8003f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fd60 	bl	800281c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d94:	f001 f8da 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a81      	ldr	r2, [pc, #516]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d807      	bhi.n	8003db4 <HAL_I2C_Init+0x84>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a80      	ldr	r2, [pc, #512]	@ (8003fa8 <HAL_I2C_Init+0x278>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bf94      	ite	ls
 8003dac:	2301      	movls	r3, #1
 8003dae:	2300      	movhi	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e006      	b.n	8003dc2 <HAL_I2C_Init+0x92>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a7d      	ldr	r2, [pc, #500]	@ (8003fac <HAL_I2C_Init+0x27c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0e7      	b.n	8003f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a78      	ldr	r2, [pc, #480]	@ (8003fb0 <HAL_I2C_Init+0x280>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9b      	lsrs	r3, r3, #18
 8003dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a6a      	ldr	r2, [pc, #424]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d802      	bhi.n	8003e04 <HAL_I2C_Init+0xd4>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	e009      	b.n	8003e18 <HAL_I2C_Init+0xe8>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	4a69      	ldr	r2, [pc, #420]	@ (8003fb4 <HAL_I2C_Init+0x284>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	3301      	adds	r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	495c      	ldr	r1, [pc, #368]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d819      	bhi.n	8003e6c <HAL_I2C_Init+0x13c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1e59      	subs	r1, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e4c:	400b      	ands	r3, r1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_I2C_Init+0x138>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e59      	subs	r1, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e66:	e051      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	e04f      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <HAL_I2C_Init+0x168>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1e58      	subs	r0, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	440b      	add	r3, r1
 8003e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e012      	b.n	8003ebe <HAL_I2C_Init+0x18e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e58      	subs	r0, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	0099      	lsls	r1, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Init+0x196>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e022      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10e      	bne.n	8003eec <HAL_I2C_Init+0x1bc>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1e58      	subs	r0, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	440b      	add	r3, r1
 8003edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eea:	e00f      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	0099      	lsls	r1, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	6809      	ldr	r1, [r1, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6911      	ldr	r1, [r2, #16]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	4311      	orrs	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	000186a0 	.word	0x000186a0
 8003fa8:	001e847f 	.word	0x001e847f
 8003fac:	003d08ff 	.word	0x003d08ff
 8003fb0:	431bde83 	.word	0x431bde83
 8003fb4:	10624dd3 	.word	0x10624dd3

08003fb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7fe ff34 	bl	8002e38 <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 80e0 	bne.w	80041a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2319      	movs	r3, #25
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4970      	ldr	r1, [pc, #448]	@ (80041ac <HAL_I2C_Master_Transmit+0x1f4>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f964 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0d3      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2C_Master_Transmit+0x50>
 8004004:	2302      	movs	r3, #2
 8004006:	e0cc      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d007      	beq.n	800402e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2210      	movs	r2, #16
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f89c 	bl	80041b4 <I2C_MasterRequestWrite>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e08d      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800409c:	e066      	b.n	800416c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa22 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d11b      	bne.n	8004140 <HAL_I2C_Master_Transmit+0x188>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	6a39      	ldr	r1, [r7, #32]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa19 	bl	800457c <I2C_WaitOnBTFFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	2b04      	cmp	r3, #4
 8004156:	d107      	bne.n	8004168 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e01a      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d194      	bne.n	800409e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00100002 	.word	0x00100002
 80041b0:	ffff0000 	.word	0xffff0000

080041b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	460b      	mov	r3, r1
 80041c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d006      	beq.n	80041de <I2C_MasterRequestWrite+0x2a>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d003      	beq.n	80041de <I2C_MasterRequestWrite+0x2a>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041dc:	d108      	bne.n	80041f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e00b      	b.n	8004208 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	2b12      	cmp	r3, #18
 80041f6:	d107      	bne.n	8004208 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004206:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f84f 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422e:	d103      	bne.n	8004238 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e035      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004244:	d108      	bne.n	8004258 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	e01b      	b.n	8004290 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004258:	897b      	ldrh	r3, [r7, #10]
 800425a:	11db      	asrs	r3, r3, #7
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0306 	and.w	r3, r3, #6
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f063 030f 	orn	r3, r3, #15
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	490e      	ldr	r1, [pc, #56]	@ (80042b0 <I2C_MasterRequestWrite+0xfc>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f898 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e010      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4907      	ldr	r1, [pc, #28]	@ (80042b4 <I2C_MasterRequestWrite+0x100>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f888 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010008 	.word	0x00010008
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	e048      	b.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d044      	beq.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe fdb1 	bl	8002e38 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d139      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10d      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x56>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	e00c      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	429a      	cmp	r2, r3
 800432c:	d116      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e023      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	e00c      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d093      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	e071      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d123      	bne.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e067      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d041      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe fd0c 	bl	8002e38 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d136      	bne.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10c      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e00b      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e021      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10c      	bne.n	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e00b      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	43da      	mvns	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af6d 	bne.w	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f8:	e034      	b.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f886 	bl	800460c <I2C_IsAcknowledgeFailed>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e034      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d028      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe fc91 	bl	8002e38 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11d      	bne.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d016      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	2b80      	cmp	r3, #128	@ 0x80
 8004570:	d1c3      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f83e 	bl	800460c <I2C_IsAcknowledgeFailed>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e034      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d028      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fc49 	bl	8002e38 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d1c3      	bne.n	800458a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004622:	d11b      	bne.n	800465c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800462c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e267      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800468a:	4b88      	ldr	r3, [pc, #544]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b85      	ldr	r3, [pc, #532]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b82      	ldr	r3, [pc, #520]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b7e      	ldr	r3, [pc, #504]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e242      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b76      	ldr	r3, [pc, #472]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b70      	ldr	r3, [pc, #448]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6d      	ldr	r3, [pc, #436]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6c      	ldr	r2, [pc, #432]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b69      	ldr	r3, [pc, #420]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b66      	ldr	r3, [pc, #408]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a65      	ldr	r2, [pc, #404]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe fb88 	bl	8002e38 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fe fb84 	bl	8002e38 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e207      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b5b      	ldr	r3, [pc, #364]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fb74 	bl	8002e38 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe fb70 	bl	8002e38 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f3      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b51      	ldr	r3, [pc, #324]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004782:	4b4a      	ldr	r3, [pc, #296]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b44      	ldr	r3, [pc, #272]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c7      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b3b      	ldr	r3, [pc, #236]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4937      	ldr	r1, [pc, #220]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <HAL_RCC_OscConfig+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe fb29 	bl	8002e38 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fe fb25 	bl	8002e38 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a8      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4925      	ldr	r1, [pc, #148]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <HAL_RCC_OscConfig+0x244>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fb08 	bl	8002e38 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7fe fb04 	bl	8002e38 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e187      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d036      	beq.n	80048c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <HAL_RCC_OscConfig+0x248>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe fae8 	bl	8002e38 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7fe fae4 	bl	8002e38 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e167      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e01b      	b.n	80048c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_OscConfig+0x248>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fe fad1 	bl	8002e38 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e00e      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489a:	f7fe facd 	bl	8002e38 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d907      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e150      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470000 	.word	0x42470000
 80048b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ea      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8097 	beq.w	8004a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b81      	ldr	r3, [pc, #516]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b7d      	ldr	r3, [pc, #500]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	4a7c      	ldr	r2, [pc, #496]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f2:	4b7a      	ldr	r3, [pc, #488]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b77      	ldr	r3, [pc, #476]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b74      	ldr	r3, [pc, #464]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fe fa8d 	bl	8002e38 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fe fa89 	bl	8002e38 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e10c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ea>
 8004948:	4b64      	ldr	r3, [pc, #400]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	@ 0x70
 8004954:	e01c      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	4b5f      	ldr	r3, [pc, #380]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	4a5e      	ldr	r2, [pc, #376]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	@ 0x70
 800496a:	4b5c      	ldr	r3, [pc, #368]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	4a5b      	ldr	r2, [pc, #364]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	@ 0x70
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004978:	4b58      	ldr	r3, [pc, #352]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497c:	4a57      	ldr	r2, [pc, #348]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	@ 0x70
 8004984:	4b55      	ldr	r3, [pc, #340]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4a54      	ldr	r2, [pc, #336]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fe fa4e 	bl	8002e38 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fe fa4a 	bl	8002e38 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0cb      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b49      	ldr	r3, [pc, #292]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCC_OscConfig+0x334>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fe fa38 	bl	8002e38 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fe fa34 	bl	8002e38 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b5      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	4a38      	ldr	r2, [pc, #224]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a1 	beq.w	8004b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d05c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d141      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe fa08 	bl	8002e38 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe fa04 	bl	8002e38 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e087      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	491b      	ldr	r1, [pc, #108]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fe f9dd 	bl	8002e38 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fe f9d9 	bl	8002e38 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e05c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x416>
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f9c6 	bl	8002e38 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fe f9c2 	bl	8002e38 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x444>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e038      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fe f8f4 	bl	8002e38 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fe f8f0 	bl	8002e38 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f854 	bl	8002db0 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800b75c 	.word	0x0800b75c
 8004d20:	20000004 	.word	0x20000004
 8004d24:	20000008 	.word	0x20000008

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b094      	sub	sp, #80	@ 0x50
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b79      	ldr	r3, [pc, #484]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80e1 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e0db      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b73      	ldr	r3, [pc, #460]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d60:	e0db      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b73      	ldr	r3, [pc, #460]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d66:	e0d8      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b6d      	ldr	r3, [pc, #436]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d063      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	f04f 0000 	mov.w	r0, #0
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	0159      	lsls	r1, r3, #5
 8004da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dac:	0150      	lsls	r0, r2, #5
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4621      	mov	r1, r4
 8004db4:	1a51      	subs	r1, r2, r1
 8004db6:	6139      	str	r1, [r7, #16]
 8004db8:	4629      	mov	r1, r5
 8004dba:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dcc:	4659      	mov	r1, fp
 8004dce:	018b      	lsls	r3, r1, #6
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	018a      	lsls	r2, r1, #6
 8004dda:	4651      	mov	r1, sl
 8004ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8004de0:	4659      	mov	r1, fp
 8004de2:	eb63 0901 	sbc.w	r9, r3, r1
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfa:	4690      	mov	r8, r2
 8004dfc:	4699      	mov	r9, r3
 8004dfe:	4623      	mov	r3, r4
 8004e00:	eb18 0303 	adds.w	r3, r8, r3
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	462b      	mov	r3, r5
 8004e08:	eb49 0303 	adc.w	r3, r9, r3
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	024b      	lsls	r3, r1, #9
 8004e1e:	4621      	mov	r1, r4
 8004e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e24:	4621      	mov	r1, r4
 8004e26:	024a      	lsls	r2, r1, #9
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e2e:	2200      	movs	r2, #0
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e38:	f7fb ff3e 	bl	8000cb8 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e44:	e058      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e46:	4b38      	ldr	r3, [pc, #224]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	4611      	mov	r1, r2
 8004e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e56:	623b      	str	r3, [r7, #32]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	0159      	lsls	r1, r3, #5
 8004e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e72:	0150      	lsls	r0, r2, #5
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4641      	mov	r1, r8
 8004e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e7e:	4649      	mov	r1, r9
 8004e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e98:	ebb2 040a 	subs.w	r4, r2, sl
 8004e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	00eb      	lsls	r3, r5, #3
 8004eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eae:	00e2      	lsls	r2, r4, #3
 8004eb0:	4614      	mov	r4, r2
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	4643      	mov	r3, r8
 8004eb6:	18e3      	adds	r3, r4, r3
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	464b      	mov	r3, r9
 8004ebc:	eb45 0303 	adc.w	r3, r5, r3
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	028b      	lsls	r3, r1, #10
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed8:	4621      	mov	r1, r4
 8004eda:	028a      	lsls	r2, r1, #10
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	61fa      	str	r2, [r7, #28]
 8004ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eec:	f7fb fee4 	bl	8000cb8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3750      	adds	r7, #80	@ 0x50
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	007a1200 	.word	0x007a1200

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000004 	.word	0x20000004

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f50:	f7ff fff0 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0a9b      	lsrs	r3, r3, #10
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	0800b76c 	.word	0x0800b76c

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f78:	f7ff ffdc 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0b5b      	lsrs	r3, r3, #13
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	0800b76c 	.word	0x0800b76c

08004f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e041      	b.n	8005032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fd fc72 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fc3c 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e044      	b.n	80050de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1e      	ldr	r2, [pc, #120]	@ (80050ec <HAL_TIM_Base_Start_IT+0xb0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507e:	d013      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x6c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <HAL_TIM_Base_Start_IT+0xc0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d111      	bne.n	80050cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d010      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	e007      	b.n	80050dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f839 	bl	800519e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fb8a 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x24>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e022      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d109      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x3e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e015      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x58>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e008      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e068      	b.n	80052f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0x82>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005234:	e013      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0x92>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005244:	e00b      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005254:	e003      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fda8 	bl	8005dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_TIM_PWM_Start+0x14c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d107      	bne.n	8005286 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <HAL_TIM_PWM_Start+0x14c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005298:	d013      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_TIM_PWM_Start+0x150>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <HAL_TIM_PWM_Start+0x154>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_TIM_PWM_Start+0x158>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <HAL_TIM_PWM_Start+0x15c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d010      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	e007      	b.n	80052f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d020      	beq.n	8005378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01b      	beq.n	8005378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0202 	mvn.w	r2, #2
 8005348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa5b 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa4d 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fa5e 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0204 	mvn.w	r2, #4
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa35 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa27 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa38 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0208 	mvn.w	r2, #8
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa0f 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa01 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fa12 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d020      	beq.n	800545c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0210 	mvn.w	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9e9 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f9db 	bl	8005806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f9ec 	bl	800582e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0201 	mvn.w	r2, #1
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd f8a0 	bl	80025c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00c      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fd2a 	bl	8005ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9bd 	bl	8005842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00c      	beq.n	80054ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0220 	mvn.w	r2, #32
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fcfc 	bl	8005ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ae      	b.n	8005670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	f200 809f 	bhi.w	8005660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005661 	.word	0x08005661
 8005530:	08005661 	.word	0x08005661
 8005534:	08005661 	.word	0x08005661
 8005538:	0800559d 	.word	0x0800559d
 800553c:	08005661 	.word	0x08005661
 8005540:	08005661 	.word	0x08005661
 8005544:	08005661 	.word	0x08005661
 8005548:	080055df 	.word	0x080055df
 800554c:	08005661 	.word	0x08005661
 8005550:	08005661 	.word	0x08005661
 8005554:	08005661 	.word	0x08005661
 8005558:	0800561f 	.word	0x0800561f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa04 	bl	8005970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0208 	orr.w	r2, r2, #8
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	619a      	str	r2, [r3, #24]
      break;
 800559a:	e064      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fa4a 	bl	8005a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
      break;
 80055dc:	e043      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fa95 	bl	8005b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0208 	orr.w	r2, r2, #8
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0204 	bic.w	r2, r2, #4
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	61da      	str	r2, [r3, #28]
      break;
 800561c:	e023      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fadf 	bl	8005be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	61da      	str	r2, [r3, #28]
      break;
 800565e:	e002      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	75fb      	strb	r3, [r7, #23]
      break;
 8005664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIM_ConfigClockSource+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e0b4      	b.n	80057fe <HAL_TIM_ConfigClockSource+0x186>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d03e      	beq.n	800574c <HAL_TIM_ConfigClockSource+0xd4>
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d2:	f200 8087 	bhi.w	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	f000 8086 	beq.w	80057ea <HAL_TIM_ConfigClockSource+0x172>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d87f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b70      	cmp	r3, #112	@ 0x70
 80056e6:	d01a      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xa6>
 80056e8:	2b70      	cmp	r3, #112	@ 0x70
 80056ea:	d87b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b60      	cmp	r3, #96	@ 0x60
 80056ee:	d050      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x11a>
 80056f0:	2b60      	cmp	r3, #96	@ 0x60
 80056f2:	d877      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b50      	cmp	r3, #80	@ 0x50
 80056f6:	d03c      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xfa>
 80056f8:	2b50      	cmp	r3, #80	@ 0x50
 80056fa:	d873      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d058      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d86f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b30      	cmp	r3, #48	@ 0x30
 8005706:	d064      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d86b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d060      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d867      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d05a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	e062      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	f000 fb25 	bl	8005d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
      break;
 800574a:	e04f      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	f000 fb0e 	bl	8005d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800576e:	609a      	str	r2, [r3, #8]
      break;
 8005770:	e03c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 fa82 	bl	8005c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2150      	movs	r1, #80	@ 0x50
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fadb 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005790:	e02c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 faa1 	bl	8005ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2160      	movs	r1, #96	@ 0x60
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 facb 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80057b0:	e01c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 fa62 	bl	8005c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2140      	movs	r1, #64	@ 0x40
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fabb 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e00c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 fab2 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80057e2:	e003      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3a      	ldr	r2, [pc, #232]	@ (8005954 <TIM_Base_SetConfig+0xfc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a37      	ldr	r2, [pc, #220]	@ (8005958 <TIM_Base_SetConfig+0x100>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a36      	ldr	r2, [pc, #216]	@ (800595c <TIM_Base_SetConfig+0x104>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a35      	ldr	r2, [pc, #212]	@ (8005960 <TIM_Base_SetConfig+0x108>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005954 <TIM_Base_SetConfig+0xfc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	@ (8005958 <TIM_Base_SetConfig+0x100>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	@ (800595c <TIM_Base_SetConfig+0x104>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	@ (8005960 <TIM_Base_SetConfig+0x108>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a25      	ldr	r2, [pc, #148]	@ (8005964 <TIM_Base_SetConfig+0x10c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	@ (8005968 <TIM_Base_SetConfig+0x110>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	@ (800596c <TIM_Base_SetConfig+0x114>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0e      	ldr	r2, [pc, #56]	@ (8005954 <TIM_Base_SetConfig+0xfc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]
  }
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0201 	bic.w	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0302 	bic.w	r3, r3, #2
 80059b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <TIM_OC1_SetConfig+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40010000 	.word	0x40010000

08005a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1e      	ldr	r2, [pc, #120]	@ (8005b10 <TIM_OC2_SetConfig+0xd4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10d      	bne.n	8005ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a15      	ldr	r2, [pc, #84]	@ (8005b10 <TIM_OC2_SetConfig+0xd4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000

08005b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <TIM_OC3_SetConfig+0xd0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10d      	bne.n	8005b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <TIM_OC3_SetConfig+0xd0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d113      	bne.n	8005bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	40010000 	.word	0x40010000

08005be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	031b      	lsls	r3, r3, #12
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a10      	ldr	r2, [pc, #64]	@ (8005c84 <TIM_OC4_SetConfig+0x9c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d109      	bne.n	8005c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	019b      	lsls	r3, r3, #6
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000

08005c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 030a 	bic.w	r3, r3, #10
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 0210 	bic.w	r2, r3, #16
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f043 0307 	orr.w	r3, r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e050      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6c:	d013      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a18      	ldr	r2, [pc, #96]	@ (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a13      	ldr	r2, [pc, #76]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e042      	b.n	8005fa4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc fd3c 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	@ 0x24
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fdbd 	bl	8006ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d175      	bne.n	80060b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_UART_Transmit+0x2c>
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e06e      	b.n	80060ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2221      	movs	r2, #33	@ 0x21
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fea:	f7fc ff25 	bl	8002e38 <HAL_GetTick>
 8005fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006004:	d108      	bne.n	8006018 <HAL_UART_Transmit+0x6c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e003      	b.n	8006020 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006020:	e02e      	b.n	8006080 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	2180      	movs	r1, #128	@ 0x80
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fb1f 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e03a      	b.n	80060ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3302      	adds	r3, #2
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	e007      	b.n	8006072 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3301      	adds	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1cb      	bne.n	8006022 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2200      	movs	r2, #0
 8006092:	2140      	movs	r1, #64	@ 0x40
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 faeb 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e006      	b.n	80060ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d112      	bne.n	8006102 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_UART_Receive_IT+0x26>
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e00b      	b.n	8006104 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fb12 	bl	8006722 <UART_Start_Receive_IT>
 80060fe:	4603      	mov	r3, r0
 8006100:	e000      	b.n	8006104 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b0ba      	sub	sp, #232	@ 0xe8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006132:	2300      	movs	r3, #0
 8006134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006138:	2300      	movs	r3, #0
 800613a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800614a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10f      	bne.n	8006172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <HAL_UART_IRQHandler+0x66>
 800615e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fbf2 	bl	8006954 <UART_Receive_IT>
      return;
 8006170:	e25b      	b.n	800662a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80de 	beq.w	8006338 <HAL_UART_IRQHandler+0x22c>
 800617c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80d1 	beq.w	8006338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <HAL_UART_IRQHandler+0xae>
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <HAL_UART_IRQHandler+0xd2>
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f043 0202 	orr.w	r2, r3, #2
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <HAL_UART_IRQHandler+0xf6>
 80061ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fa:	f043 0204 	orr.w	r2, r3, #4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d011      	beq.n	8006232 <HAL_UART_IRQHandler+0x126>
 800620e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d105      	bne.n	8006226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800621a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	f043 0208 	orr.w	r2, r3, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 81f2 	beq.w	8006620 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_UART_IRQHandler+0x14e>
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb7d 	bl	8006954 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	bf0c      	ite	eq
 8006268:	2301      	moveq	r3, #1
 800626a:	2300      	movne	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d103      	bne.n	8006286 <HAL_UART_IRQHandler+0x17a>
 800627e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d04f      	beq.n	8006326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa85 	bl	8006796 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006296:	2b40      	cmp	r3, #64	@ 0x40
 8006298:	d141      	bne.n	800631e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d9      	bne.n	800629a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d013      	beq.n	8006316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	4a7e      	ldr	r2, [pc, #504]	@ (80064ec <HAL_UART_IRQHandler+0x3e0>)
 80062f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fd fb3f 	bl	800397e <HAL_DMA_Abort_IT>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006310:	4610      	mov	r0, r2
 8006312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	e00e      	b.n	8006334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f994 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	e00a      	b.n	8006334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f990 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006324:	e006      	b.n	8006334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f98c 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006332:	e175      	b.n	8006620 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	bf00      	nop
    return;
 8006336:	e173      	b.n	8006620 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	f040 814f 	bne.w	80065e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8148 	beq.w	80065e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8141 	beq.w	80065e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637e:	2b40      	cmp	r3, #64	@ 0x40
 8006380:	f040 80b6 	bne.w	80064f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8145 	beq.w	8006624 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800639e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063a2:	429a      	cmp	r2, r3
 80063a4:	f080 813e 	bcs.w	8006624 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ba:	f000 8088 	beq.w	80064ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d9      	bne.n	80063be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800641a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3314      	adds	r3, #20
 800642a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800642e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e1      	bne.n	800640a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800646a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800646c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e3      	bne.n	8006446 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800649c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649e:	f023 0310 	bic.w	r3, r3, #16
 80064a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e3      	bne.n	800648c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fd f9e8 	bl	800389e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8b7 	bl	8006658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064ea:	e09b      	b.n	8006624 <HAL_UART_IRQHandler+0x518>
 80064ec:	0800685d 	.word	0x0800685d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 808e 	beq.w	8006628 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800650c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8089 	beq.w	8006628 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800652c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800653a:	647a      	str	r2, [r7, #68]	@ 0x44
 800653c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e3      	bne.n	8006516 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	623b      	str	r3, [r7, #32]
   return(result);
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006572:	633a      	str	r2, [r7, #48]	@ 0x30
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e3      	bne.n	800654e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0310 	bic.w	r3, r3, #16
 80065aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065b8:	61fa      	str	r2, [r7, #28]
 80065ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	69b9      	ldr	r1, [r7, #24]
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	617b      	str	r3, [r7, #20]
   return(result);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e3      	bne.n	8006594 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f83d 	bl	8006658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065de:	e023      	b.n	8006628 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_UART_IRQHandler+0x4f4>
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f943 	bl	8006884 <UART_Transmit_IT>
    return;
 80065fe:	e014      	b.n	800662a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <HAL_UART_IRQHandler+0x51e>
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f983 	bl	8006924 <UART_EndTransmit_IT>
    return;
 800661e:	e004      	b.n	800662a <HAL_UART_IRQHandler+0x51e>
    return;
 8006620:	bf00      	nop
 8006622:	e002      	b.n	800662a <HAL_UART_IRQHandler+0x51e>
      return;
 8006624:	bf00      	nop
 8006626:	e000      	b.n	800662a <HAL_UART_IRQHandler+0x51e>
      return;
 8006628:	bf00      	nop
  }
}
 800662a:	37e8      	adds	r7, #232	@ 0xe8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006680:	e03b      	b.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d037      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fc fbd5 	bl	8002e38 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e03a      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d023      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b80      	cmp	r3, #128	@ 0x80
 80066b6:	d020      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b40      	cmp	r3, #64	@ 0x40
 80066bc:	d01d      	beq.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d116      	bne.n	80066fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f857 	bl	8006796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2208      	movs	r2, #8
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e00f      	b.n	800671a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	429a      	cmp	r2, r3
 8006716:	d0b4      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	4613      	mov	r3, r2
 800672e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2222      	movs	r2, #34	@ 0x22
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006766:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0220 	orr.w	r2, r2, #32
 8006786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006796:	b480      	push	{r7}
 8006798:	b095      	sub	sp, #84	@ 0x54
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067be:	643a      	str	r2, [r7, #64]	@ 0x40
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680a:	2b01      	cmp	r3, #1
 800680c:	d119      	bne.n	8006842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	60bb      	str	r3, [r7, #8]
   return(result);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f023 0310 	bic.w	r3, r3, #16
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800682e:	61ba      	str	r2, [r7, #24]
 8006830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	613b      	str	r3, [r7, #16]
   return(result);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006850:	bf00      	nop
 8006852:	3754      	adds	r7, #84	@ 0x54
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fee4 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b21      	cmp	r3, #33	@ 0x21
 8006896:	d13e      	bne.n	8006916 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a0:	d114      	bne.n	80068cc <UART_Transmit_IT+0x48>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d110      	bne.n	80068cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]
 80068ca:	e008      	b.n	80068de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	1c59      	adds	r1, r3, #1
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6211      	str	r1, [r2, #32]
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4619      	mov	r1, r3
 80068ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10f      	bne.n	8006912 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006900:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006910:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006916:	2302      	movs	r3, #2
  }
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff fe73 	bl	8006630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	@ 0x30
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b22      	cmp	r3, #34	@ 0x22
 8006966:	f040 80ae 	bne.w	8006ac6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006972:	d117      	bne.n	80069a4 <UART_Receive_IT+0x50>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d113      	bne.n	80069a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006992:	b29a      	uxth	r2, r3
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80069a2:	e026      	b.n	80069f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b6:	d007      	beq.n	80069c8 <UART_Receive_IT+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10a      	bne.n	80069d6 <UART_Receive_IT+0x82>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e008      	b.n	80069e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4619      	mov	r1, r3
 8006a00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d15d      	bne.n	8006ac2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0220 	bic.w	r2, r2, #32
 8006a14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68da      	ldr	r2, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d135      	bne.n	8006ab8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	613b      	str	r3, [r7, #16]
   return(result);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	623a      	str	r2, [r7, #32]
 8006a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69f9      	ldr	r1, [r7, #28]
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d10a      	bne.n	8006aaa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fdd1 	bl	8006658 <HAL_UARTEx_RxEventCallback>
 8006ab6:	e002      	b.n	8006abe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fa ff47 	bl	800194c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e002      	b.n	8006ac8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e000      	b.n	8006ac8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3730      	adds	r7, #48	@ 0x30
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad4:	b0c0      	sub	sp, #256	@ 0x100
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	68d9      	ldr	r1, [r3, #12]
 8006aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	ea40 0301 	orr.w	r3, r0, r1
 8006af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b28:	f021 010c 	bic.w	r1, r1, #12
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b36:	430b      	orrs	r3, r1
 8006b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4a:	6999      	ldr	r1, [r3, #24]
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	ea40 0301 	orr.w	r3, r0, r1
 8006b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8006d9c <UART_SetConfig+0x2cc>)
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d005      	beq.n	8006b70 <UART_SetConfig+0xa0>
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8006da0 <UART_SetConfig+0x2d0>)
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d104      	bne.n	8006b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b70:	f7fe fa00 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8006b74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b78:	e003      	b.n	8006b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b7a:	f7fe f9e7 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b8c:	f040 810c 	bne.w	8006da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	1891      	adds	r1, r2, r2
 8006ba8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006baa:	415b      	adcs	r3, r3
 8006bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	eb12 0801 	adds.w	r8, r2, r1
 8006bb8:	4629      	mov	r1, r5
 8006bba:	eb43 0901 	adc.w	r9, r3, r1
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	4623      	mov	r3, r4
 8006bd8:	eb18 0303 	adds.w	r3, r8, r3
 8006bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006be0:	462b      	mov	r3, r5
 8006be2:	eb49 0303 	adc.w	r3, r9, r3
 8006be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bfe:	460b      	mov	r3, r1
 8006c00:	18db      	adds	r3, r3, r3
 8006c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c04:	4613      	mov	r3, r2
 8006c06:	eb42 0303 	adc.w	r3, r2, r3
 8006c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c14:	f7fa f850 	bl	8000cb8 <__aeabi_uldivmod>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4b61      	ldr	r3, [pc, #388]	@ (8006da4 <UART_SetConfig+0x2d4>)
 8006c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	011c      	lsls	r4, r3, #4
 8006c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	1891      	adds	r1, r2, r2
 8006c3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c40:	415b      	adcs	r3, r3
 8006c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c48:	4641      	mov	r1, r8
 8006c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c4e:	4649      	mov	r1, r9
 8006c50:	eb43 0b01 	adc.w	fp, r3, r1
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c68:	4692      	mov	sl, r2
 8006c6a:	469b      	mov	fp, r3
 8006c6c:	4643      	mov	r3, r8
 8006c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c76:	464b      	mov	r3, r9
 8006c78:	eb4b 0303 	adc.w	r3, fp, r3
 8006c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c94:	460b      	mov	r3, r1
 8006c96:	18db      	adds	r3, r3, r3
 8006c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006caa:	f7fa f805 	bl	8000cb8 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006da4 <UART_SetConfig+0x2d4>)
 8006cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	2264      	movs	r2, #100	@ 0x64
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	1acb      	subs	r3, r1, r3
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cca:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <UART_SetConfig+0x2d4>)
 8006ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cd8:	441c      	add	r4, r3
 8006cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	1851      	adds	r1, r2, r1
 8006d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d02:	4649      	mov	r1, r9
 8006d04:	414b      	adcs	r3, r1
 8006d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d14:	4659      	mov	r1, fp
 8006d16:	00cb      	lsls	r3, r1, #3
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d1e:	4651      	mov	r1, sl
 8006d20:	00ca      	lsls	r2, r1, #3
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	4642      	mov	r2, r8
 8006d2a:	189b      	adds	r3, r3, r2
 8006d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d30:	464b      	mov	r3, r9
 8006d32:	460a      	mov	r2, r1
 8006d34:	eb42 0303 	adc.w	r3, r2, r3
 8006d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d50:	460b      	mov	r3, r1
 8006d52:	18db      	adds	r3, r3, r3
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d56:	4613      	mov	r3, r2
 8006d58:	eb42 0303 	adc.w	r3, r2, r3
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d66:	f7f9 ffa7 	bl	8000cb8 <__aeabi_uldivmod>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <UART_SetConfig+0x2d4>)
 8006d70:	fba3 1302 	umull	r1, r3, r3, r2
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	2164      	movs	r1, #100	@ 0x64
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	3332      	adds	r3, #50	@ 0x32
 8006d82:	4a08      	ldr	r2, [pc, #32]	@ (8006da4 <UART_SetConfig+0x2d4>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	f003 0207 	and.w	r2, r3, #7
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4422      	add	r2, r4
 8006d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d98:	e106      	b.n	8006fa8 <UART_SetConfig+0x4d8>
 8006d9a:	bf00      	nop
 8006d9c:	40011000 	.word	0x40011000
 8006da0:	40011400 	.word	0x40011400
 8006da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006db2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dba:	4642      	mov	r2, r8
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	6239      	str	r1, [r7, #32]
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dca:	4641      	mov	r1, r8
 8006dcc:	1854      	adds	r4, r2, r1
 8006dce:	4649      	mov	r1, r9
 8006dd0:	eb43 0501 	adc.w	r5, r3, r1
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	00eb      	lsls	r3, r5, #3
 8006dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de2:	00e2      	lsls	r2, r4, #3
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	4643      	mov	r3, r8
 8006dea:	18e3      	adds	r3, r4, r3
 8006dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006df0:	464b      	mov	r3, r9
 8006df2:	eb45 0303 	adc.w	r3, r5, r3
 8006df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e16:	4629      	mov	r1, r5
 8006e18:	008b      	lsls	r3, r1, #2
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e20:	4621      	mov	r1, r4
 8006e22:	008a      	lsls	r2, r1, #2
 8006e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e28:	f7f9 ff46 	bl	8000cb8 <__aeabi_uldivmod>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4b60      	ldr	r3, [pc, #384]	@ (8006fb4 <UART_SetConfig+0x4e4>)
 8006e32:	fba3 2302 	umull	r2, r3, r3, r2
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	011c      	lsls	r4, r3, #4
 8006e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	1891      	adds	r1, r2, r2
 8006e52:	61b9      	str	r1, [r7, #24]
 8006e54:	415b      	adcs	r3, r3
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	1851      	adds	r1, r2, r1
 8006e60:	6139      	str	r1, [r7, #16]
 8006e62:	4649      	mov	r1, r9
 8006e64:	414b      	adcs	r3, r1
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e74:	4659      	mov	r1, fp
 8006e76:	00cb      	lsls	r3, r1, #3
 8006e78:	4651      	mov	r1, sl
 8006e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e7e:	4651      	mov	r1, sl
 8006e80:	00ca      	lsls	r2, r1, #3
 8006e82:	4610      	mov	r0, r2
 8006e84:	4619      	mov	r1, r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	4642      	mov	r2, r8
 8006e8a:	189b      	adds	r3, r3, r2
 8006e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e90:	464b      	mov	r3, r9
 8006e92:	460a      	mov	r2, r1
 8006e94:	eb42 0303 	adc.w	r3, r2, r3
 8006e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	008b      	lsls	r3, r1, #2
 8006eb8:	4641      	mov	r1, r8
 8006eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	008a      	lsls	r2, r1, #2
 8006ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ec6:	f7f9 fef7 	bl	8000cb8 <__aeabi_uldivmod>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4b38      	ldr	r3, [pc, #224]	@ (8006fb4 <UART_SetConfig+0x4e4>)
 8006ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	2264      	movs	r2, #100	@ 0x64
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
 8006ede:	1acb      	subs	r3, r1, r3
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	3332      	adds	r3, #50	@ 0x32
 8006ee4:	4a33      	ldr	r2, [pc, #204]	@ (8006fb4 <UART_SetConfig+0x4e4>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ef0:	441c      	add	r4, r3
 8006ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006efa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	1891      	adds	r1, r2, r2
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	415b      	adcs	r3, r3
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f10:	4641      	mov	r1, r8
 8006f12:	1851      	adds	r1, r2, r1
 8006f14:	6039      	str	r1, [r7, #0]
 8006f16:	4649      	mov	r1, r9
 8006f18:	414b      	adcs	r3, r1
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f28:	4659      	mov	r1, fp
 8006f2a:	00cb      	lsls	r3, r1, #3
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f32:	4651      	mov	r1, sl
 8006f34:	00ca      	lsls	r2, r1, #3
 8006f36:	4610      	mov	r0, r2
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f42:	464b      	mov	r3, r9
 8006f44:	460a      	mov	r2, r1
 8006f46:	eb42 0303 	adc.w	r3, r2, r3
 8006f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f56:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f64:	4649      	mov	r1, r9
 8006f66:	008b      	lsls	r3, r1, #2
 8006f68:	4641      	mov	r1, r8
 8006f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f6e:	4641      	mov	r1, r8
 8006f70:	008a      	lsls	r2, r1, #2
 8006f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f76:	f7f9 fe9f 	bl	8000cb8 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <UART_SetConfig+0x4e4>)
 8006f80:	fba3 1302 	umull	r1, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	2164      	movs	r1, #100	@ 0x64
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	3332      	adds	r3, #50	@ 0x32
 8006f92:	4a08      	ldr	r2, [pc, #32]	@ (8006fb4 <UART_SetConfig+0x4e4>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4422      	add	r2, r4
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb4:	51eb851f 	.word	0x51eb851f

08006fb8 <atof>:
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f000 be05 	b.w	8007bc8 <strtod>

08006fbe <sulp>:
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	ec45 4b10 	vmov	d0, r4, r5
 8006fc8:	4616      	mov	r6, r2
 8006fca:	f003 fbf1 	bl	800a7b0 <__ulp>
 8006fce:	ec51 0b10 	vmov	r0, r1, d0
 8006fd2:	b17e      	cbz	r6, 8006ff4 <sulp+0x36>
 8006fd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd09      	ble.n	8006ff4 <sulp+0x36>
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006fe6:	2400      	movs	r4, #0
 8006fe8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fb1a 	bl	8000628 <__aeabi_dmul>
 8006ff4:	ec41 0b10 	vmov	d0, r0, r1
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	0000      	movs	r0, r0
 8006ffc:	0000      	movs	r0, r0
	...

08007000 <_strtod_l>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	b09f      	sub	sp, #124	@ 0x7c
 8007006:	460c      	mov	r4, r1
 8007008:	9217      	str	r2, [sp, #92]	@ 0x5c
 800700a:	2200      	movs	r2, #0
 800700c:	921a      	str	r2, [sp, #104]	@ 0x68
 800700e:	9005      	str	r0, [sp, #20]
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	f04f 0b00 	mov.w	fp, #0
 8007018:	460a      	mov	r2, r1
 800701a:	9219      	str	r2, [sp, #100]	@ 0x64
 800701c:	7811      	ldrb	r1, [r2, #0]
 800701e:	292b      	cmp	r1, #43	@ 0x2b
 8007020:	d04a      	beq.n	80070b8 <_strtod_l+0xb8>
 8007022:	d838      	bhi.n	8007096 <_strtod_l+0x96>
 8007024:	290d      	cmp	r1, #13
 8007026:	d832      	bhi.n	800708e <_strtod_l+0x8e>
 8007028:	2908      	cmp	r1, #8
 800702a:	d832      	bhi.n	8007092 <_strtod_l+0x92>
 800702c:	2900      	cmp	r1, #0
 800702e:	d03b      	beq.n	80070a8 <_strtod_l+0xa8>
 8007030:	2200      	movs	r2, #0
 8007032:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007034:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007036:	782a      	ldrb	r2, [r5, #0]
 8007038:	2a30      	cmp	r2, #48	@ 0x30
 800703a:	f040 80b3 	bne.w	80071a4 <_strtod_l+0x1a4>
 800703e:	786a      	ldrb	r2, [r5, #1]
 8007040:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007044:	2a58      	cmp	r2, #88	@ 0x58
 8007046:	d16e      	bne.n	8007126 <_strtod_l+0x126>
 8007048:	9302      	str	r3, [sp, #8]
 800704a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	4a8e      	ldr	r2, [pc, #568]	@ (800728c <_strtod_l+0x28c>)
 8007054:	9805      	ldr	r0, [sp, #20]
 8007056:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007058:	a919      	add	r1, sp, #100	@ 0x64
 800705a:	f002 fc9b 	bl	8009994 <__gethex>
 800705e:	f010 060f 	ands.w	r6, r0, #15
 8007062:	4604      	mov	r4, r0
 8007064:	d005      	beq.n	8007072 <_strtod_l+0x72>
 8007066:	2e06      	cmp	r6, #6
 8007068:	d128      	bne.n	80070bc <_strtod_l+0xbc>
 800706a:	3501      	adds	r5, #1
 800706c:	2300      	movs	r3, #0
 800706e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 858e 	bne.w	8007b96 <_strtod_l+0xb96>
 800707a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800707c:	b1cb      	cbz	r3, 80070b2 <_strtod_l+0xb2>
 800707e:	4652      	mov	r2, sl
 8007080:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007084:	ec43 2b10 	vmov	d0, r2, r3
 8007088:	b01f      	add	sp, #124	@ 0x7c
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	2920      	cmp	r1, #32
 8007090:	d1ce      	bne.n	8007030 <_strtod_l+0x30>
 8007092:	3201      	adds	r2, #1
 8007094:	e7c1      	b.n	800701a <_strtod_l+0x1a>
 8007096:	292d      	cmp	r1, #45	@ 0x2d
 8007098:	d1ca      	bne.n	8007030 <_strtod_l+0x30>
 800709a:	2101      	movs	r1, #1
 800709c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800709e:	1c51      	adds	r1, r2, #1
 80070a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80070a2:	7852      	ldrb	r2, [r2, #1]
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	d1c5      	bne.n	8007034 <_strtod_l+0x34>
 80070a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8570 	bne.w	8007b92 <_strtod_l+0xb92>
 80070b2:	4652      	mov	r2, sl
 80070b4:	465b      	mov	r3, fp
 80070b6:	e7e5      	b.n	8007084 <_strtod_l+0x84>
 80070b8:	2100      	movs	r1, #0
 80070ba:	e7ef      	b.n	800709c <_strtod_l+0x9c>
 80070bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80070be:	b13a      	cbz	r2, 80070d0 <_strtod_l+0xd0>
 80070c0:	2135      	movs	r1, #53	@ 0x35
 80070c2:	a81c      	add	r0, sp, #112	@ 0x70
 80070c4:	f003 fc6e 	bl	800a9a4 <__copybits>
 80070c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070ca:	9805      	ldr	r0, [sp, #20]
 80070cc:	f003 f83c 	bl	800a148 <_Bfree>
 80070d0:	3e01      	subs	r6, #1
 80070d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80070d4:	2e04      	cmp	r6, #4
 80070d6:	d806      	bhi.n	80070e6 <_strtod_l+0xe6>
 80070d8:	e8df f006 	tbb	[pc, r6]
 80070dc:	201d0314 	.word	0x201d0314
 80070e0:	14          	.byte	0x14
 80070e1:	00          	.byte	0x00
 80070e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80070e6:	05e1      	lsls	r1, r4, #23
 80070e8:	bf48      	it	mi
 80070ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80070ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070f2:	0d1b      	lsrs	r3, r3, #20
 80070f4:	051b      	lsls	r3, r3, #20
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1bb      	bne.n	8007072 <_strtod_l+0x72>
 80070fa:	f001 fcdf 	bl	8008abc <__errno>
 80070fe:	2322      	movs	r3, #34	@ 0x22
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	e7b6      	b.n	8007072 <_strtod_l+0x72>
 8007104:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007108:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800710c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007110:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007114:	e7e7      	b.n	80070e6 <_strtod_l+0xe6>
 8007116:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007294 <_strtod_l+0x294>
 800711a:	e7e4      	b.n	80070e6 <_strtod_l+0xe6>
 800711c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007120:	f04f 3aff 	mov.w	sl, #4294967295
 8007124:	e7df      	b.n	80070e6 <_strtod_l+0xe6>
 8007126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	9219      	str	r2, [sp, #100]	@ 0x64
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b30      	cmp	r3, #48	@ 0x30
 8007130:	d0f9      	beq.n	8007126 <_strtod_l+0x126>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d09d      	beq.n	8007072 <_strtod_l+0x72>
 8007136:	2301      	movs	r3, #1
 8007138:	9309      	str	r3, [sp, #36]	@ 0x24
 800713a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800713c:	930c      	str	r3, [sp, #48]	@ 0x30
 800713e:	2300      	movs	r3, #0
 8007140:	9308      	str	r3, [sp, #32]
 8007142:	930a      	str	r3, [sp, #40]	@ 0x28
 8007144:	461f      	mov	r7, r3
 8007146:	220a      	movs	r2, #10
 8007148:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800714a:	7805      	ldrb	r5, [r0, #0]
 800714c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007150:	b2d9      	uxtb	r1, r3
 8007152:	2909      	cmp	r1, #9
 8007154:	d928      	bls.n	80071a8 <_strtod_l+0x1a8>
 8007156:	494e      	ldr	r1, [pc, #312]	@ (8007290 <_strtod_l+0x290>)
 8007158:	2201      	movs	r2, #1
 800715a:	f001 fbe0 	bl	800891e <strncmp>
 800715e:	2800      	cmp	r0, #0
 8007160:	d032      	beq.n	80071c8 <_strtod_l+0x1c8>
 8007162:	2000      	movs	r0, #0
 8007164:	462a      	mov	r2, r5
 8007166:	4681      	mov	r9, r0
 8007168:	463d      	mov	r5, r7
 800716a:	4603      	mov	r3, r0
 800716c:	2a65      	cmp	r2, #101	@ 0x65
 800716e:	d001      	beq.n	8007174 <_strtod_l+0x174>
 8007170:	2a45      	cmp	r2, #69	@ 0x45
 8007172:	d114      	bne.n	800719e <_strtod_l+0x19e>
 8007174:	b91d      	cbnz	r5, 800717e <_strtod_l+0x17e>
 8007176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007178:	4302      	orrs	r2, r0
 800717a:	d095      	beq.n	80070a8 <_strtod_l+0xa8>
 800717c:	2500      	movs	r5, #0
 800717e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007180:	1c62      	adds	r2, r4, #1
 8007182:	9219      	str	r2, [sp, #100]	@ 0x64
 8007184:	7862      	ldrb	r2, [r4, #1]
 8007186:	2a2b      	cmp	r2, #43	@ 0x2b
 8007188:	d077      	beq.n	800727a <_strtod_l+0x27a>
 800718a:	2a2d      	cmp	r2, #45	@ 0x2d
 800718c:	d07b      	beq.n	8007286 <_strtod_l+0x286>
 800718e:	f04f 0c00 	mov.w	ip, #0
 8007192:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007196:	2909      	cmp	r1, #9
 8007198:	f240 8082 	bls.w	80072a0 <_strtod_l+0x2a0>
 800719c:	9419      	str	r4, [sp, #100]	@ 0x64
 800719e:	f04f 0800 	mov.w	r8, #0
 80071a2:	e0a2      	b.n	80072ea <_strtod_l+0x2ea>
 80071a4:	2300      	movs	r3, #0
 80071a6:	e7c7      	b.n	8007138 <_strtod_l+0x138>
 80071a8:	2f08      	cmp	r7, #8
 80071aa:	bfd5      	itete	le
 80071ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80071ae:	9908      	ldrgt	r1, [sp, #32]
 80071b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80071b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071b8:	f100 0001 	add.w	r0, r0, #1
 80071bc:	bfd4      	ite	le
 80071be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80071c0:	9308      	strgt	r3, [sp, #32]
 80071c2:	3701      	adds	r7, #1
 80071c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80071c6:	e7bf      	b.n	8007148 <_strtod_l+0x148>
 80071c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80071ce:	785a      	ldrb	r2, [r3, #1]
 80071d0:	b37f      	cbz	r7, 8007232 <_strtod_l+0x232>
 80071d2:	4681      	mov	r9, r0
 80071d4:	463d      	mov	r5, r7
 80071d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80071da:	2b09      	cmp	r3, #9
 80071dc:	d912      	bls.n	8007204 <_strtod_l+0x204>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7c4      	b.n	800716c <_strtod_l+0x16c>
 80071e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80071e8:	785a      	ldrb	r2, [r3, #1]
 80071ea:	3001      	adds	r0, #1
 80071ec:	2a30      	cmp	r2, #48	@ 0x30
 80071ee:	d0f8      	beq.n	80071e2 <_strtod_l+0x1e2>
 80071f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	f200 84d3 	bhi.w	8007ba0 <_strtod_l+0xba0>
 80071fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80071fe:	4681      	mov	r9, r0
 8007200:	2000      	movs	r0, #0
 8007202:	4605      	mov	r5, r0
 8007204:	3a30      	subs	r2, #48	@ 0x30
 8007206:	f100 0301 	add.w	r3, r0, #1
 800720a:	d02a      	beq.n	8007262 <_strtod_l+0x262>
 800720c:	4499      	add	r9, r3
 800720e:	eb00 0c05 	add.w	ip, r0, r5
 8007212:	462b      	mov	r3, r5
 8007214:	210a      	movs	r1, #10
 8007216:	4563      	cmp	r3, ip
 8007218:	d10d      	bne.n	8007236 <_strtod_l+0x236>
 800721a:	1c69      	adds	r1, r5, #1
 800721c:	4401      	add	r1, r0
 800721e:	4428      	add	r0, r5
 8007220:	2808      	cmp	r0, #8
 8007222:	dc16      	bgt.n	8007252 <_strtod_l+0x252>
 8007224:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007226:	230a      	movs	r3, #10
 8007228:	fb03 2300 	mla	r3, r3, r0, r2
 800722c:	930a      	str	r3, [sp, #40]	@ 0x28
 800722e:	2300      	movs	r3, #0
 8007230:	e018      	b.n	8007264 <_strtod_l+0x264>
 8007232:	4638      	mov	r0, r7
 8007234:	e7da      	b.n	80071ec <_strtod_l+0x1ec>
 8007236:	2b08      	cmp	r3, #8
 8007238:	f103 0301 	add.w	r3, r3, #1
 800723c:	dc03      	bgt.n	8007246 <_strtod_l+0x246>
 800723e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007240:	434e      	muls	r6, r1
 8007242:	960a      	str	r6, [sp, #40]	@ 0x28
 8007244:	e7e7      	b.n	8007216 <_strtod_l+0x216>
 8007246:	2b10      	cmp	r3, #16
 8007248:	bfde      	ittt	le
 800724a:	9e08      	ldrle	r6, [sp, #32]
 800724c:	434e      	mulle	r6, r1
 800724e:	9608      	strle	r6, [sp, #32]
 8007250:	e7e1      	b.n	8007216 <_strtod_l+0x216>
 8007252:	280f      	cmp	r0, #15
 8007254:	dceb      	bgt.n	800722e <_strtod_l+0x22e>
 8007256:	9808      	ldr	r0, [sp, #32]
 8007258:	230a      	movs	r3, #10
 800725a:	fb03 2300 	mla	r3, r3, r0, r2
 800725e:	9308      	str	r3, [sp, #32]
 8007260:	e7e5      	b.n	800722e <_strtod_l+0x22e>
 8007262:	4629      	mov	r1, r5
 8007264:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007266:	1c50      	adds	r0, r2, #1
 8007268:	9019      	str	r0, [sp, #100]	@ 0x64
 800726a:	7852      	ldrb	r2, [r2, #1]
 800726c:	4618      	mov	r0, r3
 800726e:	460d      	mov	r5, r1
 8007270:	e7b1      	b.n	80071d6 <_strtod_l+0x1d6>
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	2301      	movs	r3, #1
 8007278:	e77d      	b.n	8007176 <_strtod_l+0x176>
 800727a:	f04f 0c00 	mov.w	ip, #0
 800727e:	1ca2      	adds	r2, r4, #2
 8007280:	9219      	str	r2, [sp, #100]	@ 0x64
 8007282:	78a2      	ldrb	r2, [r4, #2]
 8007284:	e785      	b.n	8007192 <_strtod_l+0x192>
 8007286:	f04f 0c01 	mov.w	ip, #1
 800728a:	e7f8      	b.n	800727e <_strtod_l+0x27e>
 800728c:	0800b78c 	.word	0x0800b78c
 8007290:	0800b774 	.word	0x0800b774
 8007294:	7ff00000 	.word	0x7ff00000
 8007298:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800729a:	1c51      	adds	r1, r2, #1
 800729c:	9119      	str	r1, [sp, #100]	@ 0x64
 800729e:	7852      	ldrb	r2, [r2, #1]
 80072a0:	2a30      	cmp	r2, #48	@ 0x30
 80072a2:	d0f9      	beq.n	8007298 <_strtod_l+0x298>
 80072a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80072a8:	2908      	cmp	r1, #8
 80072aa:	f63f af78 	bhi.w	800719e <_strtod_l+0x19e>
 80072ae:	3a30      	subs	r2, #48	@ 0x30
 80072b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80072b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80072b6:	f04f 080a 	mov.w	r8, #10
 80072ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072bc:	1c56      	adds	r6, r2, #1
 80072be:	9619      	str	r6, [sp, #100]	@ 0x64
 80072c0:	7852      	ldrb	r2, [r2, #1]
 80072c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80072c6:	f1be 0f09 	cmp.w	lr, #9
 80072ca:	d939      	bls.n	8007340 <_strtod_l+0x340>
 80072cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80072ce:	1a76      	subs	r6, r6, r1
 80072d0:	2e08      	cmp	r6, #8
 80072d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80072d6:	dc03      	bgt.n	80072e0 <_strtod_l+0x2e0>
 80072d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80072da:	4588      	cmp	r8, r1
 80072dc:	bfa8      	it	ge
 80072de:	4688      	movge	r8, r1
 80072e0:	f1bc 0f00 	cmp.w	ip, #0
 80072e4:	d001      	beq.n	80072ea <_strtod_l+0x2ea>
 80072e6:	f1c8 0800 	rsb	r8, r8, #0
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	d14e      	bne.n	800738c <_strtod_l+0x38c>
 80072ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072f0:	4308      	orrs	r0, r1
 80072f2:	f47f aebe 	bne.w	8007072 <_strtod_l+0x72>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f47f aed6 	bne.w	80070a8 <_strtod_l+0xa8>
 80072fc:	2a69      	cmp	r2, #105	@ 0x69
 80072fe:	d028      	beq.n	8007352 <_strtod_l+0x352>
 8007300:	dc25      	bgt.n	800734e <_strtod_l+0x34e>
 8007302:	2a49      	cmp	r2, #73	@ 0x49
 8007304:	d025      	beq.n	8007352 <_strtod_l+0x352>
 8007306:	2a4e      	cmp	r2, #78	@ 0x4e
 8007308:	f47f aece 	bne.w	80070a8 <_strtod_l+0xa8>
 800730c:	499b      	ldr	r1, [pc, #620]	@ (800757c <_strtod_l+0x57c>)
 800730e:	a819      	add	r0, sp, #100	@ 0x64
 8007310:	f002 fd62 	bl	8009dd8 <__match>
 8007314:	2800      	cmp	r0, #0
 8007316:	f43f aec7 	beq.w	80070a8 <_strtod_l+0xa8>
 800731a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b28      	cmp	r3, #40	@ 0x28
 8007320:	d12e      	bne.n	8007380 <_strtod_l+0x380>
 8007322:	4997      	ldr	r1, [pc, #604]	@ (8007580 <_strtod_l+0x580>)
 8007324:	aa1c      	add	r2, sp, #112	@ 0x70
 8007326:	a819      	add	r0, sp, #100	@ 0x64
 8007328:	f002 fd6a 	bl	8009e00 <__hexnan>
 800732c:	2805      	cmp	r0, #5
 800732e:	d127      	bne.n	8007380 <_strtod_l+0x380>
 8007330:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007332:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007336:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800733a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800733e:	e698      	b.n	8007072 <_strtod_l+0x72>
 8007340:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007342:	fb08 2101 	mla	r1, r8, r1, r2
 8007346:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800734a:	920e      	str	r2, [sp, #56]	@ 0x38
 800734c:	e7b5      	b.n	80072ba <_strtod_l+0x2ba>
 800734e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007350:	e7da      	b.n	8007308 <_strtod_l+0x308>
 8007352:	498c      	ldr	r1, [pc, #560]	@ (8007584 <_strtod_l+0x584>)
 8007354:	a819      	add	r0, sp, #100	@ 0x64
 8007356:	f002 fd3f 	bl	8009dd8 <__match>
 800735a:	2800      	cmp	r0, #0
 800735c:	f43f aea4 	beq.w	80070a8 <_strtod_l+0xa8>
 8007360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007362:	4989      	ldr	r1, [pc, #548]	@ (8007588 <_strtod_l+0x588>)
 8007364:	3b01      	subs	r3, #1
 8007366:	a819      	add	r0, sp, #100	@ 0x64
 8007368:	9319      	str	r3, [sp, #100]	@ 0x64
 800736a:	f002 fd35 	bl	8009dd8 <__match>
 800736e:	b910      	cbnz	r0, 8007376 <_strtod_l+0x376>
 8007370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007372:	3301      	adds	r3, #1
 8007374:	9319      	str	r3, [sp, #100]	@ 0x64
 8007376:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007598 <_strtod_l+0x598>
 800737a:	f04f 0a00 	mov.w	sl, #0
 800737e:	e678      	b.n	8007072 <_strtod_l+0x72>
 8007380:	4882      	ldr	r0, [pc, #520]	@ (800758c <_strtod_l+0x58c>)
 8007382:	f001 fbe1 	bl	8008b48 <nan>
 8007386:	ec5b ab10 	vmov	sl, fp, d0
 800738a:	e672      	b.n	8007072 <_strtod_l+0x72>
 800738c:	eba8 0309 	sub.w	r3, r8, r9
 8007390:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007392:	9309      	str	r3, [sp, #36]	@ 0x24
 8007394:	2f00      	cmp	r7, #0
 8007396:	bf08      	it	eq
 8007398:	462f      	moveq	r7, r5
 800739a:	2d10      	cmp	r5, #16
 800739c:	462c      	mov	r4, r5
 800739e:	bfa8      	it	ge
 80073a0:	2410      	movge	r4, #16
 80073a2:	f7f9 f8c7 	bl	8000534 <__aeabi_ui2d>
 80073a6:	2d09      	cmp	r5, #9
 80073a8:	4682      	mov	sl, r0
 80073aa:	468b      	mov	fp, r1
 80073ac:	dc13      	bgt.n	80073d6 <_strtod_l+0x3d6>
 80073ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f43f ae5e 	beq.w	8007072 <_strtod_l+0x72>
 80073b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b8:	dd78      	ble.n	80074ac <_strtod_l+0x4ac>
 80073ba:	2b16      	cmp	r3, #22
 80073bc:	dc5f      	bgt.n	800747e <_strtod_l+0x47e>
 80073be:	4974      	ldr	r1, [pc, #464]	@ (8007590 <_strtod_l+0x590>)
 80073c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c8:	4652      	mov	r2, sl
 80073ca:	465b      	mov	r3, fp
 80073cc:	f7f9 f92c 	bl	8000628 <__aeabi_dmul>
 80073d0:	4682      	mov	sl, r0
 80073d2:	468b      	mov	fp, r1
 80073d4:	e64d      	b.n	8007072 <_strtod_l+0x72>
 80073d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007590 <_strtod_l+0x590>)
 80073d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80073e0:	f7f9 f922 	bl	8000628 <__aeabi_dmul>
 80073e4:	4682      	mov	sl, r0
 80073e6:	9808      	ldr	r0, [sp, #32]
 80073e8:	468b      	mov	fp, r1
 80073ea:	f7f9 f8a3 	bl	8000534 <__aeabi_ui2d>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4650      	mov	r0, sl
 80073f4:	4659      	mov	r1, fp
 80073f6:	f7f8 ff61 	bl	80002bc <__adddf3>
 80073fa:	2d0f      	cmp	r5, #15
 80073fc:	4682      	mov	sl, r0
 80073fe:	468b      	mov	fp, r1
 8007400:	ddd5      	ble.n	80073ae <_strtod_l+0x3ae>
 8007402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007404:	1b2c      	subs	r4, r5, r4
 8007406:	441c      	add	r4, r3
 8007408:	2c00      	cmp	r4, #0
 800740a:	f340 8096 	ble.w	800753a <_strtod_l+0x53a>
 800740e:	f014 030f 	ands.w	r3, r4, #15
 8007412:	d00a      	beq.n	800742a <_strtod_l+0x42a>
 8007414:	495e      	ldr	r1, [pc, #376]	@ (8007590 <_strtod_l+0x590>)
 8007416:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800741a:	4652      	mov	r2, sl
 800741c:	465b      	mov	r3, fp
 800741e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007422:	f7f9 f901 	bl	8000628 <__aeabi_dmul>
 8007426:	4682      	mov	sl, r0
 8007428:	468b      	mov	fp, r1
 800742a:	f034 040f 	bics.w	r4, r4, #15
 800742e:	d073      	beq.n	8007518 <_strtod_l+0x518>
 8007430:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007434:	dd48      	ble.n	80074c8 <_strtod_l+0x4c8>
 8007436:	2400      	movs	r4, #0
 8007438:	46a0      	mov	r8, r4
 800743a:	940a      	str	r4, [sp, #40]	@ 0x28
 800743c:	46a1      	mov	r9, r4
 800743e:	9a05      	ldr	r2, [sp, #20]
 8007440:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007598 <_strtod_l+0x598>
 8007444:	2322      	movs	r3, #34	@ 0x22
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	f04f 0a00 	mov.w	sl, #0
 800744c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	f43f ae0f 	beq.w	8007072 <_strtod_l+0x72>
 8007454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007456:	9805      	ldr	r0, [sp, #20]
 8007458:	f002 fe76 	bl	800a148 <_Bfree>
 800745c:	9805      	ldr	r0, [sp, #20]
 800745e:	4649      	mov	r1, r9
 8007460:	f002 fe72 	bl	800a148 <_Bfree>
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	4641      	mov	r1, r8
 8007468:	f002 fe6e 	bl	800a148 <_Bfree>
 800746c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800746e:	9805      	ldr	r0, [sp, #20]
 8007470:	f002 fe6a 	bl	800a148 <_Bfree>
 8007474:	9805      	ldr	r0, [sp, #20]
 8007476:	4621      	mov	r1, r4
 8007478:	f002 fe66 	bl	800a148 <_Bfree>
 800747c:	e5f9      	b.n	8007072 <_strtod_l+0x72>
 800747e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007480:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007484:	4293      	cmp	r3, r2
 8007486:	dbbc      	blt.n	8007402 <_strtod_l+0x402>
 8007488:	4c41      	ldr	r4, [pc, #260]	@ (8007590 <_strtod_l+0x590>)
 800748a:	f1c5 050f 	rsb	r5, r5, #15
 800748e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007492:	4652      	mov	r2, sl
 8007494:	465b      	mov	r3, fp
 8007496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800749a:	f7f9 f8c5 	bl	8000628 <__aeabi_dmul>
 800749e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a0:	1b5d      	subs	r5, r3, r5
 80074a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074aa:	e78f      	b.n	80073cc <_strtod_l+0x3cc>
 80074ac:	3316      	adds	r3, #22
 80074ae:	dba8      	blt.n	8007402 <_strtod_l+0x402>
 80074b0:	4b37      	ldr	r3, [pc, #220]	@ (8007590 <_strtod_l+0x590>)
 80074b2:	eba9 0808 	sub.w	r8, r9, r8
 80074b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80074ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80074be:	4650      	mov	r0, sl
 80074c0:	4659      	mov	r1, fp
 80074c2:	f7f9 f9db 	bl	800087c <__aeabi_ddiv>
 80074c6:	e783      	b.n	80073d0 <_strtod_l+0x3d0>
 80074c8:	4b32      	ldr	r3, [pc, #200]	@ (8007594 <_strtod_l+0x594>)
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	2300      	movs	r3, #0
 80074ce:	1124      	asrs	r4, r4, #4
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	461e      	mov	r6, r3
 80074d6:	2c01      	cmp	r4, #1
 80074d8:	dc21      	bgt.n	800751e <_strtod_l+0x51e>
 80074da:	b10b      	cbz	r3, 80074e0 <_strtod_l+0x4e0>
 80074dc:	4682      	mov	sl, r0
 80074de:	468b      	mov	fp, r1
 80074e0:	492c      	ldr	r1, [pc, #176]	@ (8007594 <_strtod_l+0x594>)
 80074e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80074e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80074ea:	4652      	mov	r2, sl
 80074ec:	465b      	mov	r3, fp
 80074ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f2:	f7f9 f899 	bl	8000628 <__aeabi_dmul>
 80074f6:	4b28      	ldr	r3, [pc, #160]	@ (8007598 <_strtod_l+0x598>)
 80074f8:	460a      	mov	r2, r1
 80074fa:	400b      	ands	r3, r1
 80074fc:	4927      	ldr	r1, [pc, #156]	@ (800759c <_strtod_l+0x59c>)
 80074fe:	428b      	cmp	r3, r1
 8007500:	4682      	mov	sl, r0
 8007502:	d898      	bhi.n	8007436 <_strtod_l+0x436>
 8007504:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007508:	428b      	cmp	r3, r1
 800750a:	bf86      	itte	hi
 800750c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80075a0 <_strtod_l+0x5a0>
 8007510:	f04f 3aff 	movhi.w	sl, #4294967295
 8007514:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007518:	2300      	movs	r3, #0
 800751a:	9308      	str	r3, [sp, #32]
 800751c:	e07a      	b.n	8007614 <_strtod_l+0x614>
 800751e:	07e2      	lsls	r2, r4, #31
 8007520:	d505      	bpl.n	800752e <_strtod_l+0x52e>
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f9 f87e 	bl	8000628 <__aeabi_dmul>
 800752c:	2301      	movs	r3, #1
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	3208      	adds	r2, #8
 8007532:	3601      	adds	r6, #1
 8007534:	1064      	asrs	r4, r4, #1
 8007536:	9208      	str	r2, [sp, #32]
 8007538:	e7cd      	b.n	80074d6 <_strtod_l+0x4d6>
 800753a:	d0ed      	beq.n	8007518 <_strtod_l+0x518>
 800753c:	4264      	negs	r4, r4
 800753e:	f014 020f 	ands.w	r2, r4, #15
 8007542:	d00a      	beq.n	800755a <_strtod_l+0x55a>
 8007544:	4b12      	ldr	r3, [pc, #72]	@ (8007590 <_strtod_l+0x590>)
 8007546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800754a:	4650      	mov	r0, sl
 800754c:	4659      	mov	r1, fp
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f7f9 f993 	bl	800087c <__aeabi_ddiv>
 8007556:	4682      	mov	sl, r0
 8007558:	468b      	mov	fp, r1
 800755a:	1124      	asrs	r4, r4, #4
 800755c:	d0dc      	beq.n	8007518 <_strtod_l+0x518>
 800755e:	2c1f      	cmp	r4, #31
 8007560:	dd20      	ble.n	80075a4 <_strtod_l+0x5a4>
 8007562:	2400      	movs	r4, #0
 8007564:	46a0      	mov	r8, r4
 8007566:	940a      	str	r4, [sp, #40]	@ 0x28
 8007568:	46a1      	mov	r9, r4
 800756a:	9a05      	ldr	r2, [sp, #20]
 800756c:	2322      	movs	r3, #34	@ 0x22
 800756e:	f04f 0a00 	mov.w	sl, #0
 8007572:	f04f 0b00 	mov.w	fp, #0
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	e768      	b.n	800744c <_strtod_l+0x44c>
 800757a:	bf00      	nop
 800757c:	0800b7d5 	.word	0x0800b7d5
 8007580:	0800b778 	.word	0x0800b778
 8007584:	0800b7cd 	.word	0x0800b7cd
 8007588:	0800b8b4 	.word	0x0800b8b4
 800758c:	0800b8b0 	.word	0x0800b8b0
 8007590:	0800ba18 	.word	0x0800ba18
 8007594:	0800b9f0 	.word	0x0800b9f0
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	7ca00000 	.word	0x7ca00000
 80075a0:	7fefffff 	.word	0x7fefffff
 80075a4:	f014 0310 	ands.w	r3, r4, #16
 80075a8:	bf18      	it	ne
 80075aa:	236a      	movne	r3, #106	@ 0x6a
 80075ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007854 <_strtod_l+0x854>)
 80075ae:	9308      	str	r3, [sp, #32]
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	2300      	movs	r3, #0
 80075b6:	07e2      	lsls	r2, r4, #31
 80075b8:	d504      	bpl.n	80075c4 <_strtod_l+0x5c4>
 80075ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075be:	f7f9 f833 	bl	8000628 <__aeabi_dmul>
 80075c2:	2301      	movs	r3, #1
 80075c4:	1064      	asrs	r4, r4, #1
 80075c6:	f106 0608 	add.w	r6, r6, #8
 80075ca:	d1f4      	bne.n	80075b6 <_strtod_l+0x5b6>
 80075cc:	b10b      	cbz	r3, 80075d2 <_strtod_l+0x5d2>
 80075ce:	4682      	mov	sl, r0
 80075d0:	468b      	mov	fp, r1
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	b1b3      	cbz	r3, 8007604 <_strtod_l+0x604>
 80075d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80075de:	2b00      	cmp	r3, #0
 80075e0:	4659      	mov	r1, fp
 80075e2:	dd0f      	ble.n	8007604 <_strtod_l+0x604>
 80075e4:	2b1f      	cmp	r3, #31
 80075e6:	dd55      	ble.n	8007694 <_strtod_l+0x694>
 80075e8:	2b34      	cmp	r3, #52	@ 0x34
 80075ea:	bfde      	ittt	le
 80075ec:	f04f 33ff 	movle.w	r3, #4294967295
 80075f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80075f4:	4093      	lslle	r3, r2
 80075f6:	f04f 0a00 	mov.w	sl, #0
 80075fa:	bfcc      	ite	gt
 80075fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007600:	ea03 0b01 	andle.w	fp, r3, r1
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	4650      	mov	r0, sl
 800760a:	4659      	mov	r1, fp
 800760c:	f7f9 fa74 	bl	8000af8 <__aeabi_dcmpeq>
 8007610:	2800      	cmp	r0, #0
 8007612:	d1a6      	bne.n	8007562 <_strtod_l+0x562>
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800761a:	9805      	ldr	r0, [sp, #20]
 800761c:	462b      	mov	r3, r5
 800761e:	463a      	mov	r2, r7
 8007620:	f002 fdfa 	bl	800a218 <__s2b>
 8007624:	900a      	str	r0, [sp, #40]	@ 0x28
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f af05 	beq.w	8007436 <_strtod_l+0x436>
 800762c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800762e:	2a00      	cmp	r2, #0
 8007630:	eba9 0308 	sub.w	r3, r9, r8
 8007634:	bfa8      	it	ge
 8007636:	2300      	movge	r3, #0
 8007638:	9312      	str	r3, [sp, #72]	@ 0x48
 800763a:	2400      	movs	r4, #0
 800763c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007640:	9316      	str	r3, [sp, #88]	@ 0x58
 8007642:	46a0      	mov	r8, r4
 8007644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007646:	9805      	ldr	r0, [sp, #20]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	f002 fd3d 	bl	800a0c8 <_Balloc>
 800764e:	4681      	mov	r9, r0
 8007650:	2800      	cmp	r0, #0
 8007652:	f43f aef4 	beq.w	800743e <_strtod_l+0x43e>
 8007656:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	3202      	adds	r2, #2
 800765c:	f103 010c 	add.w	r1, r3, #12
 8007660:	0092      	lsls	r2, r2, #2
 8007662:	300c      	adds	r0, #12
 8007664:	f001 fa5f 	bl	8008b26 <memcpy>
 8007668:	ec4b ab10 	vmov	d0, sl, fp
 800766c:	9805      	ldr	r0, [sp, #20]
 800766e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007670:	a91b      	add	r1, sp, #108	@ 0x6c
 8007672:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007676:	f003 f90b 	bl	800a890 <__d2b>
 800767a:	901a      	str	r0, [sp, #104]	@ 0x68
 800767c:	2800      	cmp	r0, #0
 800767e:	f43f aede 	beq.w	800743e <_strtod_l+0x43e>
 8007682:	9805      	ldr	r0, [sp, #20]
 8007684:	2101      	movs	r1, #1
 8007686:	f002 fe5d 	bl	800a344 <__i2b>
 800768a:	4680      	mov	r8, r0
 800768c:	b948      	cbnz	r0, 80076a2 <_strtod_l+0x6a2>
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	e6d4      	b.n	800743e <_strtod_l+0x43e>
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	ea03 0a0a 	and.w	sl, r3, sl
 80076a0:	e7b0      	b.n	8007604 <_strtod_l+0x604>
 80076a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80076a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	bfab      	itete	ge
 80076aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80076ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80076ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80076b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80076b2:	bfac      	ite	ge
 80076b4:	18ef      	addge	r7, r5, r3
 80076b6:	1b5e      	sublt	r6, r3, r5
 80076b8:	9b08      	ldr	r3, [sp, #32]
 80076ba:	1aed      	subs	r5, r5, r3
 80076bc:	4415      	add	r5, r2
 80076be:	4b66      	ldr	r3, [pc, #408]	@ (8007858 <_strtod_l+0x858>)
 80076c0:	3d01      	subs	r5, #1
 80076c2:	429d      	cmp	r5, r3
 80076c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80076c8:	da50      	bge.n	800776c <_strtod_l+0x76c>
 80076ca:	1b5b      	subs	r3, r3, r5
 80076cc:	2b1f      	cmp	r3, #31
 80076ce:	eba2 0203 	sub.w	r2, r2, r3
 80076d2:	f04f 0101 	mov.w	r1, #1
 80076d6:	dc3d      	bgt.n	8007754 <_strtod_l+0x754>
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076de:	2300      	movs	r3, #0
 80076e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80076e2:	18bd      	adds	r5, r7, r2
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	42af      	cmp	r7, r5
 80076e8:	4416      	add	r6, r2
 80076ea:	441e      	add	r6, r3
 80076ec:	463b      	mov	r3, r7
 80076ee:	bfa8      	it	ge
 80076f0:	462b      	movge	r3, r5
 80076f2:	42b3      	cmp	r3, r6
 80076f4:	bfa8      	it	ge
 80076f6:	4633      	movge	r3, r6
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfc2      	ittt	gt
 80076fc:	1aed      	subgt	r5, r5, r3
 80076fe:	1af6      	subgt	r6, r6, r3
 8007700:	1aff      	subgt	r7, r7, r3
 8007702:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007704:	2b00      	cmp	r3, #0
 8007706:	dd16      	ble.n	8007736 <_strtod_l+0x736>
 8007708:	4641      	mov	r1, r8
 800770a:	9805      	ldr	r0, [sp, #20]
 800770c:	461a      	mov	r2, r3
 800770e:	f002 fed9 	bl	800a4c4 <__pow5mult>
 8007712:	4680      	mov	r8, r0
 8007714:	2800      	cmp	r0, #0
 8007716:	d0ba      	beq.n	800768e <_strtod_l+0x68e>
 8007718:	4601      	mov	r1, r0
 800771a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800771c:	9805      	ldr	r0, [sp, #20]
 800771e:	f002 fe27 	bl	800a370 <__multiply>
 8007722:	900e      	str	r0, [sp, #56]	@ 0x38
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f ae8a 	beq.w	800743e <_strtod_l+0x43e>
 800772a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800772c:	9805      	ldr	r0, [sp, #20]
 800772e:	f002 fd0b 	bl	800a148 <_Bfree>
 8007732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007734:	931a      	str	r3, [sp, #104]	@ 0x68
 8007736:	2d00      	cmp	r5, #0
 8007738:	dc1d      	bgt.n	8007776 <_strtod_l+0x776>
 800773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd23      	ble.n	8007788 <_strtod_l+0x788>
 8007740:	4649      	mov	r1, r9
 8007742:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007744:	9805      	ldr	r0, [sp, #20]
 8007746:	f002 febd 	bl	800a4c4 <__pow5mult>
 800774a:	4681      	mov	r9, r0
 800774c:	b9e0      	cbnz	r0, 8007788 <_strtod_l+0x788>
 800774e:	f04f 0900 	mov.w	r9, #0
 8007752:	e674      	b.n	800743e <_strtod_l+0x43e>
 8007754:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007758:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800775c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007760:	35e2      	adds	r5, #226	@ 0xe2
 8007762:	fa01 f305 	lsl.w	r3, r1, r5
 8007766:	9310      	str	r3, [sp, #64]	@ 0x40
 8007768:	9113      	str	r1, [sp, #76]	@ 0x4c
 800776a:	e7ba      	b.n	80076e2 <_strtod_l+0x6e2>
 800776c:	2300      	movs	r3, #0
 800776e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007770:	2301      	movs	r3, #1
 8007772:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007774:	e7b5      	b.n	80076e2 <_strtod_l+0x6e2>
 8007776:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007778:	9805      	ldr	r0, [sp, #20]
 800777a:	462a      	mov	r2, r5
 800777c:	f002 fefc 	bl	800a578 <__lshift>
 8007780:	901a      	str	r0, [sp, #104]	@ 0x68
 8007782:	2800      	cmp	r0, #0
 8007784:	d1d9      	bne.n	800773a <_strtod_l+0x73a>
 8007786:	e65a      	b.n	800743e <_strtod_l+0x43e>
 8007788:	2e00      	cmp	r6, #0
 800778a:	dd07      	ble.n	800779c <_strtod_l+0x79c>
 800778c:	4649      	mov	r1, r9
 800778e:	9805      	ldr	r0, [sp, #20]
 8007790:	4632      	mov	r2, r6
 8007792:	f002 fef1 	bl	800a578 <__lshift>
 8007796:	4681      	mov	r9, r0
 8007798:	2800      	cmp	r0, #0
 800779a:	d0d8      	beq.n	800774e <_strtod_l+0x74e>
 800779c:	2f00      	cmp	r7, #0
 800779e:	dd08      	ble.n	80077b2 <_strtod_l+0x7b2>
 80077a0:	4641      	mov	r1, r8
 80077a2:	9805      	ldr	r0, [sp, #20]
 80077a4:	463a      	mov	r2, r7
 80077a6:	f002 fee7 	bl	800a578 <__lshift>
 80077aa:	4680      	mov	r8, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f43f ae46 	beq.w	800743e <_strtod_l+0x43e>
 80077b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077b4:	9805      	ldr	r0, [sp, #20]
 80077b6:	464a      	mov	r2, r9
 80077b8:	f002 ff66 	bl	800a688 <__mdiff>
 80077bc:	4604      	mov	r4, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f ae3d 	beq.w	800743e <_strtod_l+0x43e>
 80077c4:	68c3      	ldr	r3, [r0, #12]
 80077c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077c8:	2300      	movs	r3, #0
 80077ca:	60c3      	str	r3, [r0, #12]
 80077cc:	4641      	mov	r1, r8
 80077ce:	f002 ff3f 	bl	800a650 <__mcmp>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	da46      	bge.n	8007864 <_strtod_l+0x864>
 80077d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d8:	ea53 030a 	orrs.w	r3, r3, sl
 80077dc:	d16c      	bne.n	80078b8 <_strtod_l+0x8b8>
 80077de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d168      	bne.n	80078b8 <_strtod_l+0x8b8>
 80077e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	051b      	lsls	r3, r3, #20
 80077ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80077f2:	d961      	bls.n	80078b8 <_strtod_l+0x8b8>
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	b913      	cbnz	r3, 80077fe <_strtod_l+0x7fe>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	dd5c      	ble.n	80078b8 <_strtod_l+0x8b8>
 80077fe:	4621      	mov	r1, r4
 8007800:	2201      	movs	r2, #1
 8007802:	9805      	ldr	r0, [sp, #20]
 8007804:	f002 feb8 	bl	800a578 <__lshift>
 8007808:	4641      	mov	r1, r8
 800780a:	4604      	mov	r4, r0
 800780c:	f002 ff20 	bl	800a650 <__mcmp>
 8007810:	2800      	cmp	r0, #0
 8007812:	dd51      	ble.n	80078b8 <_strtod_l+0x8b8>
 8007814:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	0d1b      	lsrs	r3, r3, #20
 800781c:	051b      	lsls	r3, r3, #20
 800781e:	2a00      	cmp	r2, #0
 8007820:	d06b      	beq.n	80078fa <_strtod_l+0x8fa>
 8007822:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007826:	d868      	bhi.n	80078fa <_strtod_l+0x8fa>
 8007828:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800782c:	f67f ae9d 	bls.w	800756a <_strtod_l+0x56a>
 8007830:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <_strtod_l+0x85c>)
 8007832:	4650      	mov	r0, sl
 8007834:	4659      	mov	r1, fp
 8007836:	2200      	movs	r2, #0
 8007838:	f7f8 fef6 	bl	8000628 <__aeabi_dmul>
 800783c:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <_strtod_l+0x860>)
 800783e:	400b      	ands	r3, r1
 8007840:	4682      	mov	sl, r0
 8007842:	468b      	mov	fp, r1
 8007844:	2b00      	cmp	r3, #0
 8007846:	f47f ae05 	bne.w	8007454 <_strtod_l+0x454>
 800784a:	9a05      	ldr	r2, [sp, #20]
 800784c:	2322      	movs	r3, #34	@ 0x22
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e600      	b.n	8007454 <_strtod_l+0x454>
 8007852:	bf00      	nop
 8007854:	0800b7a0 	.word	0x0800b7a0
 8007858:	fffffc02 	.word	0xfffffc02
 800785c:	39500000 	.word	0x39500000
 8007860:	7ff00000 	.word	0x7ff00000
 8007864:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007868:	d165      	bne.n	8007936 <_strtod_l+0x936>
 800786a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800786c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007870:	b35a      	cbz	r2, 80078ca <_strtod_l+0x8ca>
 8007872:	4a9f      	ldr	r2, [pc, #636]	@ (8007af0 <_strtod_l+0xaf0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d12b      	bne.n	80078d0 <_strtod_l+0x8d0>
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	4651      	mov	r1, sl
 800787c:	b303      	cbz	r3, 80078c0 <_strtod_l+0x8c0>
 800787e:	4b9d      	ldr	r3, [pc, #628]	@ (8007af4 <_strtod_l+0xaf4>)
 8007880:	465a      	mov	r2, fp
 8007882:	4013      	ands	r3, r2
 8007884:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	d81b      	bhi.n	80078c6 <_strtod_l+0x8c6>
 800788e:	0d1b      	lsrs	r3, r3, #20
 8007890:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	4299      	cmp	r1, r3
 800789a:	d119      	bne.n	80078d0 <_strtod_l+0x8d0>
 800789c:	4b96      	ldr	r3, [pc, #600]	@ (8007af8 <_strtod_l+0xaf8>)
 800789e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d102      	bne.n	80078aa <_strtod_l+0x8aa>
 80078a4:	3101      	adds	r1, #1
 80078a6:	f43f adca 	beq.w	800743e <_strtod_l+0x43e>
 80078aa:	4b92      	ldr	r3, [pc, #584]	@ (8007af4 <_strtod_l+0xaf4>)
 80078ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078ae:	401a      	ands	r2, r3
 80078b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80078b4:	f04f 0a00 	mov.w	sl, #0
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1b8      	bne.n	8007830 <_strtod_l+0x830>
 80078be:	e5c9      	b.n	8007454 <_strtod_l+0x454>
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	e7e8      	b.n	8007898 <_strtod_l+0x898>
 80078c6:	4613      	mov	r3, r2
 80078c8:	e7e6      	b.n	8007898 <_strtod_l+0x898>
 80078ca:	ea53 030a 	orrs.w	r3, r3, sl
 80078ce:	d0a1      	beq.n	8007814 <_strtod_l+0x814>
 80078d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078d2:	b1db      	cbz	r3, 800790c <_strtod_l+0x90c>
 80078d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078d6:	4213      	tst	r3, r2
 80078d8:	d0ee      	beq.n	80078b8 <_strtod_l+0x8b8>
 80078da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078dc:	9a08      	ldr	r2, [sp, #32]
 80078de:	4650      	mov	r0, sl
 80078e0:	4659      	mov	r1, fp
 80078e2:	b1bb      	cbz	r3, 8007914 <_strtod_l+0x914>
 80078e4:	f7ff fb6b 	bl	8006fbe <sulp>
 80078e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ec:	ec53 2b10 	vmov	r2, r3, d0
 80078f0:	f7f8 fce4 	bl	80002bc <__adddf3>
 80078f4:	4682      	mov	sl, r0
 80078f6:	468b      	mov	fp, r1
 80078f8:	e7de      	b.n	80078b8 <_strtod_l+0x8b8>
 80078fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80078fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007902:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007906:	f04f 3aff 	mov.w	sl, #4294967295
 800790a:	e7d5      	b.n	80078b8 <_strtod_l+0x8b8>
 800790c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800790e:	ea13 0f0a 	tst.w	r3, sl
 8007912:	e7e1      	b.n	80078d8 <_strtod_l+0x8d8>
 8007914:	f7ff fb53 	bl	8006fbe <sulp>
 8007918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800791c:	ec53 2b10 	vmov	r2, r3, d0
 8007920:	f7f8 fcca 	bl	80002b8 <__aeabi_dsub>
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	4682      	mov	sl, r0
 800792a:	468b      	mov	fp, r1
 800792c:	f7f9 f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0c1      	beq.n	80078b8 <_strtod_l+0x8b8>
 8007934:	e619      	b.n	800756a <_strtod_l+0x56a>
 8007936:	4641      	mov	r1, r8
 8007938:	4620      	mov	r0, r4
 800793a:	f003 f801 	bl	800a940 <__ratio>
 800793e:	ec57 6b10 	vmov	r6, r7, d0
 8007942:	2200      	movs	r2, #0
 8007944:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f9 f8e8 	bl	8000b20 <__aeabi_dcmple>
 8007950:	2800      	cmp	r0, #0
 8007952:	d06f      	beq.n	8007a34 <_strtod_l+0xa34>
 8007954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d17a      	bne.n	8007a50 <_strtod_l+0xa50>
 800795a:	f1ba 0f00 	cmp.w	sl, #0
 800795e:	d158      	bne.n	8007a12 <_strtod_l+0xa12>
 8007960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007966:	2b00      	cmp	r3, #0
 8007968:	d15a      	bne.n	8007a20 <_strtod_l+0xa20>
 800796a:	4b64      	ldr	r3, [pc, #400]	@ (8007afc <_strtod_l+0xafc>)
 800796c:	2200      	movs	r2, #0
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f9 f8cb 	bl	8000b0c <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	d159      	bne.n	8007a2e <_strtod_l+0xa2e>
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	4b60      	ldr	r3, [pc, #384]	@ (8007b00 <_strtod_l+0xb00>)
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fe51 	bl	8000628 <__aeabi_dmul>
 8007986:	4606      	mov	r6, r0
 8007988:	460f      	mov	r7, r1
 800798a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800798e:	9606      	str	r6, [sp, #24]
 8007990:	9307      	str	r3, [sp, #28]
 8007992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007996:	4d57      	ldr	r5, [pc, #348]	@ (8007af4 <_strtod_l+0xaf4>)
 8007998:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800799c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800799e:	401d      	ands	r5, r3
 80079a0:	4b58      	ldr	r3, [pc, #352]	@ (8007b04 <_strtod_l+0xb04>)
 80079a2:	429d      	cmp	r5, r3
 80079a4:	f040 80b2 	bne.w	8007b0c <_strtod_l+0xb0c>
 80079a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80079ae:	ec4b ab10 	vmov	d0, sl, fp
 80079b2:	f002 fefd 	bl	800a7b0 <__ulp>
 80079b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079ba:	ec51 0b10 	vmov	r0, r1, d0
 80079be:	f7f8 fe33 	bl	8000628 <__aeabi_dmul>
 80079c2:	4652      	mov	r2, sl
 80079c4:	465b      	mov	r3, fp
 80079c6:	f7f8 fc79 	bl	80002bc <__adddf3>
 80079ca:	460b      	mov	r3, r1
 80079cc:	4949      	ldr	r1, [pc, #292]	@ (8007af4 <_strtod_l+0xaf4>)
 80079ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007b08 <_strtod_l+0xb08>)
 80079d0:	4019      	ands	r1, r3
 80079d2:	4291      	cmp	r1, r2
 80079d4:	4682      	mov	sl, r0
 80079d6:	d942      	bls.n	8007a5e <_strtod_l+0xa5e>
 80079d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079da:	4b47      	ldr	r3, [pc, #284]	@ (8007af8 <_strtod_l+0xaf8>)
 80079dc:	429a      	cmp	r2, r3
 80079de:	d103      	bne.n	80079e8 <_strtod_l+0x9e8>
 80079e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079e2:	3301      	adds	r3, #1
 80079e4:	f43f ad2b 	beq.w	800743e <_strtod_l+0x43e>
 80079e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007af8 <_strtod_l+0xaf8>
 80079ec:	f04f 3aff 	mov.w	sl, #4294967295
 80079f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079f2:	9805      	ldr	r0, [sp, #20]
 80079f4:	f002 fba8 	bl	800a148 <_Bfree>
 80079f8:	9805      	ldr	r0, [sp, #20]
 80079fa:	4649      	mov	r1, r9
 80079fc:	f002 fba4 	bl	800a148 <_Bfree>
 8007a00:	9805      	ldr	r0, [sp, #20]
 8007a02:	4641      	mov	r1, r8
 8007a04:	f002 fba0 	bl	800a148 <_Bfree>
 8007a08:	9805      	ldr	r0, [sp, #20]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	f002 fb9c 	bl	800a148 <_Bfree>
 8007a10:	e618      	b.n	8007644 <_strtod_l+0x644>
 8007a12:	f1ba 0f01 	cmp.w	sl, #1
 8007a16:	d103      	bne.n	8007a20 <_strtod_l+0xa20>
 8007a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f43f ada5 	beq.w	800756a <_strtod_l+0x56a>
 8007a20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007ad0 <_strtod_l+0xad0>
 8007a24:	4f35      	ldr	r7, [pc, #212]	@ (8007afc <_strtod_l+0xafc>)
 8007a26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	e7b1      	b.n	8007992 <_strtod_l+0x992>
 8007a2e:	4f34      	ldr	r7, [pc, #208]	@ (8007b00 <_strtod_l+0xb00>)
 8007a30:	2600      	movs	r6, #0
 8007a32:	e7aa      	b.n	800798a <_strtod_l+0x98a>
 8007a34:	4b32      	ldr	r3, [pc, #200]	@ (8007b00 <_strtod_l+0xb00>)
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7f8 fdf4 	bl	8000628 <__aeabi_dmul>
 8007a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d09f      	beq.n	800798a <_strtod_l+0x98a>
 8007a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a4e:	e7a0      	b.n	8007992 <_strtod_l+0x992>
 8007a50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ad8 <_strtod_l+0xad8>
 8007a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a58:	ec57 6b17 	vmov	r6, r7, d7
 8007a5c:	e799      	b.n	8007992 <_strtod_l+0x992>
 8007a5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1c1      	bne.n	80079f0 <_strtod_l+0x9f0>
 8007a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a70:	0d1b      	lsrs	r3, r3, #20
 8007a72:	051b      	lsls	r3, r3, #20
 8007a74:	429d      	cmp	r5, r3
 8007a76:	d1bb      	bne.n	80079f0 <_strtod_l+0x9f0>
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f9 f934 	bl	8000ce8 <__aeabi_d2lz>
 8007a80:	f7f8 fda4 	bl	80005cc <__aeabi_l2d>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fc14 	bl	80002b8 <__aeabi_dsub>
 8007a90:	460b      	mov	r3, r1
 8007a92:	4602      	mov	r2, r0
 8007a94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9e:	ea46 060a 	orr.w	r6, r6, sl
 8007aa2:	431e      	orrs	r6, r3
 8007aa4:	d06f      	beq.n	8007b86 <_strtod_l+0xb86>
 8007aa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ae0 <_strtod_l+0xae0>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f9 f82e 	bl	8000b0c <__aeabi_dcmplt>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f47f accf 	bne.w	8007454 <_strtod_l+0x454>
 8007ab6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007ae8 <_strtod_l+0xae8>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac0:	f7f9 f842 	bl	8000b48 <__aeabi_dcmpgt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d093      	beq.n	80079f0 <_strtod_l+0x9f0>
 8007ac8:	e4c4      	b.n	8007454 <_strtod_l+0x454>
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	bff00000 	.word	0xbff00000
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	3ff00000 	.word	0x3ff00000
 8007ae0:	94a03595 	.word	0x94a03595
 8007ae4:	3fdfffff 	.word	0x3fdfffff
 8007ae8:	35afe535 	.word	0x35afe535
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	000fffff 	.word	0x000fffff
 8007af4:	7ff00000 	.word	0x7ff00000
 8007af8:	7fefffff 	.word	0x7fefffff
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	7fe00000 	.word	0x7fe00000
 8007b08:	7c9fffff 	.word	0x7c9fffff
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	b323      	cbz	r3, 8007b5a <_strtod_l+0xb5a>
 8007b10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b14:	d821      	bhi.n	8007b5a <_strtod_l+0xb5a>
 8007b16:	a328      	add	r3, pc, #160	@ (adr r3, 8007bb8 <_strtod_l+0xbb8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	4639      	mov	r1, r7
 8007b20:	f7f8 fffe 	bl	8000b20 <__aeabi_dcmple>
 8007b24:	b1a0      	cbz	r0, 8007b50 <_strtod_l+0xb50>
 8007b26:	4639      	mov	r1, r7
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7f9 f855 	bl	8000bd8 <__aeabi_d2uiz>
 8007b2e:	2801      	cmp	r0, #1
 8007b30:	bf38      	it	cc
 8007b32:	2001      	movcc	r0, #1
 8007b34:	f7f8 fcfe 	bl	8000534 <__aeabi_ui2d>
 8007b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	460f      	mov	r7, r1
 8007b3e:	b9fb      	cbnz	r3, 8007b80 <_strtod_l+0xb80>
 8007b40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b44:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b46:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007b56:	1b5b      	subs	r3, r3, r5
 8007b58:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007b62:	f002 fe25 	bl	800a7b0 <__ulp>
 8007b66:	4650      	mov	r0, sl
 8007b68:	ec53 2b10 	vmov	r2, r3, d0
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	f7f8 fd5b 	bl	8000628 <__aeabi_dmul>
 8007b72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b76:	f7f8 fba1 	bl	80002bc <__adddf3>
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	e770      	b.n	8007a62 <_strtod_l+0xa62>
 8007b80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007b84:	e7e0      	b.n	8007b48 <_strtod_l+0xb48>
 8007b86:	a30e      	add	r3, pc, #56	@ (adr r3, 8007bc0 <_strtod_l+0xbc0>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 ffbe 	bl	8000b0c <__aeabi_dcmplt>
 8007b90:	e798      	b.n	8007ac4 <_strtod_l+0xac4>
 8007b92:	2300      	movs	r3, #0
 8007b94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007b98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	f7ff ba6d 	b.w	800707a <_strtod_l+0x7a>
 8007ba0:	2a65      	cmp	r2, #101	@ 0x65
 8007ba2:	f43f ab66 	beq.w	8007272 <_strtod_l+0x272>
 8007ba6:	2a45      	cmp	r2, #69	@ 0x45
 8007ba8:	f43f ab63 	beq.w	8007272 <_strtod_l+0x272>
 8007bac:	2301      	movs	r3, #1
 8007bae:	f7ff bb9e 	b.w	80072ee <_strtod_l+0x2ee>
 8007bb2:	bf00      	nop
 8007bb4:	f3af 8000 	nop.w
 8007bb8:	ffc00000 	.word	0xffc00000
 8007bbc:	41dfffff 	.word	0x41dfffff
 8007bc0:	94a03595 	.word	0x94a03595
 8007bc4:	3fcfffff 	.word	0x3fcfffff

08007bc8 <strtod>:
 8007bc8:	460a      	mov	r2, r1
 8007bca:	4601      	mov	r1, r0
 8007bcc:	4802      	ldr	r0, [pc, #8]	@ (8007bd8 <strtod+0x10>)
 8007bce:	4b03      	ldr	r3, [pc, #12]	@ (8007bdc <strtod+0x14>)
 8007bd0:	6800      	ldr	r0, [r0, #0]
 8007bd2:	f7ff ba15 	b.w	8007000 <_strtod_l>
 8007bd6:	bf00      	nop
 8007bd8:	20000188 	.word	0x20000188
 8007bdc:	2000001c 	.word	0x2000001c

08007be0 <__cvt>:
 8007be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	ec57 6b10 	vmov	r6, r7, d0
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	460c      	mov	r4, r1
 8007bec:	4619      	mov	r1, r3
 8007bee:	463b      	mov	r3, r7
 8007bf0:	bfbb      	ittet	lt
 8007bf2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bf6:	461f      	movlt	r7, r3
 8007bf8:	2300      	movge	r3, #0
 8007bfa:	232d      	movlt	r3, #45	@ 0x2d
 8007bfc:	700b      	strb	r3, [r1, #0]
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c04:	4691      	mov	r9, r2
 8007c06:	f023 0820 	bic.w	r8, r3, #32
 8007c0a:	bfbc      	itt	lt
 8007c0c:	4632      	movlt	r2, r6
 8007c0e:	4616      	movlt	r6, r2
 8007c10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c14:	d005      	beq.n	8007c22 <__cvt+0x42>
 8007c16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c1a:	d100      	bne.n	8007c1e <__cvt+0x3e>
 8007c1c:	3401      	adds	r4, #1
 8007c1e:	2102      	movs	r1, #2
 8007c20:	e000      	b.n	8007c24 <__cvt+0x44>
 8007c22:	2103      	movs	r1, #3
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	ab02      	add	r3, sp, #8
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	ec47 6b10 	vmov	d0, r6, r7
 8007c30:	4653      	mov	r3, sl
 8007c32:	4622      	mov	r2, r4
 8007c34:	f001 f838 	bl	8008ca8 <_dtoa_r>
 8007c38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	d119      	bne.n	8007c74 <__cvt+0x94>
 8007c40:	f019 0f01 	tst.w	r9, #1
 8007c44:	d00e      	beq.n	8007c64 <__cvt+0x84>
 8007c46:	eb00 0904 	add.w	r9, r0, r4
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	f7f8 ff51 	bl	8000af8 <__aeabi_dcmpeq>
 8007c56:	b108      	cbz	r0, 8007c5c <__cvt+0x7c>
 8007c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c5c:	2230      	movs	r2, #48	@ 0x30
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	454b      	cmp	r3, r9
 8007c62:	d31e      	bcc.n	8007ca2 <__cvt+0xc2>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c68:	1b5b      	subs	r3, r3, r5
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	b004      	add	sp, #16
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c78:	eb00 0904 	add.w	r9, r0, r4
 8007c7c:	d1e5      	bne.n	8007c4a <__cvt+0x6a>
 8007c7e:	7803      	ldrb	r3, [r0, #0]
 8007c80:	2b30      	cmp	r3, #48	@ 0x30
 8007c82:	d10a      	bne.n	8007c9a <__cvt+0xba>
 8007c84:	2200      	movs	r2, #0
 8007c86:	2300      	movs	r3, #0
 8007c88:	4630      	mov	r0, r6
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7f8 ff34 	bl	8000af8 <__aeabi_dcmpeq>
 8007c90:	b918      	cbnz	r0, 8007c9a <__cvt+0xba>
 8007c92:	f1c4 0401 	rsb	r4, r4, #1
 8007c96:	f8ca 4000 	str.w	r4, [sl]
 8007c9a:	f8da 3000 	ldr.w	r3, [sl]
 8007c9e:	4499      	add	r9, r3
 8007ca0:	e7d3      	b.n	8007c4a <__cvt+0x6a>
 8007ca2:	1c59      	adds	r1, r3, #1
 8007ca4:	9103      	str	r1, [sp, #12]
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	e7d9      	b.n	8007c5e <__cvt+0x7e>

08007caa <__exponent>:
 8007caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cac:	2900      	cmp	r1, #0
 8007cae:	bfba      	itte	lt
 8007cb0:	4249      	neglt	r1, r1
 8007cb2:	232d      	movlt	r3, #45	@ 0x2d
 8007cb4:	232b      	movge	r3, #43	@ 0x2b
 8007cb6:	2909      	cmp	r1, #9
 8007cb8:	7002      	strb	r2, [r0, #0]
 8007cba:	7043      	strb	r3, [r0, #1]
 8007cbc:	dd29      	ble.n	8007d12 <__exponent+0x68>
 8007cbe:	f10d 0307 	add.w	r3, sp, #7
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	270a      	movs	r7, #10
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ccc:	fb07 1416 	mls	r4, r7, r6, r1
 8007cd0:	3430      	adds	r4, #48	@ 0x30
 8007cd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	2c63      	cmp	r4, #99	@ 0x63
 8007cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cde:	4631      	mov	r1, r6
 8007ce0:	dcf1      	bgt.n	8007cc6 <__exponent+0x1c>
 8007ce2:	3130      	adds	r1, #48	@ 0x30
 8007ce4:	1e94      	subs	r4, r2, #2
 8007ce6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cea:	1c41      	adds	r1, r0, #1
 8007cec:	4623      	mov	r3, r4
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	d30a      	bcc.n	8007d08 <__exponent+0x5e>
 8007cf2:	f10d 0309 	add.w	r3, sp, #9
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	42ac      	cmp	r4, r5
 8007cfa:	bf88      	it	hi
 8007cfc:	2300      	movhi	r3, #0
 8007cfe:	3302      	adds	r3, #2
 8007d00:	4403      	add	r3, r0
 8007d02:	1a18      	subs	r0, r3, r0
 8007d04:	b003      	add	sp, #12
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d10:	e7ed      	b.n	8007cee <__exponent+0x44>
 8007d12:	2330      	movs	r3, #48	@ 0x30
 8007d14:	3130      	adds	r1, #48	@ 0x30
 8007d16:	7083      	strb	r3, [r0, #2]
 8007d18:	70c1      	strb	r1, [r0, #3]
 8007d1a:	1d03      	adds	r3, r0, #4
 8007d1c:	e7f1      	b.n	8007d02 <__exponent+0x58>
	...

08007d20 <_printf_float>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	b08d      	sub	sp, #52	@ 0x34
 8007d26:	460c      	mov	r4, r1
 8007d28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	461f      	mov	r7, r3
 8007d30:	4605      	mov	r5, r0
 8007d32:	f000 fe79 	bl	8008a28 <_localeconv_r>
 8007d36:	6803      	ldr	r3, [r0, #0]
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7f8 fab0 	bl	80002a0 <strlen>
 8007d40:	2300      	movs	r3, #0
 8007d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d44:	f8d8 3000 	ldr.w	r3, [r8]
 8007d48:	9005      	str	r0, [sp, #20]
 8007d4a:	3307      	adds	r3, #7
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	f103 0208 	add.w	r2, r3, #8
 8007d54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d58:	f8d4 b000 	ldr.w	fp, [r4]
 8007d5c:	f8c8 2000 	str.w	r2, [r8]
 8007d60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d68:	9307      	str	r3, [sp, #28]
 8007d6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d76:	4b9c      	ldr	r3, [pc, #624]	@ (8007fe8 <_printf_float+0x2c8>)
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7c:	f7f8 feee 	bl	8000b5c <__aeabi_dcmpun>
 8007d80:	bb70      	cbnz	r0, 8007de0 <_printf_float+0xc0>
 8007d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d86:	4b98      	ldr	r3, [pc, #608]	@ (8007fe8 <_printf_float+0x2c8>)
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	f7f8 fec8 	bl	8000b20 <__aeabi_dcmple>
 8007d90:	bb30      	cbnz	r0, 8007de0 <_printf_float+0xc0>
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 feb7 	bl	8000b0c <__aeabi_dcmplt>
 8007d9e:	b110      	cbz	r0, 8007da6 <_printf_float+0x86>
 8007da0:	232d      	movs	r3, #45	@ 0x2d
 8007da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da6:	4a91      	ldr	r2, [pc, #580]	@ (8007fec <_printf_float+0x2cc>)
 8007da8:	4b91      	ldr	r3, [pc, #580]	@ (8007ff0 <_printf_float+0x2d0>)
 8007daa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dae:	bf94      	ite	ls
 8007db0:	4690      	movls	r8, r2
 8007db2:	4698      	movhi	r8, r3
 8007db4:	2303      	movs	r3, #3
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	f02b 0304 	bic.w	r3, fp, #4
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	f04f 0900 	mov.w	r9, #0
 8007dc2:	9700      	str	r7, [sp, #0]
 8007dc4:	4633      	mov	r3, r6
 8007dc6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f9d2 	bl	8008174 <_printf_common>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f040 808d 	bne.w	8007ef0 <_printf_float+0x1d0>
 8007dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dda:	b00d      	add	sp, #52	@ 0x34
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	4649      	mov	r1, r9
 8007de8:	f7f8 feb8 	bl	8000b5c <__aeabi_dcmpun>
 8007dec:	b140      	cbz	r0, 8007e00 <_printf_float+0xe0>
 8007dee:	464b      	mov	r3, r9
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfbc      	itt	lt
 8007df4:	232d      	movlt	r3, #45	@ 0x2d
 8007df6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8007ff4 <_printf_float+0x2d4>)
 8007dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8007ff8 <_printf_float+0x2d8>)
 8007dfe:	e7d4      	b.n	8007daa <_printf_float+0x8a>
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e06:	9206      	str	r2, [sp, #24]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	d13b      	bne.n	8007e84 <_printf_float+0x164>
 8007e0c:	2306      	movs	r3, #6
 8007e0e:	6063      	str	r3, [r4, #4]
 8007e10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e14:	2300      	movs	r3, #0
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e20:	ab09      	add	r3, sp, #36	@ 0x24
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	6861      	ldr	r1, [r4, #4]
 8007e26:	ec49 8b10 	vmov	d0, r8, r9
 8007e2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7ff fed6 	bl	8007be0 <__cvt>
 8007e34:	9b06      	ldr	r3, [sp, #24]
 8007e36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e38:	2b47      	cmp	r3, #71	@ 0x47
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	d129      	bne.n	8007e92 <_printf_float+0x172>
 8007e3e:	1cc8      	adds	r0, r1, #3
 8007e40:	db02      	blt.n	8007e48 <_printf_float+0x128>
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	4299      	cmp	r1, r3
 8007e46:	dd41      	ble.n	8007ecc <_printf_float+0x1ac>
 8007e48:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e50:	3901      	subs	r1, #1
 8007e52:	4652      	mov	r2, sl
 8007e54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e58:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e5a:	f7ff ff26 	bl	8007caa <__exponent>
 8007e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e60:	1813      	adds	r3, r2, r0
 8007e62:	2a01      	cmp	r2, #1
 8007e64:	4681      	mov	r9, r0
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	dc02      	bgt.n	8007e70 <_printf_float+0x150>
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	07d2      	lsls	r2, r2, #31
 8007e6e:	d501      	bpl.n	8007e74 <_printf_float+0x154>
 8007e70:	3301      	adds	r3, #1
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0a2      	beq.n	8007dc2 <_printf_float+0xa2>
 8007e7c:	232d      	movs	r3, #45	@ 0x2d
 8007e7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e82:	e79e      	b.n	8007dc2 <_printf_float+0xa2>
 8007e84:	9a06      	ldr	r2, [sp, #24]
 8007e86:	2a47      	cmp	r2, #71	@ 0x47
 8007e88:	d1c2      	bne.n	8007e10 <_printf_float+0xf0>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1c0      	bne.n	8007e10 <_printf_float+0xf0>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e7bd      	b.n	8007e0e <_printf_float+0xee>
 8007e92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e96:	d9db      	bls.n	8007e50 <_printf_float+0x130>
 8007e98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e9c:	d118      	bne.n	8007ed0 <_printf_float+0x1b0>
 8007e9e:	2900      	cmp	r1, #0
 8007ea0:	6863      	ldr	r3, [r4, #4]
 8007ea2:	dd0b      	ble.n	8007ebc <_printf_float+0x19c>
 8007ea4:	6121      	str	r1, [r4, #16]
 8007ea6:	b913      	cbnz	r3, 8007eae <_printf_float+0x18e>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	07d0      	lsls	r0, r2, #31
 8007eac:	d502      	bpl.n	8007eb4 <_printf_float+0x194>
 8007eae:	3301      	adds	r3, #1
 8007eb0:	440b      	add	r3, r1
 8007eb2:	6123      	str	r3, [r4, #16]
 8007eb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	e7db      	b.n	8007e74 <_printf_float+0x154>
 8007ebc:	b913      	cbnz	r3, 8007ec4 <_printf_float+0x1a4>
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	07d2      	lsls	r2, r2, #31
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_float+0x1a8>
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	e7f4      	b.n	8007eb2 <_printf_float+0x192>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e7f2      	b.n	8007eb2 <_printf_float+0x192>
 8007ecc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	db05      	blt.n	8007ee2 <_printf_float+0x1c2>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	6121      	str	r1, [r4, #16]
 8007eda:	07d8      	lsls	r0, r3, #31
 8007edc:	d5ea      	bpl.n	8007eb4 <_printf_float+0x194>
 8007ede:	1c4b      	adds	r3, r1, #1
 8007ee0:	e7e7      	b.n	8007eb2 <_printf_float+0x192>
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	bfd4      	ite	le
 8007ee6:	f1c1 0202 	rsble	r2, r1, #2
 8007eea:	2201      	movgt	r2, #1
 8007eec:	4413      	add	r3, r2
 8007eee:	e7e0      	b.n	8007eb2 <_printf_float+0x192>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	055a      	lsls	r2, r3, #21
 8007ef4:	d407      	bmi.n	8007f06 <_printf_float+0x1e6>
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	4642      	mov	r2, r8
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	d12b      	bne.n	8007f5c <_printf_float+0x23c>
 8007f04:	e767      	b.n	8007dd6 <_printf_float+0xb6>
 8007f06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f0a:	f240 80dd 	bls.w	80080c8 <_printf_float+0x3a8>
 8007f0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f12:	2200      	movs	r2, #0
 8007f14:	2300      	movs	r3, #0
 8007f16:	f7f8 fdef 	bl	8000af8 <__aeabi_dcmpeq>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d033      	beq.n	8007f86 <_printf_float+0x266>
 8007f1e:	4a37      	ldr	r2, [pc, #220]	@ (8007ffc <_printf_float+0x2dc>)
 8007f20:	2301      	movs	r3, #1
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f af54 	beq.w	8007dd6 <_printf_float+0xb6>
 8007f2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f32:	4543      	cmp	r3, r8
 8007f34:	db02      	blt.n	8007f3c <_printf_float+0x21c>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	07d8      	lsls	r0, r3, #31
 8007f3a:	d50f      	bpl.n	8007f5c <_printf_float+0x23c>
 8007f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f af45 	beq.w	8007dd6 <_printf_float+0xb6>
 8007f4c:	f04f 0900 	mov.w	r9, #0
 8007f50:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f54:	f104 0a1a 	add.w	sl, r4, #26
 8007f58:	45c8      	cmp	r8, r9
 8007f5a:	dc09      	bgt.n	8007f70 <_printf_float+0x250>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	f100 8103 	bmi.w	800816a <_printf_float+0x44a>
 8007f64:	68e0      	ldr	r0, [r4, #12]
 8007f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f68:	4298      	cmp	r0, r3
 8007f6a:	bfb8      	it	lt
 8007f6c:	4618      	movlt	r0, r3
 8007f6e:	e734      	b.n	8007dda <_printf_float+0xba>
 8007f70:	2301      	movs	r3, #1
 8007f72:	4652      	mov	r2, sl
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f af2b 	beq.w	8007dd6 <_printf_float+0xb6>
 8007f80:	f109 0901 	add.w	r9, r9, #1
 8007f84:	e7e8      	b.n	8007f58 <_printf_float+0x238>
 8007f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dc39      	bgt.n	8008000 <_printf_float+0x2e0>
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ffc <_printf_float+0x2dc>)
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f af1d 	beq.w	8007dd6 <_printf_float+0xb6>
 8007f9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fa0:	ea59 0303 	orrs.w	r3, r9, r3
 8007fa4:	d102      	bne.n	8007fac <_printf_float+0x28c>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	07d9      	lsls	r1, r3, #31
 8007faa:	d5d7      	bpl.n	8007f5c <_printf_float+0x23c>
 8007fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af0d 	beq.w	8007dd6 <_printf_float+0xb6>
 8007fbc:	f04f 0a00 	mov.w	sl, #0
 8007fc0:	f104 0b1a 	add.w	fp, r4, #26
 8007fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc6:	425b      	negs	r3, r3
 8007fc8:	4553      	cmp	r3, sl
 8007fca:	dc01      	bgt.n	8007fd0 <_printf_float+0x2b0>
 8007fcc:	464b      	mov	r3, r9
 8007fce:	e793      	b.n	8007ef8 <_printf_float+0x1d8>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	465a      	mov	r2, fp
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f aefb 	beq.w	8007dd6 <_printf_float+0xb6>
 8007fe0:	f10a 0a01 	add.w	sl, sl, #1
 8007fe4:	e7ee      	b.n	8007fc4 <_printf_float+0x2a4>
 8007fe6:	bf00      	nop
 8007fe8:	7fefffff 	.word	0x7fefffff
 8007fec:	0800b7c8 	.word	0x0800b7c8
 8007ff0:	0800b7cc 	.word	0x0800b7cc
 8007ff4:	0800b7d0 	.word	0x0800b7d0
 8007ff8:	0800b7d4 	.word	0x0800b7d4
 8007ffc:	0800b7d8 	.word	0x0800b7d8
 8008000:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008002:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008006:	4553      	cmp	r3, sl
 8008008:	bfa8      	it	ge
 800800a:	4653      	movge	r3, sl
 800800c:	2b00      	cmp	r3, #0
 800800e:	4699      	mov	r9, r3
 8008010:	dc36      	bgt.n	8008080 <_printf_float+0x360>
 8008012:	f04f 0b00 	mov.w	fp, #0
 8008016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801a:	f104 021a 	add.w	r2, r4, #26
 800801e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008020:	9306      	str	r3, [sp, #24]
 8008022:	eba3 0309 	sub.w	r3, r3, r9
 8008026:	455b      	cmp	r3, fp
 8008028:	dc31      	bgt.n	800808e <_printf_float+0x36e>
 800802a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802c:	459a      	cmp	sl, r3
 800802e:	dc3a      	bgt.n	80080a6 <_printf_float+0x386>
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	07da      	lsls	r2, r3, #31
 8008034:	d437      	bmi.n	80080a6 <_printf_float+0x386>
 8008036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008038:	ebaa 0903 	sub.w	r9, sl, r3
 800803c:	9b06      	ldr	r3, [sp, #24]
 800803e:	ebaa 0303 	sub.w	r3, sl, r3
 8008042:	4599      	cmp	r9, r3
 8008044:	bfa8      	it	ge
 8008046:	4699      	movge	r9, r3
 8008048:	f1b9 0f00 	cmp.w	r9, #0
 800804c:	dc33      	bgt.n	80080b6 <_printf_float+0x396>
 800804e:	f04f 0800 	mov.w	r8, #0
 8008052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008056:	f104 0b1a 	add.w	fp, r4, #26
 800805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805c:	ebaa 0303 	sub.w	r3, sl, r3
 8008060:	eba3 0309 	sub.w	r3, r3, r9
 8008064:	4543      	cmp	r3, r8
 8008066:	f77f af79 	ble.w	8007f5c <_printf_float+0x23c>
 800806a:	2301      	movs	r3, #1
 800806c:	465a      	mov	r2, fp
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f aeae 	beq.w	8007dd6 <_printf_float+0xb6>
 800807a:	f108 0801 	add.w	r8, r8, #1
 800807e:	e7ec      	b.n	800805a <_printf_float+0x33a>
 8008080:	4642      	mov	r2, r8
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	d1c2      	bne.n	8008012 <_printf_float+0x2f2>
 800808c:	e6a3      	b.n	8007dd6 <_printf_float+0xb6>
 800808e:	2301      	movs	r3, #1
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	9206      	str	r2, [sp, #24]
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	f43f ae9c 	beq.w	8007dd6 <_printf_float+0xb6>
 800809e:	9a06      	ldr	r2, [sp, #24]
 80080a0:	f10b 0b01 	add.w	fp, fp, #1
 80080a4:	e7bb      	b.n	800801e <_printf_float+0x2fe>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	d1c0      	bne.n	8008036 <_printf_float+0x316>
 80080b4:	e68f      	b.n	8007dd6 <_printf_float+0xb6>
 80080b6:	9a06      	ldr	r2, [sp, #24]
 80080b8:	464b      	mov	r3, r9
 80080ba:	4442      	add	r2, r8
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	d1c3      	bne.n	800804e <_printf_float+0x32e>
 80080c6:	e686      	b.n	8007dd6 <_printf_float+0xb6>
 80080c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080cc:	f1ba 0f01 	cmp.w	sl, #1
 80080d0:	dc01      	bgt.n	80080d6 <_printf_float+0x3b6>
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d536      	bpl.n	8008144 <_printf_float+0x424>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4642      	mov	r2, r8
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f ae78 	beq.w	8007dd6 <_printf_float+0xb6>
 80080e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f ae70 	beq.w	8007dd6 <_printf_float+0xb6>
 80080f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080fa:	2200      	movs	r2, #0
 80080fc:	2300      	movs	r3, #0
 80080fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008102:	f7f8 fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 8008106:	b9c0      	cbnz	r0, 800813a <_printf_float+0x41a>
 8008108:	4653      	mov	r3, sl
 800810a:	f108 0201 	add.w	r2, r8, #1
 800810e:	4631      	mov	r1, r6
 8008110:	4628      	mov	r0, r5
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	d10c      	bne.n	8008132 <_printf_float+0x412>
 8008118:	e65d      	b.n	8007dd6 <_printf_float+0xb6>
 800811a:	2301      	movs	r3, #1
 800811c:	465a      	mov	r2, fp
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f ae56 	beq.w	8007dd6 <_printf_float+0xb6>
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	45d0      	cmp	r8, sl
 8008130:	dbf3      	blt.n	800811a <_printf_float+0x3fa>
 8008132:	464b      	mov	r3, r9
 8008134:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008138:	e6df      	b.n	8007efa <_printf_float+0x1da>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	f104 0b1a 	add.w	fp, r4, #26
 8008142:	e7f4      	b.n	800812e <_printf_float+0x40e>
 8008144:	2301      	movs	r3, #1
 8008146:	4642      	mov	r2, r8
 8008148:	e7e1      	b.n	800810e <_printf_float+0x3ee>
 800814a:	2301      	movs	r3, #1
 800814c:	464a      	mov	r2, r9
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f ae3e 	beq.w	8007dd6 <_printf_float+0xb6>
 800815a:	f108 0801 	add.w	r8, r8, #1
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008162:	1a5b      	subs	r3, r3, r1
 8008164:	4543      	cmp	r3, r8
 8008166:	dcf0      	bgt.n	800814a <_printf_float+0x42a>
 8008168:	e6fc      	b.n	8007f64 <_printf_float+0x244>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0919 	add.w	r9, r4, #25
 8008172:	e7f4      	b.n	800815e <_printf_float+0x43e>

08008174 <_printf_common>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	4616      	mov	r6, r2
 800817a:	4698      	mov	r8, r3
 800817c:	688a      	ldr	r2, [r1, #8]
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008184:	4293      	cmp	r3, r2
 8008186:	bfb8      	it	lt
 8008188:	4613      	movlt	r3, r2
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008190:	4607      	mov	r7, r0
 8008192:	460c      	mov	r4, r1
 8008194:	b10a      	cbz	r2, 800819a <_printf_common+0x26>
 8008196:	3301      	adds	r3, #1
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	0699      	lsls	r1, r3, #26
 800819e:	bf42      	ittt	mi
 80081a0:	6833      	ldrmi	r3, [r6, #0]
 80081a2:	3302      	addmi	r3, #2
 80081a4:	6033      	strmi	r3, [r6, #0]
 80081a6:	6825      	ldr	r5, [r4, #0]
 80081a8:	f015 0506 	ands.w	r5, r5, #6
 80081ac:	d106      	bne.n	80081bc <_printf_common+0x48>
 80081ae:	f104 0a19 	add.w	sl, r4, #25
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	6832      	ldr	r2, [r6, #0]
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	dc26      	bgt.n	800820a <_printf_common+0x96>
 80081bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	3b00      	subs	r3, #0
 80081c4:	bf18      	it	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	0692      	lsls	r2, r2, #26
 80081ca:	d42b      	bmi.n	8008224 <_printf_common+0xb0>
 80081cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081d0:	4641      	mov	r1, r8
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c8      	blx	r9
 80081d6:	3001      	adds	r0, #1
 80081d8:	d01e      	beq.n	8008218 <_printf_common+0xa4>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	6922      	ldr	r2, [r4, #16]
 80081de:	f003 0306 	and.w	r3, r3, #6
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	bf02      	ittt	eq
 80081e6:	68e5      	ldreq	r5, [r4, #12]
 80081e8:	6833      	ldreq	r3, [r6, #0]
 80081ea:	1aed      	subeq	r5, r5, r3
 80081ec:	68a3      	ldr	r3, [r4, #8]
 80081ee:	bf0c      	ite	eq
 80081f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f4:	2500      	movne	r5, #0
 80081f6:	4293      	cmp	r3, r2
 80081f8:	bfc4      	itt	gt
 80081fa:	1a9b      	subgt	r3, r3, r2
 80081fc:	18ed      	addgt	r5, r5, r3
 80081fe:	2600      	movs	r6, #0
 8008200:	341a      	adds	r4, #26
 8008202:	42b5      	cmp	r5, r6
 8008204:	d11a      	bne.n	800823c <_printf_common+0xc8>
 8008206:	2000      	movs	r0, #0
 8008208:	e008      	b.n	800821c <_printf_common+0xa8>
 800820a:	2301      	movs	r3, #1
 800820c:	4652      	mov	r2, sl
 800820e:	4641      	mov	r1, r8
 8008210:	4638      	mov	r0, r7
 8008212:	47c8      	blx	r9
 8008214:	3001      	adds	r0, #1
 8008216:	d103      	bne.n	8008220 <_printf_common+0xac>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008220:	3501      	adds	r5, #1
 8008222:	e7c6      	b.n	80081b2 <_printf_common+0x3e>
 8008224:	18e1      	adds	r1, r4, r3
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	2030      	movs	r0, #48	@ 0x30
 800822a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800822e:	4422      	add	r2, r4
 8008230:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008234:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008238:	3302      	adds	r3, #2
 800823a:	e7c7      	b.n	80081cc <_printf_common+0x58>
 800823c:	2301      	movs	r3, #1
 800823e:	4622      	mov	r2, r4
 8008240:	4641      	mov	r1, r8
 8008242:	4638      	mov	r0, r7
 8008244:	47c8      	blx	r9
 8008246:	3001      	adds	r0, #1
 8008248:	d0e6      	beq.n	8008218 <_printf_common+0xa4>
 800824a:	3601      	adds	r6, #1
 800824c:	e7d9      	b.n	8008202 <_printf_common+0x8e>
	...

08008250 <_printf_i>:
 8008250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	7e0f      	ldrb	r7, [r1, #24]
 8008256:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008258:	2f78      	cmp	r7, #120	@ 0x78
 800825a:	4691      	mov	r9, r2
 800825c:	4680      	mov	r8, r0
 800825e:	460c      	mov	r4, r1
 8008260:	469a      	mov	sl, r3
 8008262:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008266:	d807      	bhi.n	8008278 <_printf_i+0x28>
 8008268:	2f62      	cmp	r7, #98	@ 0x62
 800826a:	d80a      	bhi.n	8008282 <_printf_i+0x32>
 800826c:	2f00      	cmp	r7, #0
 800826e:	f000 80d2 	beq.w	8008416 <_printf_i+0x1c6>
 8008272:	2f58      	cmp	r7, #88	@ 0x58
 8008274:	f000 80b9 	beq.w	80083ea <_printf_i+0x19a>
 8008278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800827c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008280:	e03a      	b.n	80082f8 <_printf_i+0xa8>
 8008282:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008286:	2b15      	cmp	r3, #21
 8008288:	d8f6      	bhi.n	8008278 <_printf_i+0x28>
 800828a:	a101      	add	r1, pc, #4	@ (adr r1, 8008290 <_printf_i+0x40>)
 800828c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008290:	080082e9 	.word	0x080082e9
 8008294:	080082fd 	.word	0x080082fd
 8008298:	08008279 	.word	0x08008279
 800829c:	08008279 	.word	0x08008279
 80082a0:	08008279 	.word	0x08008279
 80082a4:	08008279 	.word	0x08008279
 80082a8:	080082fd 	.word	0x080082fd
 80082ac:	08008279 	.word	0x08008279
 80082b0:	08008279 	.word	0x08008279
 80082b4:	08008279 	.word	0x08008279
 80082b8:	08008279 	.word	0x08008279
 80082bc:	080083fd 	.word	0x080083fd
 80082c0:	08008327 	.word	0x08008327
 80082c4:	080083b7 	.word	0x080083b7
 80082c8:	08008279 	.word	0x08008279
 80082cc:	08008279 	.word	0x08008279
 80082d0:	0800841f 	.word	0x0800841f
 80082d4:	08008279 	.word	0x08008279
 80082d8:	08008327 	.word	0x08008327
 80082dc:	08008279 	.word	0x08008279
 80082e0:	08008279 	.word	0x08008279
 80082e4:	080083bf 	.word	0x080083bf
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	1d1a      	adds	r2, r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6032      	str	r2, [r6, #0]
 80082f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082f8:	2301      	movs	r3, #1
 80082fa:	e09d      	b.n	8008438 <_printf_i+0x1e8>
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	1d19      	adds	r1, r3, #4
 8008302:	6031      	str	r1, [r6, #0]
 8008304:	0606      	lsls	r6, r0, #24
 8008306:	d501      	bpl.n	800830c <_printf_i+0xbc>
 8008308:	681d      	ldr	r5, [r3, #0]
 800830a:	e003      	b.n	8008314 <_printf_i+0xc4>
 800830c:	0645      	lsls	r5, r0, #25
 800830e:	d5fb      	bpl.n	8008308 <_printf_i+0xb8>
 8008310:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008314:	2d00      	cmp	r5, #0
 8008316:	da03      	bge.n	8008320 <_printf_i+0xd0>
 8008318:	232d      	movs	r3, #45	@ 0x2d
 800831a:	426d      	negs	r5, r5
 800831c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008320:	4859      	ldr	r0, [pc, #356]	@ (8008488 <_printf_i+0x238>)
 8008322:	230a      	movs	r3, #10
 8008324:	e011      	b.n	800834a <_printf_i+0xfa>
 8008326:	6821      	ldr	r1, [r4, #0]
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	0608      	lsls	r0, r1, #24
 800832c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008330:	d402      	bmi.n	8008338 <_printf_i+0xe8>
 8008332:	0649      	lsls	r1, r1, #25
 8008334:	bf48      	it	mi
 8008336:	b2ad      	uxthmi	r5, r5
 8008338:	2f6f      	cmp	r7, #111	@ 0x6f
 800833a:	4853      	ldr	r0, [pc, #332]	@ (8008488 <_printf_i+0x238>)
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	bf14      	ite	ne
 8008340:	230a      	movne	r3, #10
 8008342:	2308      	moveq	r3, #8
 8008344:	2100      	movs	r1, #0
 8008346:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800834a:	6866      	ldr	r6, [r4, #4]
 800834c:	60a6      	str	r6, [r4, #8]
 800834e:	2e00      	cmp	r6, #0
 8008350:	bfa2      	ittt	ge
 8008352:	6821      	ldrge	r1, [r4, #0]
 8008354:	f021 0104 	bicge.w	r1, r1, #4
 8008358:	6021      	strge	r1, [r4, #0]
 800835a:	b90d      	cbnz	r5, 8008360 <_printf_i+0x110>
 800835c:	2e00      	cmp	r6, #0
 800835e:	d04b      	beq.n	80083f8 <_printf_i+0x1a8>
 8008360:	4616      	mov	r6, r2
 8008362:	fbb5 f1f3 	udiv	r1, r5, r3
 8008366:	fb03 5711 	mls	r7, r3, r1, r5
 800836a:	5dc7      	ldrb	r7, [r0, r7]
 800836c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008370:	462f      	mov	r7, r5
 8008372:	42bb      	cmp	r3, r7
 8008374:	460d      	mov	r5, r1
 8008376:	d9f4      	bls.n	8008362 <_printf_i+0x112>
 8008378:	2b08      	cmp	r3, #8
 800837a:	d10b      	bne.n	8008394 <_printf_i+0x144>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	07df      	lsls	r7, r3, #31
 8008380:	d508      	bpl.n	8008394 <_printf_i+0x144>
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	6861      	ldr	r1, [r4, #4]
 8008386:	4299      	cmp	r1, r3
 8008388:	bfde      	ittt	le
 800838a:	2330      	movle	r3, #48	@ 0x30
 800838c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008390:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008394:	1b92      	subs	r2, r2, r6
 8008396:	6122      	str	r2, [r4, #16]
 8008398:	f8cd a000 	str.w	sl, [sp]
 800839c:	464b      	mov	r3, r9
 800839e:	aa03      	add	r2, sp, #12
 80083a0:	4621      	mov	r1, r4
 80083a2:	4640      	mov	r0, r8
 80083a4:	f7ff fee6 	bl	8008174 <_printf_common>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d14a      	bne.n	8008442 <_printf_i+0x1f2>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	b004      	add	sp, #16
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	f043 0320 	orr.w	r3, r3, #32
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	4833      	ldr	r0, [pc, #204]	@ (800848c <_printf_i+0x23c>)
 80083c0:	2778      	movs	r7, #120	@ 0x78
 80083c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	6831      	ldr	r1, [r6, #0]
 80083ca:	061f      	lsls	r7, r3, #24
 80083cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80083d0:	d402      	bmi.n	80083d8 <_printf_i+0x188>
 80083d2:	065f      	lsls	r7, r3, #25
 80083d4:	bf48      	it	mi
 80083d6:	b2ad      	uxthmi	r5, r5
 80083d8:	6031      	str	r1, [r6, #0]
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	bf44      	itt	mi
 80083de:	f043 0320 	orrmi.w	r3, r3, #32
 80083e2:	6023      	strmi	r3, [r4, #0]
 80083e4:	b11d      	cbz	r5, 80083ee <_printf_i+0x19e>
 80083e6:	2310      	movs	r3, #16
 80083e8:	e7ac      	b.n	8008344 <_printf_i+0xf4>
 80083ea:	4827      	ldr	r0, [pc, #156]	@ (8008488 <_printf_i+0x238>)
 80083ec:	e7e9      	b.n	80083c2 <_printf_i+0x172>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	f023 0320 	bic.w	r3, r3, #32
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	e7f6      	b.n	80083e6 <_printf_i+0x196>
 80083f8:	4616      	mov	r6, r2
 80083fa:	e7bd      	b.n	8008378 <_printf_i+0x128>
 80083fc:	6833      	ldr	r3, [r6, #0]
 80083fe:	6825      	ldr	r5, [r4, #0]
 8008400:	6961      	ldr	r1, [r4, #20]
 8008402:	1d18      	adds	r0, r3, #4
 8008404:	6030      	str	r0, [r6, #0]
 8008406:	062e      	lsls	r6, r5, #24
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	d501      	bpl.n	8008410 <_printf_i+0x1c0>
 800840c:	6019      	str	r1, [r3, #0]
 800840e:	e002      	b.n	8008416 <_printf_i+0x1c6>
 8008410:	0668      	lsls	r0, r5, #25
 8008412:	d5fb      	bpl.n	800840c <_printf_i+0x1bc>
 8008414:	8019      	strh	r1, [r3, #0]
 8008416:	2300      	movs	r3, #0
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	4616      	mov	r6, r2
 800841c:	e7bc      	b.n	8008398 <_printf_i+0x148>
 800841e:	6833      	ldr	r3, [r6, #0]
 8008420:	1d1a      	adds	r2, r3, #4
 8008422:	6032      	str	r2, [r6, #0]
 8008424:	681e      	ldr	r6, [r3, #0]
 8008426:	6862      	ldr	r2, [r4, #4]
 8008428:	2100      	movs	r1, #0
 800842a:	4630      	mov	r0, r6
 800842c:	f7f7 fee8 	bl	8000200 <memchr>
 8008430:	b108      	cbz	r0, 8008436 <_printf_i+0x1e6>
 8008432:	1b80      	subs	r0, r0, r6
 8008434:	6060      	str	r0, [r4, #4]
 8008436:	6863      	ldr	r3, [r4, #4]
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	2300      	movs	r3, #0
 800843c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008440:	e7aa      	b.n	8008398 <_printf_i+0x148>
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	4632      	mov	r2, r6
 8008446:	4649      	mov	r1, r9
 8008448:	4640      	mov	r0, r8
 800844a:	47d0      	blx	sl
 800844c:	3001      	adds	r0, #1
 800844e:	d0ad      	beq.n	80083ac <_printf_i+0x15c>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	079b      	lsls	r3, r3, #30
 8008454:	d413      	bmi.n	800847e <_printf_i+0x22e>
 8008456:	68e0      	ldr	r0, [r4, #12]
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	4298      	cmp	r0, r3
 800845c:	bfb8      	it	lt
 800845e:	4618      	movlt	r0, r3
 8008460:	e7a6      	b.n	80083b0 <_printf_i+0x160>
 8008462:	2301      	movs	r3, #1
 8008464:	4632      	mov	r2, r6
 8008466:	4649      	mov	r1, r9
 8008468:	4640      	mov	r0, r8
 800846a:	47d0      	blx	sl
 800846c:	3001      	adds	r0, #1
 800846e:	d09d      	beq.n	80083ac <_printf_i+0x15c>
 8008470:	3501      	adds	r5, #1
 8008472:	68e3      	ldr	r3, [r4, #12]
 8008474:	9903      	ldr	r1, [sp, #12]
 8008476:	1a5b      	subs	r3, r3, r1
 8008478:	42ab      	cmp	r3, r5
 800847a:	dcf2      	bgt.n	8008462 <_printf_i+0x212>
 800847c:	e7eb      	b.n	8008456 <_printf_i+0x206>
 800847e:	2500      	movs	r5, #0
 8008480:	f104 0619 	add.w	r6, r4, #25
 8008484:	e7f5      	b.n	8008472 <_printf_i+0x222>
 8008486:	bf00      	nop
 8008488:	0800b7da 	.word	0x0800b7da
 800848c:	0800b7eb 	.word	0x0800b7eb

08008490 <std>:
 8008490:	2300      	movs	r3, #0
 8008492:	b510      	push	{r4, lr}
 8008494:	4604      	mov	r4, r0
 8008496:	e9c0 3300 	strd	r3, r3, [r0]
 800849a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800849e:	6083      	str	r3, [r0, #8]
 80084a0:	8181      	strh	r1, [r0, #12]
 80084a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80084a4:	81c2      	strh	r2, [r0, #14]
 80084a6:	6183      	str	r3, [r0, #24]
 80084a8:	4619      	mov	r1, r3
 80084aa:	2208      	movs	r2, #8
 80084ac:	305c      	adds	r0, #92	@ 0x5c
 80084ae:	f000 fa21 	bl	80088f4 <memset>
 80084b2:	4b0d      	ldr	r3, [pc, #52]	@ (80084e8 <std+0x58>)
 80084b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <std+0x5c>)
 80084b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x60>)
 80084bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x64>)
 80084c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x68>)
 80084c4:	6224      	str	r4, [r4, #32]
 80084c6:	429c      	cmp	r4, r3
 80084c8:	d006      	beq.n	80084d8 <std+0x48>
 80084ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084ce:	4294      	cmp	r4, r2
 80084d0:	d002      	beq.n	80084d8 <std+0x48>
 80084d2:	33d0      	adds	r3, #208	@ 0xd0
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d105      	bne.n	80084e4 <std+0x54>
 80084d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e0:	f000 bb16 	b.w	8008b10 <__retarget_lock_init_recursive>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	bf00      	nop
 80084e8:	08008745 	.word	0x08008745
 80084ec:	08008767 	.word	0x08008767
 80084f0:	0800879f 	.word	0x0800879f
 80084f4:	080087c3 	.word	0x080087c3
 80084f8:	20000c14 	.word	0x20000c14

080084fc <stdio_exit_handler>:
 80084fc:	4a02      	ldr	r2, [pc, #8]	@ (8008508 <stdio_exit_handler+0xc>)
 80084fe:	4903      	ldr	r1, [pc, #12]	@ (800850c <stdio_exit_handler+0x10>)
 8008500:	4803      	ldr	r0, [pc, #12]	@ (8008510 <stdio_exit_handler+0x14>)
 8008502:	f000 b869 	b.w	80085d8 <_fwalk_sglue>
 8008506:	bf00      	nop
 8008508:	20000010 	.word	0x20000010
 800850c:	0800b081 	.word	0x0800b081
 8008510:	2000018c 	.word	0x2000018c

08008514 <cleanup_stdio>:
 8008514:	6841      	ldr	r1, [r0, #4]
 8008516:	4b0c      	ldr	r3, [pc, #48]	@ (8008548 <cleanup_stdio+0x34>)
 8008518:	4299      	cmp	r1, r3
 800851a:	b510      	push	{r4, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	d001      	beq.n	8008524 <cleanup_stdio+0x10>
 8008520:	f002 fdae 	bl	800b080 <_fflush_r>
 8008524:	68a1      	ldr	r1, [r4, #8]
 8008526:	4b09      	ldr	r3, [pc, #36]	@ (800854c <cleanup_stdio+0x38>)
 8008528:	4299      	cmp	r1, r3
 800852a:	d002      	beq.n	8008532 <cleanup_stdio+0x1e>
 800852c:	4620      	mov	r0, r4
 800852e:	f002 fda7 	bl	800b080 <_fflush_r>
 8008532:	68e1      	ldr	r1, [r4, #12]
 8008534:	4b06      	ldr	r3, [pc, #24]	@ (8008550 <cleanup_stdio+0x3c>)
 8008536:	4299      	cmp	r1, r3
 8008538:	d004      	beq.n	8008544 <cleanup_stdio+0x30>
 800853a:	4620      	mov	r0, r4
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f002 bd9e 	b.w	800b080 <_fflush_r>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	20000c14 	.word	0x20000c14
 800854c:	20000c7c 	.word	0x20000c7c
 8008550:	20000ce4 	.word	0x20000ce4

08008554 <global_stdio_init.part.0>:
 8008554:	b510      	push	{r4, lr}
 8008556:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <global_stdio_init.part.0+0x30>)
 8008558:	4c0b      	ldr	r4, [pc, #44]	@ (8008588 <global_stdio_init.part.0+0x34>)
 800855a:	4a0c      	ldr	r2, [pc, #48]	@ (800858c <global_stdio_init.part.0+0x38>)
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	4620      	mov	r0, r4
 8008560:	2200      	movs	r2, #0
 8008562:	2104      	movs	r1, #4
 8008564:	f7ff ff94 	bl	8008490 <std>
 8008568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800856c:	2201      	movs	r2, #1
 800856e:	2109      	movs	r1, #9
 8008570:	f7ff ff8e 	bl	8008490 <std>
 8008574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008578:	2202      	movs	r2, #2
 800857a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857e:	2112      	movs	r1, #18
 8008580:	f7ff bf86 	b.w	8008490 <std>
 8008584:	20000d4c 	.word	0x20000d4c
 8008588:	20000c14 	.word	0x20000c14
 800858c:	080084fd 	.word	0x080084fd

08008590 <__sfp_lock_acquire>:
 8008590:	4801      	ldr	r0, [pc, #4]	@ (8008598 <__sfp_lock_acquire+0x8>)
 8008592:	f000 babe 	b.w	8008b12 <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	20000d55 	.word	0x20000d55

0800859c <__sfp_lock_release>:
 800859c:	4801      	ldr	r0, [pc, #4]	@ (80085a4 <__sfp_lock_release+0x8>)
 800859e:	f000 bab9 	b.w	8008b14 <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	20000d55 	.word	0x20000d55

080085a8 <__sinit>:
 80085a8:	b510      	push	{r4, lr}
 80085aa:	4604      	mov	r4, r0
 80085ac:	f7ff fff0 	bl	8008590 <__sfp_lock_acquire>
 80085b0:	6a23      	ldr	r3, [r4, #32]
 80085b2:	b11b      	cbz	r3, 80085bc <__sinit+0x14>
 80085b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b8:	f7ff bff0 	b.w	800859c <__sfp_lock_release>
 80085bc:	4b04      	ldr	r3, [pc, #16]	@ (80085d0 <__sinit+0x28>)
 80085be:	6223      	str	r3, [r4, #32]
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <__sinit+0x2c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f5      	bne.n	80085b4 <__sinit+0xc>
 80085c8:	f7ff ffc4 	bl	8008554 <global_stdio_init.part.0>
 80085cc:	e7f2      	b.n	80085b4 <__sinit+0xc>
 80085ce:	bf00      	nop
 80085d0:	08008515 	.word	0x08008515
 80085d4:	20000d4c 	.word	0x20000d4c

080085d8 <_fwalk_sglue>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4607      	mov	r7, r0
 80085de:	4688      	mov	r8, r1
 80085e0:	4614      	mov	r4, r2
 80085e2:	2600      	movs	r6, #0
 80085e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085e8:	f1b9 0901 	subs.w	r9, r9, #1
 80085ec:	d505      	bpl.n	80085fa <_fwalk_sglue+0x22>
 80085ee:	6824      	ldr	r4, [r4, #0]
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	d1f7      	bne.n	80085e4 <_fwalk_sglue+0xc>
 80085f4:	4630      	mov	r0, r6
 80085f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d907      	bls.n	8008610 <_fwalk_sglue+0x38>
 8008600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008604:	3301      	adds	r3, #1
 8008606:	d003      	beq.n	8008610 <_fwalk_sglue+0x38>
 8008608:	4629      	mov	r1, r5
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	4306      	orrs	r6, r0
 8008610:	3568      	adds	r5, #104	@ 0x68
 8008612:	e7e9      	b.n	80085e8 <_fwalk_sglue+0x10>

08008614 <iprintf>:
 8008614:	b40f      	push	{r0, r1, r2, r3}
 8008616:	b507      	push	{r0, r1, r2, lr}
 8008618:	4906      	ldr	r1, [pc, #24]	@ (8008634 <iprintf+0x20>)
 800861a:	ab04      	add	r3, sp, #16
 800861c:	6808      	ldr	r0, [r1, #0]
 800861e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008622:	6881      	ldr	r1, [r0, #8]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	f002 fb8f 	bl	800ad48 <_vfiprintf_r>
 800862a:	b003      	add	sp, #12
 800862c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008630:	b004      	add	sp, #16
 8008632:	4770      	bx	lr
 8008634:	20000188 	.word	0x20000188

08008638 <putchar>:
 8008638:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <putchar+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	6882      	ldr	r2, [r0, #8]
 8008640:	f002 bdba 	b.w	800b1b8 <_putc_r>
 8008644:	20000188 	.word	0x20000188

08008648 <_puts_r>:
 8008648:	6a03      	ldr	r3, [r0, #32]
 800864a:	b570      	push	{r4, r5, r6, lr}
 800864c:	6884      	ldr	r4, [r0, #8]
 800864e:	4605      	mov	r5, r0
 8008650:	460e      	mov	r6, r1
 8008652:	b90b      	cbnz	r3, 8008658 <_puts_r+0x10>
 8008654:	f7ff ffa8 	bl	80085a8 <__sinit>
 8008658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800865a:	07db      	lsls	r3, r3, #31
 800865c:	d405      	bmi.n	800866a <_puts_r+0x22>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	0598      	lsls	r0, r3, #22
 8008662:	d402      	bmi.n	800866a <_puts_r+0x22>
 8008664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008666:	f000 fa54 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	0719      	lsls	r1, r3, #28
 800866e:	d502      	bpl.n	8008676 <_puts_r+0x2e>
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d135      	bne.n	80086e2 <_puts_r+0x9a>
 8008676:	4621      	mov	r1, r4
 8008678:	4628      	mov	r0, r5
 800867a:	f000 f8e5 	bl	8008848 <__swsetup_r>
 800867e:	b380      	cbz	r0, 80086e2 <_puts_r+0x9a>
 8008680:	f04f 35ff 	mov.w	r5, #4294967295
 8008684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008686:	07da      	lsls	r2, r3, #31
 8008688:	d405      	bmi.n	8008696 <_puts_r+0x4e>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	059b      	lsls	r3, r3, #22
 800868e:	d402      	bmi.n	8008696 <_puts_r+0x4e>
 8008690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008692:	f000 fa3f 	bl	8008b14 <__retarget_lock_release_recursive>
 8008696:	4628      	mov	r0, r5
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	2b00      	cmp	r3, #0
 800869c:	da04      	bge.n	80086a8 <_puts_r+0x60>
 800869e:	69a2      	ldr	r2, [r4, #24]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	dc17      	bgt.n	80086d4 <_puts_r+0x8c>
 80086a4:	290a      	cmp	r1, #10
 80086a6:	d015      	beq.n	80086d4 <_puts_r+0x8c>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	6022      	str	r2, [r4, #0]
 80086ae:	7019      	strb	r1, [r3, #0]
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086b6:	3b01      	subs	r3, #1
 80086b8:	60a3      	str	r3, [r4, #8]
 80086ba:	2900      	cmp	r1, #0
 80086bc:	d1ed      	bne.n	800869a <_puts_r+0x52>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da11      	bge.n	80086e6 <_puts_r+0x9e>
 80086c2:	4622      	mov	r2, r4
 80086c4:	210a      	movs	r1, #10
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 f87f 	bl	80087ca <__swbuf_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d0d7      	beq.n	8008680 <_puts_r+0x38>
 80086d0:	250a      	movs	r5, #10
 80086d2:	e7d7      	b.n	8008684 <_puts_r+0x3c>
 80086d4:	4622      	mov	r2, r4
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 f877 	bl	80087ca <__swbuf_r>
 80086dc:	3001      	adds	r0, #1
 80086de:	d1e7      	bne.n	80086b0 <_puts_r+0x68>
 80086e0:	e7ce      	b.n	8008680 <_puts_r+0x38>
 80086e2:	3e01      	subs	r6, #1
 80086e4:	e7e4      	b.n	80086b0 <_puts_r+0x68>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	220a      	movs	r2, #10
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e7ee      	b.n	80086d0 <_puts_r+0x88>
	...

080086f4 <puts>:
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <puts+0xc>)
 80086f6:	4601      	mov	r1, r0
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	f7ff bfa5 	b.w	8008648 <_puts_r>
 80086fe:	bf00      	nop
 8008700:	20000188 	.word	0x20000188

08008704 <siprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b500      	push	{lr}
 8008708:	b09c      	sub	sp, #112	@ 0x70
 800870a:	ab1d      	add	r3, sp, #116	@ 0x74
 800870c:	9002      	str	r0, [sp, #8]
 800870e:	9006      	str	r0, [sp, #24]
 8008710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008714:	4809      	ldr	r0, [pc, #36]	@ (800873c <siprintf+0x38>)
 8008716:	9107      	str	r1, [sp, #28]
 8008718:	9104      	str	r1, [sp, #16]
 800871a:	4909      	ldr	r1, [pc, #36]	@ (8008740 <siprintf+0x3c>)
 800871c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008720:	9105      	str	r1, [sp, #20]
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	a902      	add	r1, sp, #8
 8008728:	f002 f9e8 	bl	800aafc <_svfiprintf_r>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	b01c      	add	sp, #112	@ 0x70
 8008734:	f85d eb04 	ldr.w	lr, [sp], #4
 8008738:	b003      	add	sp, #12
 800873a:	4770      	bx	lr
 800873c:	20000188 	.word	0x20000188
 8008740:	ffff0208 	.word	0xffff0208

08008744 <__sread>:
 8008744:	b510      	push	{r4, lr}
 8008746:	460c      	mov	r4, r1
 8008748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874c:	f000 f992 	bl	8008a74 <_read_r>
 8008750:	2800      	cmp	r0, #0
 8008752:	bfab      	itete	ge
 8008754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008756:	89a3      	ldrhlt	r3, [r4, #12]
 8008758:	181b      	addge	r3, r3, r0
 800875a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800875e:	bfac      	ite	ge
 8008760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008762:	81a3      	strhlt	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__swrite>:
 8008766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876a:	461f      	mov	r7, r3
 800876c:	898b      	ldrh	r3, [r1, #12]
 800876e:	05db      	lsls	r3, r3, #23
 8008770:	4605      	mov	r5, r0
 8008772:	460c      	mov	r4, r1
 8008774:	4616      	mov	r6, r2
 8008776:	d505      	bpl.n	8008784 <__swrite+0x1e>
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	2302      	movs	r3, #2
 800877e:	2200      	movs	r2, #0
 8008780:	f000 f966 	bl	8008a50 <_lseek_r>
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	4632      	mov	r2, r6
 8008792:	463b      	mov	r3, r7
 8008794:	4628      	mov	r0, r5
 8008796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	f000 b97d 	b.w	8008a98 <_write_r>

0800879e <__sseek>:
 800879e:	b510      	push	{r4, lr}
 80087a0:	460c      	mov	r4, r1
 80087a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a6:	f000 f953 	bl	8008a50 <_lseek_r>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	bf15      	itete	ne
 80087b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087ba:	81a3      	strheq	r3, [r4, #12]
 80087bc:	bf18      	it	ne
 80087be:	81a3      	strhne	r3, [r4, #12]
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <__sclose>:
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 b933 	b.w	8008a30 <_close_r>

080087ca <__swbuf_r>:
 80087ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087cc:	460e      	mov	r6, r1
 80087ce:	4614      	mov	r4, r2
 80087d0:	4605      	mov	r5, r0
 80087d2:	b118      	cbz	r0, 80087dc <__swbuf_r+0x12>
 80087d4:	6a03      	ldr	r3, [r0, #32]
 80087d6:	b90b      	cbnz	r3, 80087dc <__swbuf_r+0x12>
 80087d8:	f7ff fee6 	bl	80085a8 <__sinit>
 80087dc:	69a3      	ldr	r3, [r4, #24]
 80087de:	60a3      	str	r3, [r4, #8]
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	071a      	lsls	r2, r3, #28
 80087e4:	d501      	bpl.n	80087ea <__swbuf_r+0x20>
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	b943      	cbnz	r3, 80087fc <__swbuf_r+0x32>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4628      	mov	r0, r5
 80087ee:	f000 f82b 	bl	8008848 <__swsetup_r>
 80087f2:	b118      	cbz	r0, 80087fc <__swbuf_r+0x32>
 80087f4:	f04f 37ff 	mov.w	r7, #4294967295
 80087f8:	4638      	mov	r0, r7
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	6922      	ldr	r2, [r4, #16]
 8008800:	1a98      	subs	r0, r3, r2
 8008802:	6963      	ldr	r3, [r4, #20]
 8008804:	b2f6      	uxtb	r6, r6
 8008806:	4283      	cmp	r3, r0
 8008808:	4637      	mov	r7, r6
 800880a:	dc05      	bgt.n	8008818 <__swbuf_r+0x4e>
 800880c:	4621      	mov	r1, r4
 800880e:	4628      	mov	r0, r5
 8008810:	f002 fc36 	bl	800b080 <_fflush_r>
 8008814:	2800      	cmp	r0, #0
 8008816:	d1ed      	bne.n	80087f4 <__swbuf_r+0x2a>
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	3b01      	subs	r3, #1
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	6022      	str	r2, [r4, #0]
 8008824:	701e      	strb	r6, [r3, #0]
 8008826:	6962      	ldr	r2, [r4, #20]
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	429a      	cmp	r2, r3
 800882c:	d004      	beq.n	8008838 <__swbuf_r+0x6e>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	07db      	lsls	r3, r3, #31
 8008832:	d5e1      	bpl.n	80087f8 <__swbuf_r+0x2e>
 8008834:	2e0a      	cmp	r6, #10
 8008836:	d1df      	bne.n	80087f8 <__swbuf_r+0x2e>
 8008838:	4621      	mov	r1, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f002 fc20 	bl	800b080 <_fflush_r>
 8008840:	2800      	cmp	r0, #0
 8008842:	d0d9      	beq.n	80087f8 <__swbuf_r+0x2e>
 8008844:	e7d6      	b.n	80087f4 <__swbuf_r+0x2a>
	...

08008848 <__swsetup_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4b29      	ldr	r3, [pc, #164]	@ (80088f0 <__swsetup_r+0xa8>)
 800884c:	4605      	mov	r5, r0
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	460c      	mov	r4, r1
 8008852:	b118      	cbz	r0, 800885c <__swsetup_r+0x14>
 8008854:	6a03      	ldr	r3, [r0, #32]
 8008856:	b90b      	cbnz	r3, 800885c <__swsetup_r+0x14>
 8008858:	f7ff fea6 	bl	80085a8 <__sinit>
 800885c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008860:	0719      	lsls	r1, r3, #28
 8008862:	d422      	bmi.n	80088aa <__swsetup_r+0x62>
 8008864:	06da      	lsls	r2, r3, #27
 8008866:	d407      	bmi.n	8008878 <__swsetup_r+0x30>
 8008868:	2209      	movs	r2, #9
 800886a:	602a      	str	r2, [r5, #0]
 800886c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	e033      	b.n	80088e0 <__swsetup_r+0x98>
 8008878:	0758      	lsls	r0, r3, #29
 800887a:	d512      	bpl.n	80088a2 <__swsetup_r+0x5a>
 800887c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800887e:	b141      	cbz	r1, 8008892 <__swsetup_r+0x4a>
 8008880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008884:	4299      	cmp	r1, r3
 8008886:	d002      	beq.n	800888e <__swsetup_r+0x46>
 8008888:	4628      	mov	r0, r5
 800888a:	f000 ffd1 	bl	8009830 <_free_r>
 800888e:	2300      	movs	r3, #0
 8008890:	6363      	str	r3, [r4, #52]	@ 0x34
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	2300      	movs	r3, #0
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f043 0308 	orr.w	r3, r3, #8
 80088a8:	81a3      	strh	r3, [r4, #12]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	b94b      	cbnz	r3, 80088c2 <__swsetup_r+0x7a>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088b8:	d003      	beq.n	80088c2 <__swsetup_r+0x7a>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4628      	mov	r0, r5
 80088be:	f002 fc3f 	bl	800b140 <__smakebuf_r>
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	f013 0201 	ands.w	r2, r3, #1
 80088ca:	d00a      	beq.n	80088e2 <__swsetup_r+0x9a>
 80088cc:	2200      	movs	r2, #0
 80088ce:	60a2      	str	r2, [r4, #8]
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	4252      	negs	r2, r2
 80088d4:	61a2      	str	r2, [r4, #24]
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	b942      	cbnz	r2, 80088ec <__swsetup_r+0xa4>
 80088da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088de:	d1c5      	bne.n	800886c <__swsetup_r+0x24>
 80088e0:	bd38      	pop	{r3, r4, r5, pc}
 80088e2:	0799      	lsls	r1, r3, #30
 80088e4:	bf58      	it	pl
 80088e6:	6962      	ldrpl	r2, [r4, #20]
 80088e8:	60a2      	str	r2, [r4, #8]
 80088ea:	e7f4      	b.n	80088d6 <__swsetup_r+0x8e>
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7f7      	b.n	80088e0 <__swsetup_r+0x98>
 80088f0:	20000188 	.word	0x20000188

080088f4 <memset>:
 80088f4:	4402      	add	r2, r0
 80088f6:	4603      	mov	r3, r0
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d100      	bne.n	80088fe <memset+0xa>
 80088fc:	4770      	bx	lr
 80088fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008902:	e7f9      	b.n	80088f8 <memset+0x4>

08008904 <strchr>:
 8008904:	b2c9      	uxtb	r1, r1
 8008906:	4603      	mov	r3, r0
 8008908:	4618      	mov	r0, r3
 800890a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800890e:	b112      	cbz	r2, 8008916 <strchr+0x12>
 8008910:	428a      	cmp	r2, r1
 8008912:	d1f9      	bne.n	8008908 <strchr+0x4>
 8008914:	4770      	bx	lr
 8008916:	2900      	cmp	r1, #0
 8008918:	bf18      	it	ne
 800891a:	2000      	movne	r0, #0
 800891c:	4770      	bx	lr

0800891e <strncmp>:
 800891e:	b510      	push	{r4, lr}
 8008920:	b16a      	cbz	r2, 800893e <strncmp+0x20>
 8008922:	3901      	subs	r1, #1
 8008924:	1884      	adds	r4, r0, r2
 8008926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800892e:	429a      	cmp	r2, r3
 8008930:	d103      	bne.n	800893a <strncmp+0x1c>
 8008932:	42a0      	cmp	r0, r4
 8008934:	d001      	beq.n	800893a <strncmp+0x1c>
 8008936:	2a00      	cmp	r2, #0
 8008938:	d1f5      	bne.n	8008926 <strncmp+0x8>
 800893a:	1ad0      	subs	r0, r2, r3
 800893c:	bd10      	pop	{r4, pc}
 800893e:	4610      	mov	r0, r2
 8008940:	e7fc      	b.n	800893c <strncmp+0x1e>
	...

08008944 <strtok>:
 8008944:	4b16      	ldr	r3, [pc, #88]	@ (80089a0 <strtok+0x5c>)
 8008946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	681f      	ldr	r7, [r3, #0]
 800894c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800894e:	4605      	mov	r5, r0
 8008950:	460e      	mov	r6, r1
 8008952:	b9ec      	cbnz	r4, 8008990 <strtok+0x4c>
 8008954:	2050      	movs	r0, #80	@ 0x50
 8008956:	f001 faef 	bl	8009f38 <malloc>
 800895a:	4602      	mov	r2, r0
 800895c:	6478      	str	r0, [r7, #68]	@ 0x44
 800895e:	b920      	cbnz	r0, 800896a <strtok+0x26>
 8008960:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <strtok+0x60>)
 8008962:	4811      	ldr	r0, [pc, #68]	@ (80089a8 <strtok+0x64>)
 8008964:	215b      	movs	r1, #91	@ 0x5b
 8008966:	f000 f8f7 	bl	8008b58 <__assert_func>
 800896a:	e9c0 4400 	strd	r4, r4, [r0]
 800896e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008972:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008976:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800897a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800897e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008982:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008986:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800898a:	6184      	str	r4, [r0, #24]
 800898c:	7704      	strb	r4, [r0, #28]
 800898e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008992:	4631      	mov	r1, r6
 8008994:	4628      	mov	r0, r5
 8008996:	2301      	movs	r3, #1
 8008998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800899c:	f000 b806 	b.w	80089ac <__strtok_r>
 80089a0:	20000188 	.word	0x20000188
 80089a4:	0800b7fc 	.word	0x0800b7fc
 80089a8:	0800b813 	.word	0x0800b813

080089ac <__strtok_r>:
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	4604      	mov	r4, r0
 80089b0:	b908      	cbnz	r0, 80089b6 <__strtok_r+0xa>
 80089b2:	6814      	ldr	r4, [r2, #0]
 80089b4:	b144      	cbz	r4, 80089c8 <__strtok_r+0x1c>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089bc:	460f      	mov	r7, r1
 80089be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089c2:	b91e      	cbnz	r6, 80089cc <__strtok_r+0x20>
 80089c4:	b965      	cbnz	r5, 80089e0 <__strtok_r+0x34>
 80089c6:	6015      	str	r5, [r2, #0]
 80089c8:	2000      	movs	r0, #0
 80089ca:	e005      	b.n	80089d8 <__strtok_r+0x2c>
 80089cc:	42b5      	cmp	r5, r6
 80089ce:	d1f6      	bne.n	80089be <__strtok_r+0x12>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1f0      	bne.n	80089b6 <__strtok_r+0xa>
 80089d4:	6014      	str	r4, [r2, #0]
 80089d6:	7003      	strb	r3, [r0, #0]
 80089d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089da:	461c      	mov	r4, r3
 80089dc:	e00c      	b.n	80089f8 <__strtok_r+0x4c>
 80089de:	b915      	cbnz	r5, 80089e6 <__strtok_r+0x3a>
 80089e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089e4:	460e      	mov	r6, r1
 80089e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	d1f7      	bne.n	80089de <__strtok_r+0x32>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0f3      	beq.n	80089da <__strtok_r+0x2e>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089f8:	6014      	str	r4, [r2, #0]
 80089fa:	e7ed      	b.n	80089d8 <__strtok_r+0x2c>

080089fc <strstr>:
 80089fc:	780a      	ldrb	r2, [r1, #0]
 80089fe:	b570      	push	{r4, r5, r6, lr}
 8008a00:	b96a      	cbnz	r2, 8008a1e <strstr+0x22>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d109      	bne.n	8008a1c <strstr+0x20>
 8008a08:	460c      	mov	r4, r1
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0f6      	beq.n	8008a02 <strstr+0x6>
 8008a14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008a18:	429e      	cmp	r6, r3
 8008a1a:	d0f7      	beq.n	8008a0c <strstr+0x10>
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	7803      	ldrb	r3, [r0, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1ef      	bne.n	8008a04 <strstr+0x8>
 8008a24:	4618      	mov	r0, r3
 8008a26:	e7ec      	b.n	8008a02 <strstr+0x6>

08008a28 <_localeconv_r>:
 8008a28:	4800      	ldr	r0, [pc, #0]	@ (8008a2c <_localeconv_r+0x4>)
 8008a2a:	4770      	bx	lr
 8008a2c:	2000010c 	.word	0x2000010c

08008a30 <_close_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d06      	ldr	r5, [pc, #24]	@ (8008a4c <_close_r+0x1c>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	f7fa f8f0 	bl	8002c20 <_close>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_close_r+0x1a>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_close_r+0x1a>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	20000d50 	.word	0x20000d50

08008a50 <_lseek_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	@ (8008a70 <_lseek_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7fa f905 	bl	8002c6e <_lseek>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_lseek_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_lseek_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20000d50 	.word	0x20000d50

08008a74 <_read_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	@ (8008a94 <_read_r+0x20>)
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f7fa f893 	bl	8002bae <_read>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_read_r+0x1e>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_read_r+0x1e>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20000d50 	.word	0x20000d50

08008a98 <_write_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	@ (8008ab8 <_write_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7fa f89e 	bl	8002be8 <_write>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_write_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_write_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20000d50 	.word	0x20000d50

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	@ (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000188 	.word	0x20000188

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	@ (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	@ (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	@ (8008b0c <__libc_init_array+0x44>)
 8008adc:	f002 fc82 	bl	800b3e4 <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	0800bbfc 	.word	0x0800bbfc
 8008b04:	0800bbfc 	.word	0x0800bbfc
 8008b08:	0800bbfc 	.word	0x0800bbfc
 8008b0c:	0800bc00 	.word	0x0800bc00

08008b10 <__retarget_lock_init_recursive>:
 8008b10:	4770      	bx	lr

08008b12 <__retarget_lock_acquire_recursive>:
 8008b12:	4770      	bx	lr

08008b14 <__retarget_lock_release_recursive>:
 8008b14:	4770      	bx	lr

08008b16 <strcpy>:
 8008b16:	4603      	mov	r3, r0
 8008b18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b1c:	f803 2b01 	strb.w	r2, [r3], #1
 8008b20:	2a00      	cmp	r2, #0
 8008b22:	d1f9      	bne.n	8008b18 <strcpy+0x2>
 8008b24:	4770      	bx	lr

08008b26 <memcpy>:
 8008b26:	440a      	add	r2, r1
 8008b28:	4291      	cmp	r1, r2
 8008b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2e:	d100      	bne.n	8008b32 <memcpy+0xc>
 8008b30:	4770      	bx	lr
 8008b32:	b510      	push	{r4, lr}
 8008b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b3c:	4291      	cmp	r1, r2
 8008b3e:	d1f9      	bne.n	8008b34 <memcpy+0xe>
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	0000      	movs	r0, r0
 8008b44:	0000      	movs	r0, r0
	...

08008b48 <nan>:
 8008b48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008b50 <nan+0x8>
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	00000000 	.word	0x00000000
 8008b54:	7ff80000 	.word	0x7ff80000

08008b58 <__assert_func>:
 8008b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b5a:	4614      	mov	r4, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4b09      	ldr	r3, [pc, #36]	@ (8008b84 <__assert_func+0x2c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4605      	mov	r5, r0
 8008b64:	68d8      	ldr	r0, [r3, #12]
 8008b66:	b954      	cbnz	r4, 8008b7e <__assert_func+0x26>
 8008b68:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <__assert_func+0x30>)
 8008b6a:	461c      	mov	r4, r3
 8008b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b70:	9100      	str	r1, [sp, #0]
 8008b72:	462b      	mov	r3, r5
 8008b74:	4905      	ldr	r1, [pc, #20]	@ (8008b8c <__assert_func+0x34>)
 8008b76:	f002 faab 	bl	800b0d0 <fiprintf>
 8008b7a:	f002 fb9d 	bl	800b2b8 <abort>
 8008b7e:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <__assert_func+0x38>)
 8008b80:	e7f4      	b.n	8008b6c <__assert_func+0x14>
 8008b82:	bf00      	nop
 8008b84:	20000188 	.word	0x20000188
 8008b88:	0800b8b0 	.word	0x0800b8b0
 8008b8c:	0800b882 	.word	0x0800b882
 8008b90:	0800b875 	.word	0x0800b875

08008b94 <quorem>:
 8008b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	6903      	ldr	r3, [r0, #16]
 8008b9a:	690c      	ldr	r4, [r1, #16]
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	db7e      	blt.n	8008ca0 <quorem+0x10c>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	f101 0814 	add.w	r8, r1, #20
 8008ba8:	00a3      	lsls	r3, r4, #2
 8008baa:	f100 0514 	add.w	r5, r0, #20
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bca:	d32e      	bcc.n	8008c2a <quorem+0x96>
 8008bcc:	f04f 0a00 	mov.w	sl, #0
 8008bd0:	46c4      	mov	ip, r8
 8008bd2:	46ae      	mov	lr, r5
 8008bd4:	46d3      	mov	fp, sl
 8008bd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bda:	b298      	uxth	r0, r3
 8008bdc:	fb06 a000 	mla	r0, r6, r0, sl
 8008be0:	0c02      	lsrs	r2, r0, #16
 8008be2:	0c1b      	lsrs	r3, r3, #16
 8008be4:	fb06 2303 	mla	r3, r6, r3, r2
 8008be8:	f8de 2000 	ldr.w	r2, [lr]
 8008bec:	b280      	uxth	r0, r0
 8008bee:	b292      	uxth	r2, r2
 8008bf0:	1a12      	subs	r2, r2, r0
 8008bf2:	445a      	add	r2, fp
 8008bf4:	f8de 0000 	ldr.w	r0, [lr]
 8008bf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c06:	b292      	uxth	r2, r2
 8008c08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c0c:	45e1      	cmp	r9, ip
 8008c0e:	f84e 2b04 	str.w	r2, [lr], #4
 8008c12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c16:	d2de      	bcs.n	8008bd6 <quorem+0x42>
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	58eb      	ldr	r3, [r5, r3]
 8008c1c:	b92b      	cbnz	r3, 8008c2a <quorem+0x96>
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	3b04      	subs	r3, #4
 8008c22:	429d      	cmp	r5, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	d32f      	bcc.n	8008c88 <quorem+0xf4>
 8008c28:	613c      	str	r4, [r7, #16]
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f001 fd10 	bl	800a650 <__mcmp>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	db25      	blt.n	8008c80 <quorem+0xec>
 8008c34:	4629      	mov	r1, r5
 8008c36:	2000      	movs	r0, #0
 8008c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8008c40:	fa1f fe82 	uxth.w	lr, r2
 8008c44:	fa1f f38c 	uxth.w	r3, ip
 8008c48:	eba3 030e 	sub.w	r3, r3, lr
 8008c4c:	4403      	add	r3, r0
 8008c4e:	0c12      	lsrs	r2, r2, #16
 8008c50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c5e:	45c1      	cmp	r9, r8
 8008c60:	f841 3b04 	str.w	r3, [r1], #4
 8008c64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c68:	d2e6      	bcs.n	8008c38 <quorem+0xa4>
 8008c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c72:	b922      	cbnz	r2, 8008c7e <quorem+0xea>
 8008c74:	3b04      	subs	r3, #4
 8008c76:	429d      	cmp	r5, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	d30b      	bcc.n	8008c94 <quorem+0x100>
 8008c7c:	613c      	str	r4, [r7, #16]
 8008c7e:	3601      	adds	r6, #1
 8008c80:	4630      	mov	r0, r6
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	3b04      	subs	r3, #4
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	d1cb      	bne.n	8008c28 <quorem+0x94>
 8008c90:	3c01      	subs	r4, #1
 8008c92:	e7c6      	b.n	8008c22 <quorem+0x8e>
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	3b04      	subs	r3, #4
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d1ef      	bne.n	8008c7c <quorem+0xe8>
 8008c9c:	3c01      	subs	r4, #1
 8008c9e:	e7ea      	b.n	8008c76 <quorem+0xe2>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7ee      	b.n	8008c82 <quorem+0xee>
 8008ca4:	0000      	movs	r0, r0
	...

08008ca8 <_dtoa_r>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	69c7      	ldr	r7, [r0, #28]
 8008cae:	b099      	sub	sp, #100	@ 0x64
 8008cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cb4:	ec55 4b10 	vmov	r4, r5, d0
 8008cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cbc:	4683      	mov	fp, r0
 8008cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cc2:	b97f      	cbnz	r7, 8008ce4 <_dtoa_r+0x3c>
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f001 f937 	bl	8009f38 <malloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008cd0:	b920      	cbnz	r0, 8008cdc <_dtoa_r+0x34>
 8008cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8008f70 <_dtoa_r+0x2c8>)
 8008cd4:	21ef      	movs	r1, #239	@ 0xef
 8008cd6:	48a7      	ldr	r0, [pc, #668]	@ (8008f74 <_dtoa_r+0x2cc>)
 8008cd8:	f7ff ff3e 	bl	8008b58 <__assert_func>
 8008cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ce0:	6007      	str	r7, [r0, #0]
 8008ce2:	60c7      	str	r7, [r0, #12]
 8008ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ce8:	6819      	ldr	r1, [r3, #0]
 8008cea:	b159      	cbz	r1, 8008d04 <_dtoa_r+0x5c>
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	604a      	str	r2, [r1, #4]
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4093      	lsls	r3, r2
 8008cf4:	608b      	str	r3, [r1, #8]
 8008cf6:	4658      	mov	r0, fp
 8008cf8:	f001 fa26 	bl	800a148 <_Bfree>
 8008cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	1e2b      	subs	r3, r5, #0
 8008d06:	bfb9      	ittee	lt
 8008d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d0c:	9303      	strlt	r3, [sp, #12]
 8008d0e:	2300      	movge	r3, #0
 8008d10:	6033      	strge	r3, [r6, #0]
 8008d12:	9f03      	ldr	r7, [sp, #12]
 8008d14:	4b98      	ldr	r3, [pc, #608]	@ (8008f78 <_dtoa_r+0x2d0>)
 8008d16:	bfbc      	itt	lt
 8008d18:	2201      	movlt	r2, #1
 8008d1a:	6032      	strlt	r2, [r6, #0]
 8008d1c:	43bb      	bics	r3, r7
 8008d1e:	d112      	bne.n	8008d46 <_dtoa_r+0x9e>
 8008d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d2c:	4323      	orrs	r3, r4
 8008d2e:	f000 854d 	beq.w	80097cc <_dtoa_r+0xb24>
 8008d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008f8c <_dtoa_r+0x2e4>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 854f 	beq.w	80097dc <_dtoa_r+0xb34>
 8008d3e:	f10a 0303 	add.w	r3, sl, #3
 8008d42:	f000 bd49 	b.w	80097d8 <_dtoa_r+0xb30>
 8008d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	ec51 0b17 	vmov	r0, r1, d7
 8008d50:	2300      	movs	r3, #0
 8008d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008d56:	f7f7 fecf 	bl	8000af8 <__aeabi_dcmpeq>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	b158      	cbz	r0, 8008d76 <_dtoa_r+0xce>
 8008d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008d60:	2301      	movs	r3, #1
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d66:	b113      	cbz	r3, 8008d6e <_dtoa_r+0xc6>
 8008d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d6a:	4b84      	ldr	r3, [pc, #528]	@ (8008f7c <_dtoa_r+0x2d4>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008f90 <_dtoa_r+0x2e8>
 8008d72:	f000 bd33 	b.w	80097dc <_dtoa_r+0xb34>
 8008d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8008d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8008d7e:	4658      	mov	r0, fp
 8008d80:	f001 fd86 	bl	800a890 <__d2b>
 8008d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d88:	4681      	mov	r9, r0
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d077      	beq.n	8008e7e <_dtoa_r+0x1d6>
 8008d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008da8:	4619      	mov	r1, r3
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b74      	ldr	r3, [pc, #464]	@ (8008f80 <_dtoa_r+0x2d8>)
 8008dae:	f7f7 fa83 	bl	80002b8 <__aeabi_dsub>
 8008db2:	a369      	add	r3, pc, #420	@ (adr r3, 8008f58 <_dtoa_r+0x2b0>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fc36 	bl	8000628 <__aeabi_dmul>
 8008dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8008f60 <_dtoa_r+0x2b8>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa7b 	bl	80002bc <__adddf3>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	460d      	mov	r5, r1
 8008dcc:	f7f7 fbc2 	bl	8000554 <__aeabi_i2d>
 8008dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8008f68 <_dtoa_r+0x2c0>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fc27 	bl	8000628 <__aeabi_dmul>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4620      	mov	r0, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7f7 fa6b 	bl	80002bc <__adddf3>
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	f7f7 fecd 	bl	8000b88 <__aeabi_d2iz>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4607      	mov	r7, r0
 8008df2:	2300      	movs	r3, #0
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fe88 	bl	8000b0c <__aeabi_dcmplt>
 8008dfc:	b140      	cbz	r0, 8008e10 <_dtoa_r+0x168>
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7f7 fba8 	bl	8000554 <__aeabi_i2d>
 8008e04:	4622      	mov	r2, r4
 8008e06:	462b      	mov	r3, r5
 8008e08:	f7f7 fe76 	bl	8000af8 <__aeabi_dcmpeq>
 8008e0c:	b900      	cbnz	r0, 8008e10 <_dtoa_r+0x168>
 8008e0e:	3f01      	subs	r7, #1
 8008e10:	2f16      	cmp	r7, #22
 8008e12:	d851      	bhi.n	8008eb8 <_dtoa_r+0x210>
 8008e14:	4b5b      	ldr	r3, [pc, #364]	@ (8008f84 <_dtoa_r+0x2dc>)
 8008e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e22:	f7f7 fe73 	bl	8000b0c <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d048      	beq.n	8008ebc <_dtoa_r+0x214>
 8008e2a:	3f01      	subs	r7, #1
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e32:	1b9b      	subs	r3, r3, r6
 8008e34:	1e5a      	subs	r2, r3, #1
 8008e36:	bf44      	itt	mi
 8008e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8008e3c:	2300      	movmi	r3, #0
 8008e3e:	9208      	str	r2, [sp, #32]
 8008e40:	bf54      	ite	pl
 8008e42:	f04f 0800 	movpl.w	r8, #0
 8008e46:	9308      	strmi	r3, [sp, #32]
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	db39      	blt.n	8008ec0 <_dtoa_r+0x218>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008e50:	443b      	add	r3, r7
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	2300      	movs	r3, #0
 8008e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d864      	bhi.n	8008f28 <_dtoa_r+0x280>
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	bfc4      	itt	gt
 8008e62:	3b04      	subgt	r3, #4
 8008e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	f1a3 0302 	sub.w	r3, r3, #2
 8008e6c:	bfcc      	ite	gt
 8008e6e:	2400      	movgt	r4, #0
 8008e70:	2401      	movle	r4, #1
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d863      	bhi.n	8008f3e <_dtoa_r+0x296>
 8008e76:	e8df f003 	tbb	[pc, r3]
 8008e7a:	372a      	.short	0x372a
 8008e7c:	5535      	.short	0x5535
 8008e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008e82:	441e      	add	r6, r3
 8008e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	bfc1      	itttt	gt
 8008e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e90:	409f      	lslgt	r7, r3
 8008e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e9a:	bfd6      	itet	le
 8008e9c:	f1c3 0320 	rsble	r3, r3, #32
 8008ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8008ea8:	f7f7 fb44 	bl	8000534 <__aeabi_ui2d>
 8008eac:	2201      	movs	r2, #1
 8008eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008eb2:	3e01      	subs	r6, #1
 8008eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008eb6:	e777      	b.n	8008da8 <_dtoa_r+0x100>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7b8      	b.n	8008e2e <_dtoa_r+0x186>
 8008ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008ebe:	e7b7      	b.n	8008e30 <_dtoa_r+0x188>
 8008ec0:	427b      	negs	r3, r7
 8008ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	eba8 0807 	sub.w	r8, r8, r7
 8008eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ecc:	e7c4      	b.n	8008e58 <_dtoa_r+0x1b0>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dc35      	bgt.n	8008f44 <_dtoa_r+0x29c>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	9307      	str	r3, [sp, #28]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ee2:	e00b      	b.n	8008efc <_dtoa_r+0x254>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e7f3      	b.n	8008ed0 <_dtoa_r+0x228>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	9307      	str	r3, [sp, #28]
 8008ef8:	bfb8      	it	lt
 8008efa:	2301      	movlt	r3, #1
 8008efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f00:	2100      	movs	r1, #0
 8008f02:	2204      	movs	r2, #4
 8008f04:	f102 0514 	add.w	r5, r2, #20
 8008f08:	429d      	cmp	r5, r3
 8008f0a:	d91f      	bls.n	8008f4c <_dtoa_r+0x2a4>
 8008f0c:	6041      	str	r1, [r0, #4]
 8008f0e:	4658      	mov	r0, fp
 8008f10:	f001 f8da 	bl	800a0c8 <_Balloc>
 8008f14:	4682      	mov	sl, r0
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d13c      	bne.n	8008f94 <_dtoa_r+0x2ec>
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f88 <_dtoa_r+0x2e0>)
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f22:	e6d8      	b.n	8008cd6 <_dtoa_r+0x2e>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7e0      	b.n	8008eea <_dtoa_r+0x242>
 8008f28:	2401      	movs	r4, #1
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f30:	f04f 33ff 	mov.w	r3, #4294967295
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2312      	movs	r3, #18
 8008f3c:	e7d0      	b.n	8008ee0 <_dtoa_r+0x238>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f42:	e7f5      	b.n	8008f30 <_dtoa_r+0x288>
 8008f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	9307      	str	r3, [sp, #28]
 8008f4a:	e7d7      	b.n	8008efc <_dtoa_r+0x254>
 8008f4c:	3101      	adds	r1, #1
 8008f4e:	0052      	lsls	r2, r2, #1
 8008f50:	e7d8      	b.n	8008f04 <_dtoa_r+0x25c>
 8008f52:	bf00      	nop
 8008f54:	f3af 8000 	nop.w
 8008f58:	636f4361 	.word	0x636f4361
 8008f5c:	3fd287a7 	.word	0x3fd287a7
 8008f60:	8b60c8b3 	.word	0x8b60c8b3
 8008f64:	3fc68a28 	.word	0x3fc68a28
 8008f68:	509f79fb 	.word	0x509f79fb
 8008f6c:	3fd34413 	.word	0x3fd34413
 8008f70:	0800b7fc 	.word	0x0800b7fc
 8008f74:	0800b8be 	.word	0x0800b8be
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	0800b7d9 	.word	0x0800b7d9
 8008f80:	3ff80000 	.word	0x3ff80000
 8008f84:	0800ba18 	.word	0x0800ba18
 8008f88:	0800b916 	.word	0x0800b916
 8008f8c:	0800b8ba 	.word	0x0800b8ba
 8008f90:	0800b7d8 	.word	0x0800b7d8
 8008f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f98:	6018      	str	r0, [r3, #0]
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b0e      	cmp	r3, #14
 8008f9e:	f200 80a4 	bhi.w	80090ea <_dtoa_r+0x442>
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	f000 80a1 	beq.w	80090ea <_dtoa_r+0x442>
 8008fa8:	2f00      	cmp	r7, #0
 8008faa:	dd33      	ble.n	8009014 <_dtoa_r+0x36c>
 8008fac:	4bad      	ldr	r3, [pc, #692]	@ (8009264 <_dtoa_r+0x5bc>)
 8008fae:	f007 020f 	and.w	r2, r7, #15
 8008fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb6:	ed93 7b00 	vldr	d7, [r3]
 8008fba:	05f8      	lsls	r0, r7, #23
 8008fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008fc4:	d516      	bpl.n	8008ff4 <_dtoa_r+0x34c>
 8008fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8009268 <_dtoa_r+0x5c0>)
 8008fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd0:	f7f7 fc54 	bl	800087c <__aeabi_ddiv>
 8008fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd8:	f004 040f 	and.w	r4, r4, #15
 8008fdc:	2603      	movs	r6, #3
 8008fde:	4da2      	ldr	r5, [pc, #648]	@ (8009268 <_dtoa_r+0x5c0>)
 8008fe0:	b954      	cbnz	r4, 8008ff8 <_dtoa_r+0x350>
 8008fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	f7f7 fc47 	bl	800087c <__aeabi_ddiv>
 8008fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff2:	e028      	b.n	8009046 <_dtoa_r+0x39e>
 8008ff4:	2602      	movs	r6, #2
 8008ff6:	e7f2      	b.n	8008fde <_dtoa_r+0x336>
 8008ff8:	07e1      	lsls	r1, r4, #31
 8008ffa:	d508      	bpl.n	800900e <_dtoa_r+0x366>
 8008ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009004:	f7f7 fb10 	bl	8000628 <__aeabi_dmul>
 8009008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900c:	3601      	adds	r6, #1
 800900e:	1064      	asrs	r4, r4, #1
 8009010:	3508      	adds	r5, #8
 8009012:	e7e5      	b.n	8008fe0 <_dtoa_r+0x338>
 8009014:	f000 80d2 	beq.w	80091bc <_dtoa_r+0x514>
 8009018:	427c      	negs	r4, r7
 800901a:	4b92      	ldr	r3, [pc, #584]	@ (8009264 <_dtoa_r+0x5bc>)
 800901c:	4d92      	ldr	r5, [pc, #584]	@ (8009268 <_dtoa_r+0x5c0>)
 800901e:	f004 020f 	and.w	r2, r4, #15
 8009022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800902e:	f7f7 fafb 	bl	8000628 <__aeabi_dmul>
 8009032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009036:	1124      	asrs	r4, r4, #4
 8009038:	2300      	movs	r3, #0
 800903a:	2602      	movs	r6, #2
 800903c:	2c00      	cmp	r4, #0
 800903e:	f040 80b2 	bne.w	80091a6 <_dtoa_r+0x4fe>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1d3      	bne.n	8008fee <_dtoa_r+0x346>
 8009046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 80b7 	beq.w	80091c0 <_dtoa_r+0x518>
 8009052:	4b86      	ldr	r3, [pc, #536]	@ (800926c <_dtoa_r+0x5c4>)
 8009054:	2200      	movs	r2, #0
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 fd57 	bl	8000b0c <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f000 80ae 	beq.w	80091c0 <_dtoa_r+0x518>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80aa 	beq.w	80091c0 <_dtoa_r+0x518>
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd37      	ble.n	80090e2 <_dtoa_r+0x43a>
 8009072:	1e7b      	subs	r3, r7, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	4620      	mov	r0, r4
 8009078:	4b7d      	ldr	r3, [pc, #500]	@ (8009270 <_dtoa_r+0x5c8>)
 800907a:	2200      	movs	r2, #0
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fad3 	bl	8000628 <__aeabi_dmul>
 8009082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009086:	9c00      	ldr	r4, [sp, #0]
 8009088:	3601      	adds	r6, #1
 800908a:	4630      	mov	r0, r6
 800908c:	f7f7 fa62 	bl	8000554 <__aeabi_i2d>
 8009090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009094:	f7f7 fac8 	bl	8000628 <__aeabi_dmul>
 8009098:	4b76      	ldr	r3, [pc, #472]	@ (8009274 <_dtoa_r+0x5cc>)
 800909a:	2200      	movs	r2, #0
 800909c:	f7f7 f90e 	bl	80002bc <__adddf3>
 80090a0:	4605      	mov	r5, r0
 80090a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	f040 808d 	bne.w	80091c6 <_dtoa_r+0x51e>
 80090ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b0:	4b71      	ldr	r3, [pc, #452]	@ (8009278 <_dtoa_r+0x5d0>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f7f7 f900 	bl	80002b8 <__aeabi_dsub>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090c0:	462a      	mov	r2, r5
 80090c2:	4633      	mov	r3, r6
 80090c4:	f7f7 fd40 	bl	8000b48 <__aeabi_dcmpgt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f040 828b 	bne.w	80095e4 <_dtoa_r+0x93c>
 80090ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090d2:	462a      	mov	r2, r5
 80090d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80090d8:	f7f7 fd18 	bl	8000b0c <__aeabi_dcmplt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f040 8128 	bne.w	8009332 <_dtoa_r+0x68a>
 80090e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80090e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80090ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f2c0 815a 	blt.w	80093a6 <_dtoa_r+0x6fe>
 80090f2:	2f0e      	cmp	r7, #14
 80090f4:	f300 8157 	bgt.w	80093a6 <_dtoa_r+0x6fe>
 80090f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009264 <_dtoa_r+0x5bc>)
 80090fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090fe:	ed93 7b00 	vldr	d7, [r3]
 8009102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	ed8d 7b00 	vstr	d7, [sp]
 800910a:	da03      	bge.n	8009114 <_dtoa_r+0x46c>
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f340 8101 	ble.w	8009316 <_dtoa_r+0x66e>
 8009114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009118:	4656      	mov	r6, sl
 800911a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fbab 	bl	800087c <__aeabi_ddiv>
 8009126:	f7f7 fd2f 	bl	8000b88 <__aeabi_d2iz>
 800912a:	4680      	mov	r8, r0
 800912c:	f7f7 fa12 	bl	8000554 <__aeabi_i2d>
 8009130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009134:	f7f7 fa78 	bl	8000628 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009144:	f7f7 f8b8 	bl	80002b8 <__aeabi_dsub>
 8009148:	f806 4b01 	strb.w	r4, [r6], #1
 800914c:	9d07      	ldr	r5, [sp, #28]
 800914e:	eba6 040a 	sub.w	r4, r6, sl
 8009152:	42a5      	cmp	r5, r4
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	f040 8117 	bne.w	800938a <_dtoa_r+0x6e2>
 800915c:	f7f7 f8ae 	bl	80002bc <__adddf3>
 8009160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	f7f7 fcee 	bl	8000b48 <__aeabi_dcmpgt>
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 80f9 	bne.w	8009364 <_dtoa_r+0x6bc>
 8009172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 fcbd 	bl	8000af8 <__aeabi_dcmpeq>
 800917e:	b118      	cbz	r0, 8009188 <_dtoa_r+0x4e0>
 8009180:	f018 0f01 	tst.w	r8, #1
 8009184:	f040 80ee 	bne.w	8009364 <_dtoa_r+0x6bc>
 8009188:	4649      	mov	r1, r9
 800918a:	4658      	mov	r0, fp
 800918c:	f000 ffdc 	bl	800a148 <_Bfree>
 8009190:	2300      	movs	r3, #0
 8009192:	7033      	strb	r3, [r6, #0]
 8009194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009196:	3701      	adds	r7, #1
 8009198:	601f      	str	r7, [r3, #0]
 800919a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 831d 	beq.w	80097dc <_dtoa_r+0xb34>
 80091a2:	601e      	str	r6, [r3, #0]
 80091a4:	e31a      	b.n	80097dc <_dtoa_r+0xb34>
 80091a6:	07e2      	lsls	r2, r4, #31
 80091a8:	d505      	bpl.n	80091b6 <_dtoa_r+0x50e>
 80091aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091ae:	f7f7 fa3b 	bl	8000628 <__aeabi_dmul>
 80091b2:	3601      	adds	r6, #1
 80091b4:	2301      	movs	r3, #1
 80091b6:	1064      	asrs	r4, r4, #1
 80091b8:	3508      	adds	r5, #8
 80091ba:	e73f      	b.n	800903c <_dtoa_r+0x394>
 80091bc:	2602      	movs	r6, #2
 80091be:	e742      	b.n	8009046 <_dtoa_r+0x39e>
 80091c0:	9c07      	ldr	r4, [sp, #28]
 80091c2:	9704      	str	r7, [sp, #16]
 80091c4:	e761      	b.n	800908a <_dtoa_r+0x3e2>
 80091c6:	4b27      	ldr	r3, [pc, #156]	@ (8009264 <_dtoa_r+0x5bc>)
 80091c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d2:	4454      	add	r4, sl
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d053      	beq.n	8009280 <_dtoa_r+0x5d8>
 80091d8:	4928      	ldr	r1, [pc, #160]	@ (800927c <_dtoa_r+0x5d4>)
 80091da:	2000      	movs	r0, #0
 80091dc:	f7f7 fb4e 	bl	800087c <__aeabi_ddiv>
 80091e0:	4633      	mov	r3, r6
 80091e2:	462a      	mov	r2, r5
 80091e4:	f7f7 f868 	bl	80002b8 <__aeabi_dsub>
 80091e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091ec:	4656      	mov	r6, sl
 80091ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f2:	f7f7 fcc9 	bl	8000b88 <__aeabi_d2iz>
 80091f6:	4605      	mov	r5, r0
 80091f8:	f7f7 f9ac 	bl	8000554 <__aeabi_i2d>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009204:	f7f7 f858 	bl	80002b8 <__aeabi_dsub>
 8009208:	3530      	adds	r5, #48	@ 0x30
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009212:	f806 5b01 	strb.w	r5, [r6], #1
 8009216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800921a:	f7f7 fc77 	bl	8000b0c <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d171      	bne.n	8009306 <_dtoa_r+0x65e>
 8009222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009226:	4911      	ldr	r1, [pc, #68]	@ (800926c <_dtoa_r+0x5c4>)
 8009228:	2000      	movs	r0, #0
 800922a:	f7f7 f845 	bl	80002b8 <__aeabi_dsub>
 800922e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009232:	f7f7 fc6b 	bl	8000b0c <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	f040 8095 	bne.w	8009366 <_dtoa_r+0x6be>
 800923c:	42a6      	cmp	r6, r4
 800923e:	f43f af50 	beq.w	80090e2 <_dtoa_r+0x43a>
 8009242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009246:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <_dtoa_r+0x5c8>)
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9ed 	bl	8000628 <__aeabi_dmul>
 800924e:	4b08      	ldr	r3, [pc, #32]	@ (8009270 <_dtoa_r+0x5c8>)
 8009250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009254:	2200      	movs	r2, #0
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	f7f7 f9e5 	bl	8000628 <__aeabi_dmul>
 800925e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009262:	e7c4      	b.n	80091ee <_dtoa_r+0x546>
 8009264:	0800ba18 	.word	0x0800ba18
 8009268:	0800b9f0 	.word	0x0800b9f0
 800926c:	3ff00000 	.word	0x3ff00000
 8009270:	40240000 	.word	0x40240000
 8009274:	401c0000 	.word	0x401c0000
 8009278:	40140000 	.word	0x40140000
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	f7f7 f9d0 	bl	8000628 <__aeabi_dmul>
 8009288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800928c:	9415      	str	r4, [sp, #84]	@ 0x54
 800928e:	4656      	mov	r6, sl
 8009290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009294:	f7f7 fc78 	bl	8000b88 <__aeabi_d2iz>
 8009298:	4605      	mov	r5, r0
 800929a:	f7f7 f95b 	bl	8000554 <__aeabi_i2d>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a6:	f7f7 f807 	bl	80002b8 <__aeabi_dsub>
 80092aa:	3530      	adds	r5, #48	@ 0x30
 80092ac:	f806 5b01 	strb.w	r5, [r6], #1
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	d124      	bne.n	800930a <_dtoa_r+0x662>
 80092c0:	4bac      	ldr	r3, [pc, #688]	@ (8009574 <_dtoa_r+0x8cc>)
 80092c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092c6:	f7f6 fff9 	bl	80002bc <__adddf3>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d2:	f7f7 fc39 	bl	8000b48 <__aeabi_dcmpgt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d145      	bne.n	8009366 <_dtoa_r+0x6be>
 80092da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092de:	49a5      	ldr	r1, [pc, #660]	@ (8009574 <_dtoa_r+0x8cc>)
 80092e0:	2000      	movs	r0, #0
 80092e2:	f7f6 ffe9 	bl	80002b8 <__aeabi_dsub>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ee:	f7f7 fc0d 	bl	8000b0c <__aeabi_dcmplt>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aef5 	beq.w	80090e2 <_dtoa_r+0x43a>
 80092f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80092fa:	1e73      	subs	r3, r6, #1
 80092fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80092fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009302:	2b30      	cmp	r3, #48	@ 0x30
 8009304:	d0f8      	beq.n	80092f8 <_dtoa_r+0x650>
 8009306:	9f04      	ldr	r7, [sp, #16]
 8009308:	e73e      	b.n	8009188 <_dtoa_r+0x4e0>
 800930a:	4b9b      	ldr	r3, [pc, #620]	@ (8009578 <_dtoa_r+0x8d0>)
 800930c:	f7f7 f98c 	bl	8000628 <__aeabi_dmul>
 8009310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009314:	e7bc      	b.n	8009290 <_dtoa_r+0x5e8>
 8009316:	d10c      	bne.n	8009332 <_dtoa_r+0x68a>
 8009318:	4b98      	ldr	r3, [pc, #608]	@ (800957c <_dtoa_r+0x8d4>)
 800931a:	2200      	movs	r2, #0
 800931c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009320:	f7f7 f982 	bl	8000628 <__aeabi_dmul>
 8009324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009328:	f7f7 fc04 	bl	8000b34 <__aeabi_dcmpge>
 800932c:	2800      	cmp	r0, #0
 800932e:	f000 8157 	beq.w	80095e0 <_dtoa_r+0x938>
 8009332:	2400      	movs	r4, #0
 8009334:	4625      	mov	r5, r4
 8009336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009338:	43db      	mvns	r3, r3
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	4656      	mov	r6, sl
 800933e:	2700      	movs	r7, #0
 8009340:	4621      	mov	r1, r4
 8009342:	4658      	mov	r0, fp
 8009344:	f000 ff00 	bl	800a148 <_Bfree>
 8009348:	2d00      	cmp	r5, #0
 800934a:	d0dc      	beq.n	8009306 <_dtoa_r+0x65e>
 800934c:	b12f      	cbz	r7, 800935a <_dtoa_r+0x6b2>
 800934e:	42af      	cmp	r7, r5
 8009350:	d003      	beq.n	800935a <_dtoa_r+0x6b2>
 8009352:	4639      	mov	r1, r7
 8009354:	4658      	mov	r0, fp
 8009356:	f000 fef7 	bl	800a148 <_Bfree>
 800935a:	4629      	mov	r1, r5
 800935c:	4658      	mov	r0, fp
 800935e:	f000 fef3 	bl	800a148 <_Bfree>
 8009362:	e7d0      	b.n	8009306 <_dtoa_r+0x65e>
 8009364:	9704      	str	r7, [sp, #16]
 8009366:	4633      	mov	r3, r6
 8009368:	461e      	mov	r6, r3
 800936a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800936e:	2a39      	cmp	r2, #57	@ 0x39
 8009370:	d107      	bne.n	8009382 <_dtoa_r+0x6da>
 8009372:	459a      	cmp	sl, r3
 8009374:	d1f8      	bne.n	8009368 <_dtoa_r+0x6c0>
 8009376:	9a04      	ldr	r2, [sp, #16]
 8009378:	3201      	adds	r2, #1
 800937a:	9204      	str	r2, [sp, #16]
 800937c:	2230      	movs	r2, #48	@ 0x30
 800937e:	f88a 2000 	strb.w	r2, [sl]
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	3201      	adds	r2, #1
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	e7bd      	b.n	8009306 <_dtoa_r+0x65e>
 800938a:	4b7b      	ldr	r3, [pc, #492]	@ (8009578 <_dtoa_r+0x8d0>)
 800938c:	2200      	movs	r2, #0
 800938e:	f7f7 f94b 	bl	8000628 <__aeabi_dmul>
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	f7f7 fbad 	bl	8000af8 <__aeabi_dcmpeq>
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f aebb 	beq.w	800911a <_dtoa_r+0x472>
 80093a4:	e6f0      	b.n	8009188 <_dtoa_r+0x4e0>
 80093a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	f000 80db 	beq.w	8009564 <_dtoa_r+0x8bc>
 80093ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b0:	2a01      	cmp	r2, #1
 80093b2:	f300 80bf 	bgt.w	8009534 <_dtoa_r+0x88c>
 80093b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	f000 80b7 	beq.w	800952c <_dtoa_r+0x884>
 80093be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093c4:	4646      	mov	r6, r8
 80093c6:	9a08      	ldr	r2, [sp, #32]
 80093c8:	2101      	movs	r1, #1
 80093ca:	441a      	add	r2, r3
 80093cc:	4658      	mov	r0, fp
 80093ce:	4498      	add	r8, r3
 80093d0:	9208      	str	r2, [sp, #32]
 80093d2:	f000 ffb7 	bl	800a344 <__i2b>
 80093d6:	4605      	mov	r5, r0
 80093d8:	b15e      	cbz	r6, 80093f2 <_dtoa_r+0x74a>
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dd08      	ble.n	80093f2 <_dtoa_r+0x74a>
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	9a08      	ldr	r2, [sp, #32]
 80093e4:	bfa8      	it	ge
 80093e6:	4633      	movge	r3, r6
 80093e8:	eba8 0803 	sub.w	r8, r8, r3
 80093ec:	1af6      	subs	r6, r6, r3
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f4:	b1f3      	cbz	r3, 8009434 <_dtoa_r+0x78c>
 80093f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 80b7 	beq.w	800956c <_dtoa_r+0x8c4>
 80093fe:	b18c      	cbz	r4, 8009424 <_dtoa_r+0x77c>
 8009400:	4629      	mov	r1, r5
 8009402:	4622      	mov	r2, r4
 8009404:	4658      	mov	r0, fp
 8009406:	f001 f85d 	bl	800a4c4 <__pow5mult>
 800940a:	464a      	mov	r2, r9
 800940c:	4601      	mov	r1, r0
 800940e:	4605      	mov	r5, r0
 8009410:	4658      	mov	r0, fp
 8009412:	f000 ffad 	bl	800a370 <__multiply>
 8009416:	4649      	mov	r1, r9
 8009418:	9004      	str	r0, [sp, #16]
 800941a:	4658      	mov	r0, fp
 800941c:	f000 fe94 	bl	800a148 <_Bfree>
 8009420:	9b04      	ldr	r3, [sp, #16]
 8009422:	4699      	mov	r9, r3
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	1b1a      	subs	r2, r3, r4
 8009428:	d004      	beq.n	8009434 <_dtoa_r+0x78c>
 800942a:	4649      	mov	r1, r9
 800942c:	4658      	mov	r0, fp
 800942e:	f001 f849 	bl	800a4c4 <__pow5mult>
 8009432:	4681      	mov	r9, r0
 8009434:	2101      	movs	r1, #1
 8009436:	4658      	mov	r0, fp
 8009438:	f000 ff84 	bl	800a344 <__i2b>
 800943c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800943e:	4604      	mov	r4, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 81cf 	beq.w	80097e4 <_dtoa_r+0xb3c>
 8009446:	461a      	mov	r2, r3
 8009448:	4601      	mov	r1, r0
 800944a:	4658      	mov	r0, fp
 800944c:	f001 f83a 	bl	800a4c4 <__pow5mult>
 8009450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009452:	2b01      	cmp	r3, #1
 8009454:	4604      	mov	r4, r0
 8009456:	f300 8095 	bgt.w	8009584 <_dtoa_r+0x8dc>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 8087 	bne.w	8009570 <_dtoa_r+0x8c8>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 8089 	bne.w	8009580 <_dtoa_r+0x8d8>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	051b      	lsls	r3, r3, #20
 8009478:	b12b      	cbz	r3, 8009486 <_dtoa_r+0x7de>
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	3301      	adds	r3, #1
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	2301      	movs	r3, #1
 8009486:	930a      	str	r3, [sp, #40]	@ 0x28
 8009488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 81b0 	beq.w	80097f0 <_dtoa_r+0xb48>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009496:	6918      	ldr	r0, [r3, #16]
 8009498:	f000 ff08 	bl	800a2ac <__hi0bits>
 800949c:	f1c0 0020 	rsb	r0, r0, #32
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	4418      	add	r0, r3
 80094a4:	f010 001f 	ands.w	r0, r0, #31
 80094a8:	d077      	beq.n	800959a <_dtoa_r+0x8f2>
 80094aa:	f1c0 0320 	rsb	r3, r0, #32
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	dd6b      	ble.n	800958a <_dtoa_r+0x8e2>
 80094b2:	9b08      	ldr	r3, [sp, #32]
 80094b4:	f1c0 001c 	rsb	r0, r0, #28
 80094b8:	4403      	add	r3, r0
 80094ba:	4480      	add	r8, r0
 80094bc:	4406      	add	r6, r0
 80094be:	9308      	str	r3, [sp, #32]
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	dd05      	ble.n	80094d2 <_dtoa_r+0x82a>
 80094c6:	4649      	mov	r1, r9
 80094c8:	4642      	mov	r2, r8
 80094ca:	4658      	mov	r0, fp
 80094cc:	f001 f854 	bl	800a578 <__lshift>
 80094d0:	4681      	mov	r9, r0
 80094d2:	9b08      	ldr	r3, [sp, #32]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dd05      	ble.n	80094e4 <_dtoa_r+0x83c>
 80094d8:	4621      	mov	r1, r4
 80094da:	461a      	mov	r2, r3
 80094dc:	4658      	mov	r0, fp
 80094de:	f001 f84b 	bl	800a578 <__lshift>
 80094e2:	4604      	mov	r4, r0
 80094e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d059      	beq.n	800959e <_dtoa_r+0x8f6>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4648      	mov	r0, r9
 80094ee:	f001 f8af 	bl	800a650 <__mcmp>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	da53      	bge.n	800959e <_dtoa_r+0x8f6>
 80094f6:	1e7b      	subs	r3, r7, #1
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	4649      	mov	r1, r9
 80094fc:	2300      	movs	r3, #0
 80094fe:	220a      	movs	r2, #10
 8009500:	4658      	mov	r0, fp
 8009502:	f000 fe43 	bl	800a18c <__multadd>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	4681      	mov	r9, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8172 	beq.w	80097f4 <_dtoa_r+0xb4c>
 8009510:	2300      	movs	r3, #0
 8009512:	4629      	mov	r1, r5
 8009514:	220a      	movs	r2, #10
 8009516:	4658      	mov	r0, fp
 8009518:	f000 fe38 	bl	800a18c <__multadd>
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	4605      	mov	r5, r0
 8009522:	dc67      	bgt.n	80095f4 <_dtoa_r+0x94c>
 8009524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009526:	2b02      	cmp	r3, #2
 8009528:	dc41      	bgt.n	80095ae <_dtoa_r+0x906>
 800952a:	e063      	b.n	80095f4 <_dtoa_r+0x94c>
 800952c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800952e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009532:	e746      	b.n	80093c2 <_dtoa_r+0x71a>
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	1e5c      	subs	r4, r3, #1
 8009538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953a:	42a3      	cmp	r3, r4
 800953c:	bfbf      	itttt	lt
 800953e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009544:	1ae3      	sublt	r3, r4, r3
 8009546:	bfb4      	ite	lt
 8009548:	18d2      	addlt	r2, r2, r3
 800954a:	1b1c      	subge	r4, r3, r4
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	bfbc      	itt	lt
 8009550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009552:	2400      	movlt	r4, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfb5      	itete	lt
 8009558:	eba8 0603 	sublt.w	r6, r8, r3
 800955c:	9b07      	ldrge	r3, [sp, #28]
 800955e:	2300      	movlt	r3, #0
 8009560:	4646      	movge	r6, r8
 8009562:	e730      	b.n	80093c6 <_dtoa_r+0x71e>
 8009564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009568:	4646      	mov	r6, r8
 800956a:	e735      	b.n	80093d8 <_dtoa_r+0x730>
 800956c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800956e:	e75c      	b.n	800942a <_dtoa_r+0x782>
 8009570:	2300      	movs	r3, #0
 8009572:	e788      	b.n	8009486 <_dtoa_r+0x7de>
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	40240000 	.word	0x40240000
 800957c:	40140000 	.word	0x40140000
 8009580:	9b02      	ldr	r3, [sp, #8]
 8009582:	e780      	b.n	8009486 <_dtoa_r+0x7de>
 8009584:	2300      	movs	r3, #0
 8009586:	930a      	str	r3, [sp, #40]	@ 0x28
 8009588:	e782      	b.n	8009490 <_dtoa_r+0x7e8>
 800958a:	d099      	beq.n	80094c0 <_dtoa_r+0x818>
 800958c:	9a08      	ldr	r2, [sp, #32]
 800958e:	331c      	adds	r3, #28
 8009590:	441a      	add	r2, r3
 8009592:	4498      	add	r8, r3
 8009594:	441e      	add	r6, r3
 8009596:	9208      	str	r2, [sp, #32]
 8009598:	e792      	b.n	80094c0 <_dtoa_r+0x818>
 800959a:	4603      	mov	r3, r0
 800959c:	e7f6      	b.n	800958c <_dtoa_r+0x8e4>
 800959e:	9b07      	ldr	r3, [sp, #28]
 80095a0:	9704      	str	r7, [sp, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dc20      	bgt.n	80095e8 <_dtoa_r+0x940>
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	dd1e      	ble.n	80095ec <_dtoa_r+0x944>
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f aec0 	bne.w	8009336 <_dtoa_r+0x68e>
 80095b6:	4621      	mov	r1, r4
 80095b8:	2205      	movs	r2, #5
 80095ba:	4658      	mov	r0, fp
 80095bc:	f000 fde6 	bl	800a18c <__multadd>
 80095c0:	4601      	mov	r1, r0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4648      	mov	r0, r9
 80095c6:	f001 f843 	bl	800a650 <__mcmp>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	f77f aeb3 	ble.w	8009336 <_dtoa_r+0x68e>
 80095d0:	4656      	mov	r6, sl
 80095d2:	2331      	movs	r3, #49	@ 0x31
 80095d4:	f806 3b01 	strb.w	r3, [r6], #1
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	e6ae      	b.n	800933e <_dtoa_r+0x696>
 80095e0:	9c07      	ldr	r4, [sp, #28]
 80095e2:	9704      	str	r7, [sp, #16]
 80095e4:	4625      	mov	r5, r4
 80095e6:	e7f3      	b.n	80095d0 <_dtoa_r+0x928>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8104 	beq.w	80097fc <_dtoa_r+0xb54>
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	dd05      	ble.n	8009604 <_dtoa_r+0x95c>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4632      	mov	r2, r6
 80095fc:	4658      	mov	r0, fp
 80095fe:	f000 ffbb 	bl	800a578 <__lshift>
 8009602:	4605      	mov	r5, r0
 8009604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d05a      	beq.n	80096c0 <_dtoa_r+0xa18>
 800960a:	6869      	ldr	r1, [r5, #4]
 800960c:	4658      	mov	r0, fp
 800960e:	f000 fd5b 	bl	800a0c8 <_Balloc>
 8009612:	4606      	mov	r6, r0
 8009614:	b928      	cbnz	r0, 8009622 <_dtoa_r+0x97a>
 8009616:	4b84      	ldr	r3, [pc, #528]	@ (8009828 <_dtoa_r+0xb80>)
 8009618:	4602      	mov	r2, r0
 800961a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800961e:	f7ff bb5a 	b.w	8008cd6 <_dtoa_r+0x2e>
 8009622:	692a      	ldr	r2, [r5, #16]
 8009624:	3202      	adds	r2, #2
 8009626:	0092      	lsls	r2, r2, #2
 8009628:	f105 010c 	add.w	r1, r5, #12
 800962c:	300c      	adds	r0, #12
 800962e:	f7ff fa7a 	bl	8008b26 <memcpy>
 8009632:	2201      	movs	r2, #1
 8009634:	4631      	mov	r1, r6
 8009636:	4658      	mov	r0, fp
 8009638:	f000 ff9e 	bl	800a578 <__lshift>
 800963c:	f10a 0301 	add.w	r3, sl, #1
 8009640:	9307      	str	r3, [sp, #28]
 8009642:	9b00      	ldr	r3, [sp, #0]
 8009644:	4453      	add	r3, sl
 8009646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	462f      	mov	r7, r5
 8009650:	930a      	str	r3, [sp, #40]	@ 0x28
 8009652:	4605      	mov	r5, r0
 8009654:	9b07      	ldr	r3, [sp, #28]
 8009656:	4621      	mov	r1, r4
 8009658:	3b01      	subs	r3, #1
 800965a:	4648      	mov	r0, r9
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	f7ff fa99 	bl	8008b94 <quorem>
 8009662:	4639      	mov	r1, r7
 8009664:	9002      	str	r0, [sp, #8]
 8009666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800966a:	4648      	mov	r0, r9
 800966c:	f000 fff0 	bl	800a650 <__mcmp>
 8009670:	462a      	mov	r2, r5
 8009672:	9008      	str	r0, [sp, #32]
 8009674:	4621      	mov	r1, r4
 8009676:	4658      	mov	r0, fp
 8009678:	f001 f806 	bl	800a688 <__mdiff>
 800967c:	68c2      	ldr	r2, [r0, #12]
 800967e:	4606      	mov	r6, r0
 8009680:	bb02      	cbnz	r2, 80096c4 <_dtoa_r+0xa1c>
 8009682:	4601      	mov	r1, r0
 8009684:	4648      	mov	r0, r9
 8009686:	f000 ffe3 	bl	800a650 <__mcmp>
 800968a:	4602      	mov	r2, r0
 800968c:	4631      	mov	r1, r6
 800968e:	4658      	mov	r0, fp
 8009690:	920e      	str	r2, [sp, #56]	@ 0x38
 8009692:	f000 fd59 	bl	800a148 <_Bfree>
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800969a:	9e07      	ldr	r6, [sp, #28]
 800969c:	ea43 0102 	orr.w	r1, r3, r2
 80096a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a2:	4319      	orrs	r1, r3
 80096a4:	d110      	bne.n	80096c8 <_dtoa_r+0xa20>
 80096a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096aa:	d029      	beq.n	8009700 <_dtoa_r+0xa58>
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	dd02      	ble.n	80096b8 <_dtoa_r+0xa10>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80096b8:	9b00      	ldr	r3, [sp, #0]
 80096ba:	f883 8000 	strb.w	r8, [r3]
 80096be:	e63f      	b.n	8009340 <_dtoa_r+0x698>
 80096c0:	4628      	mov	r0, r5
 80096c2:	e7bb      	b.n	800963c <_dtoa_r+0x994>
 80096c4:	2201      	movs	r2, #1
 80096c6:	e7e1      	b.n	800968c <_dtoa_r+0x9e4>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db04      	blt.n	80096d8 <_dtoa_r+0xa30>
 80096ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096d0:	430b      	orrs	r3, r1
 80096d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096d4:	430b      	orrs	r3, r1
 80096d6:	d120      	bne.n	800971a <_dtoa_r+0xa72>
 80096d8:	2a00      	cmp	r2, #0
 80096da:	dded      	ble.n	80096b8 <_dtoa_r+0xa10>
 80096dc:	4649      	mov	r1, r9
 80096de:	2201      	movs	r2, #1
 80096e0:	4658      	mov	r0, fp
 80096e2:	f000 ff49 	bl	800a578 <__lshift>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4681      	mov	r9, r0
 80096ea:	f000 ffb1 	bl	800a650 <__mcmp>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	dc03      	bgt.n	80096fa <_dtoa_r+0xa52>
 80096f2:	d1e1      	bne.n	80096b8 <_dtoa_r+0xa10>
 80096f4:	f018 0f01 	tst.w	r8, #1
 80096f8:	d0de      	beq.n	80096b8 <_dtoa_r+0xa10>
 80096fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80096fe:	d1d8      	bne.n	80096b2 <_dtoa_r+0xa0a>
 8009700:	9a00      	ldr	r2, [sp, #0]
 8009702:	2339      	movs	r3, #57	@ 0x39
 8009704:	7013      	strb	r3, [r2, #0]
 8009706:	4633      	mov	r3, r6
 8009708:	461e      	mov	r6, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009710:	2a39      	cmp	r2, #57	@ 0x39
 8009712:	d052      	beq.n	80097ba <_dtoa_r+0xb12>
 8009714:	3201      	adds	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e612      	b.n	8009340 <_dtoa_r+0x698>
 800971a:	2a00      	cmp	r2, #0
 800971c:	dd07      	ble.n	800972e <_dtoa_r+0xa86>
 800971e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009722:	d0ed      	beq.n	8009700 <_dtoa_r+0xa58>
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	f108 0301 	add.w	r3, r8, #1
 800972a:	7013      	strb	r3, [r2, #0]
 800972c:	e608      	b.n	8009340 <_dtoa_r+0x698>
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009738:	4293      	cmp	r3, r2
 800973a:	d028      	beq.n	800978e <_dtoa_r+0xae6>
 800973c:	4649      	mov	r1, r9
 800973e:	2300      	movs	r3, #0
 8009740:	220a      	movs	r2, #10
 8009742:	4658      	mov	r0, fp
 8009744:	f000 fd22 	bl	800a18c <__multadd>
 8009748:	42af      	cmp	r7, r5
 800974a:	4681      	mov	r9, r0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	f04f 020a 	mov.w	r2, #10
 8009754:	4639      	mov	r1, r7
 8009756:	4658      	mov	r0, fp
 8009758:	d107      	bne.n	800976a <_dtoa_r+0xac2>
 800975a:	f000 fd17 	bl	800a18c <__multadd>
 800975e:	4607      	mov	r7, r0
 8009760:	4605      	mov	r5, r0
 8009762:	9b07      	ldr	r3, [sp, #28]
 8009764:	3301      	adds	r3, #1
 8009766:	9307      	str	r3, [sp, #28]
 8009768:	e774      	b.n	8009654 <_dtoa_r+0x9ac>
 800976a:	f000 fd0f 	bl	800a18c <__multadd>
 800976e:	4629      	mov	r1, r5
 8009770:	4607      	mov	r7, r0
 8009772:	2300      	movs	r3, #0
 8009774:	220a      	movs	r2, #10
 8009776:	4658      	mov	r0, fp
 8009778:	f000 fd08 	bl	800a18c <__multadd>
 800977c:	4605      	mov	r5, r0
 800977e:	e7f0      	b.n	8009762 <_dtoa_r+0xaba>
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfcc      	ite	gt
 8009786:	461e      	movgt	r6, r3
 8009788:	2601      	movle	r6, #1
 800978a:	4456      	add	r6, sl
 800978c:	2700      	movs	r7, #0
 800978e:	4649      	mov	r1, r9
 8009790:	2201      	movs	r2, #1
 8009792:	4658      	mov	r0, fp
 8009794:	f000 fef0 	bl	800a578 <__lshift>
 8009798:	4621      	mov	r1, r4
 800979a:	4681      	mov	r9, r0
 800979c:	f000 ff58 	bl	800a650 <__mcmp>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dcb0      	bgt.n	8009706 <_dtoa_r+0xa5e>
 80097a4:	d102      	bne.n	80097ac <_dtoa_r+0xb04>
 80097a6:	f018 0f01 	tst.w	r8, #1
 80097aa:	d1ac      	bne.n	8009706 <_dtoa_r+0xa5e>
 80097ac:	4633      	mov	r3, r6
 80097ae:	461e      	mov	r6, r3
 80097b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b4:	2a30      	cmp	r2, #48	@ 0x30
 80097b6:	d0fa      	beq.n	80097ae <_dtoa_r+0xb06>
 80097b8:	e5c2      	b.n	8009340 <_dtoa_r+0x698>
 80097ba:	459a      	cmp	sl, r3
 80097bc:	d1a4      	bne.n	8009708 <_dtoa_r+0xa60>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	2331      	movs	r3, #49	@ 0x31
 80097c6:	f88a 3000 	strb.w	r3, [sl]
 80097ca:	e5b9      	b.n	8009340 <_dtoa_r+0x698>
 80097cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800982c <_dtoa_r+0xb84>
 80097d2:	b11b      	cbz	r3, 80097dc <_dtoa_r+0xb34>
 80097d4:	f10a 0308 	add.w	r3, sl, #8
 80097d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	4650      	mov	r0, sl
 80097de:	b019      	add	sp, #100	@ 0x64
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	f77f ae37 	ble.w	800945a <_dtoa_r+0x7b2>
 80097ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f0:	2001      	movs	r0, #1
 80097f2:	e655      	b.n	80094a0 <_dtoa_r+0x7f8>
 80097f4:	9b00      	ldr	r3, [sp, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f77f aed6 	ble.w	80095a8 <_dtoa_r+0x900>
 80097fc:	4656      	mov	r6, sl
 80097fe:	4621      	mov	r1, r4
 8009800:	4648      	mov	r0, r9
 8009802:	f7ff f9c7 	bl	8008b94 <quorem>
 8009806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800980a:	f806 8b01 	strb.w	r8, [r6], #1
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	eba6 020a 	sub.w	r2, r6, sl
 8009814:	4293      	cmp	r3, r2
 8009816:	ddb3      	ble.n	8009780 <_dtoa_r+0xad8>
 8009818:	4649      	mov	r1, r9
 800981a:	2300      	movs	r3, #0
 800981c:	220a      	movs	r2, #10
 800981e:	4658      	mov	r0, fp
 8009820:	f000 fcb4 	bl	800a18c <__multadd>
 8009824:	4681      	mov	r9, r0
 8009826:	e7ea      	b.n	80097fe <_dtoa_r+0xb56>
 8009828:	0800b916 	.word	0x0800b916
 800982c:	0800b8b1 	.word	0x0800b8b1

08009830 <_free_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4605      	mov	r5, r0
 8009834:	2900      	cmp	r1, #0
 8009836:	d041      	beq.n	80098bc <_free_r+0x8c>
 8009838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800983c:	1f0c      	subs	r4, r1, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfb8      	it	lt
 8009842:	18e4      	addlt	r4, r4, r3
 8009844:	f000 fc34 	bl	800a0b0 <__malloc_lock>
 8009848:	4a1d      	ldr	r2, [pc, #116]	@ (80098c0 <_free_r+0x90>)
 800984a:	6813      	ldr	r3, [r2, #0]
 800984c:	b933      	cbnz	r3, 800985c <_free_r+0x2c>
 800984e:	6063      	str	r3, [r4, #4]
 8009850:	6014      	str	r4, [r2, #0]
 8009852:	4628      	mov	r0, r5
 8009854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009858:	f000 bc30 	b.w	800a0bc <__malloc_unlock>
 800985c:	42a3      	cmp	r3, r4
 800985e:	d908      	bls.n	8009872 <_free_r+0x42>
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	1821      	adds	r1, r4, r0
 8009864:	428b      	cmp	r3, r1
 8009866:	bf01      	itttt	eq
 8009868:	6819      	ldreq	r1, [r3, #0]
 800986a:	685b      	ldreq	r3, [r3, #4]
 800986c:	1809      	addeq	r1, r1, r0
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	e7ed      	b.n	800984e <_free_r+0x1e>
 8009872:	461a      	mov	r2, r3
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	b10b      	cbz	r3, 800987c <_free_r+0x4c>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d9fa      	bls.n	8009872 <_free_r+0x42>
 800987c:	6811      	ldr	r1, [r2, #0]
 800987e:	1850      	adds	r0, r2, r1
 8009880:	42a0      	cmp	r0, r4
 8009882:	d10b      	bne.n	800989c <_free_r+0x6c>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	4401      	add	r1, r0
 8009888:	1850      	adds	r0, r2, r1
 800988a:	4283      	cmp	r3, r0
 800988c:	6011      	str	r1, [r2, #0]
 800988e:	d1e0      	bne.n	8009852 <_free_r+0x22>
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	6053      	str	r3, [r2, #4]
 8009896:	4408      	add	r0, r1
 8009898:	6010      	str	r0, [r2, #0]
 800989a:	e7da      	b.n	8009852 <_free_r+0x22>
 800989c:	d902      	bls.n	80098a4 <_free_r+0x74>
 800989e:	230c      	movs	r3, #12
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	e7d6      	b.n	8009852 <_free_r+0x22>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	1821      	adds	r1, r4, r0
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf04      	itt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	bf04      	itt	eq
 80098b4:	1809      	addeq	r1, r1, r0
 80098b6:	6021      	streq	r1, [r4, #0]
 80098b8:	6054      	str	r4, [r2, #4]
 80098ba:	e7ca      	b.n	8009852 <_free_r+0x22>
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	20000d5c 	.word	0x20000d5c

080098c4 <rshift>:
 80098c4:	6903      	ldr	r3, [r0, #16]
 80098c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80098ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098d2:	f100 0414 	add.w	r4, r0, #20
 80098d6:	dd45      	ble.n	8009964 <rshift+0xa0>
 80098d8:	f011 011f 	ands.w	r1, r1, #31
 80098dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098e4:	d10c      	bne.n	8009900 <rshift+0x3c>
 80098e6:	f100 0710 	add.w	r7, r0, #16
 80098ea:	4629      	mov	r1, r5
 80098ec:	42b1      	cmp	r1, r6
 80098ee:	d334      	bcc.n	800995a <rshift+0x96>
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	1eea      	subs	r2, r5, #3
 80098f6:	4296      	cmp	r6, r2
 80098f8:	bf38      	it	cc
 80098fa:	2300      	movcc	r3, #0
 80098fc:	4423      	add	r3, r4
 80098fe:	e015      	b.n	800992c <rshift+0x68>
 8009900:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009904:	f1c1 0820 	rsb	r8, r1, #32
 8009908:	40cf      	lsrs	r7, r1
 800990a:	f105 0e04 	add.w	lr, r5, #4
 800990e:	46a1      	mov	r9, r4
 8009910:	4576      	cmp	r6, lr
 8009912:	46f4      	mov	ip, lr
 8009914:	d815      	bhi.n	8009942 <rshift+0x7e>
 8009916:	1a9a      	subs	r2, r3, r2
 8009918:	0092      	lsls	r2, r2, #2
 800991a:	3a04      	subs	r2, #4
 800991c:	3501      	adds	r5, #1
 800991e:	42ae      	cmp	r6, r5
 8009920:	bf38      	it	cc
 8009922:	2200      	movcc	r2, #0
 8009924:	18a3      	adds	r3, r4, r2
 8009926:	50a7      	str	r7, [r4, r2]
 8009928:	b107      	cbz	r7, 800992c <rshift+0x68>
 800992a:	3304      	adds	r3, #4
 800992c:	1b1a      	subs	r2, r3, r4
 800992e:	42a3      	cmp	r3, r4
 8009930:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009934:	bf08      	it	eq
 8009936:	2300      	moveq	r3, #0
 8009938:	6102      	str	r2, [r0, #16]
 800993a:	bf08      	it	eq
 800993c:	6143      	streq	r3, [r0, #20]
 800993e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009942:	f8dc c000 	ldr.w	ip, [ip]
 8009946:	fa0c fc08 	lsl.w	ip, ip, r8
 800994a:	ea4c 0707 	orr.w	r7, ip, r7
 800994e:	f849 7b04 	str.w	r7, [r9], #4
 8009952:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009956:	40cf      	lsrs	r7, r1
 8009958:	e7da      	b.n	8009910 <rshift+0x4c>
 800995a:	f851 cb04 	ldr.w	ip, [r1], #4
 800995e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009962:	e7c3      	b.n	80098ec <rshift+0x28>
 8009964:	4623      	mov	r3, r4
 8009966:	e7e1      	b.n	800992c <rshift+0x68>

08009968 <__hexdig_fun>:
 8009968:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800996c:	2b09      	cmp	r3, #9
 800996e:	d802      	bhi.n	8009976 <__hexdig_fun+0xe>
 8009970:	3820      	subs	r0, #32
 8009972:	b2c0      	uxtb	r0, r0
 8009974:	4770      	bx	lr
 8009976:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800997a:	2b05      	cmp	r3, #5
 800997c:	d801      	bhi.n	8009982 <__hexdig_fun+0x1a>
 800997e:	3847      	subs	r0, #71	@ 0x47
 8009980:	e7f7      	b.n	8009972 <__hexdig_fun+0xa>
 8009982:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009986:	2b05      	cmp	r3, #5
 8009988:	d801      	bhi.n	800998e <__hexdig_fun+0x26>
 800998a:	3827      	subs	r0, #39	@ 0x27
 800998c:	e7f1      	b.n	8009972 <__hexdig_fun+0xa>
 800998e:	2000      	movs	r0, #0
 8009990:	4770      	bx	lr
	...

08009994 <__gethex>:
 8009994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009998:	b085      	sub	sp, #20
 800999a:	468a      	mov	sl, r1
 800999c:	9302      	str	r3, [sp, #8]
 800999e:	680b      	ldr	r3, [r1, #0]
 80099a0:	9001      	str	r0, [sp, #4]
 80099a2:	4690      	mov	r8, r2
 80099a4:	1c9c      	adds	r4, r3, #2
 80099a6:	46a1      	mov	r9, r4
 80099a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80099ac:	2830      	cmp	r0, #48	@ 0x30
 80099ae:	d0fa      	beq.n	80099a6 <__gethex+0x12>
 80099b0:	eba9 0303 	sub.w	r3, r9, r3
 80099b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80099b8:	f7ff ffd6 	bl	8009968 <__hexdig_fun>
 80099bc:	4605      	mov	r5, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d168      	bne.n	8009a94 <__gethex+0x100>
 80099c2:	49a0      	ldr	r1, [pc, #640]	@ (8009c44 <__gethex+0x2b0>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	4648      	mov	r0, r9
 80099c8:	f7fe ffa9 	bl	800891e <strncmp>
 80099cc:	4607      	mov	r7, r0
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d167      	bne.n	8009aa2 <__gethex+0x10e>
 80099d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80099d6:	4626      	mov	r6, r4
 80099d8:	f7ff ffc6 	bl	8009968 <__hexdig_fun>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d062      	beq.n	8009aa6 <__gethex+0x112>
 80099e0:	4623      	mov	r3, r4
 80099e2:	7818      	ldrb	r0, [r3, #0]
 80099e4:	2830      	cmp	r0, #48	@ 0x30
 80099e6:	4699      	mov	r9, r3
 80099e8:	f103 0301 	add.w	r3, r3, #1
 80099ec:	d0f9      	beq.n	80099e2 <__gethex+0x4e>
 80099ee:	f7ff ffbb 	bl	8009968 <__hexdig_fun>
 80099f2:	fab0 f580 	clz	r5, r0
 80099f6:	096d      	lsrs	r5, r5, #5
 80099f8:	f04f 0b01 	mov.w	fp, #1
 80099fc:	464a      	mov	r2, r9
 80099fe:	4616      	mov	r6, r2
 8009a00:	3201      	adds	r2, #1
 8009a02:	7830      	ldrb	r0, [r6, #0]
 8009a04:	f7ff ffb0 	bl	8009968 <__hexdig_fun>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1f8      	bne.n	80099fe <__gethex+0x6a>
 8009a0c:	498d      	ldr	r1, [pc, #564]	@ (8009c44 <__gethex+0x2b0>)
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7fe ff84 	bl	800891e <strncmp>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d13f      	bne.n	8009a9a <__gethex+0x106>
 8009a1a:	b944      	cbnz	r4, 8009a2e <__gethex+0x9a>
 8009a1c:	1c74      	adds	r4, r6, #1
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4616      	mov	r6, r2
 8009a22:	3201      	adds	r2, #1
 8009a24:	7830      	ldrb	r0, [r6, #0]
 8009a26:	f7ff ff9f 	bl	8009968 <__hexdig_fun>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d1f8      	bne.n	8009a20 <__gethex+0x8c>
 8009a2e:	1ba4      	subs	r4, r4, r6
 8009a30:	00a7      	lsls	r7, r4, #2
 8009a32:	7833      	ldrb	r3, [r6, #0]
 8009a34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009a38:	2b50      	cmp	r3, #80	@ 0x50
 8009a3a:	d13e      	bne.n	8009aba <__gethex+0x126>
 8009a3c:	7873      	ldrb	r3, [r6, #1]
 8009a3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009a40:	d033      	beq.n	8009aaa <__gethex+0x116>
 8009a42:	2b2d      	cmp	r3, #45	@ 0x2d
 8009a44:	d034      	beq.n	8009ab0 <__gethex+0x11c>
 8009a46:	1c71      	adds	r1, r6, #1
 8009a48:	2400      	movs	r4, #0
 8009a4a:	7808      	ldrb	r0, [r1, #0]
 8009a4c:	f7ff ff8c 	bl	8009968 <__hexdig_fun>
 8009a50:	1e43      	subs	r3, r0, #1
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b18      	cmp	r3, #24
 8009a56:	d830      	bhi.n	8009aba <__gethex+0x126>
 8009a58:	f1a0 0210 	sub.w	r2, r0, #16
 8009a5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a60:	f7ff ff82 	bl	8009968 <__hexdig_fun>
 8009a64:	f100 3cff 	add.w	ip, r0, #4294967295
 8009a68:	fa5f fc8c 	uxtb.w	ip, ip
 8009a6c:	f1bc 0f18 	cmp.w	ip, #24
 8009a70:	f04f 030a 	mov.w	r3, #10
 8009a74:	d91e      	bls.n	8009ab4 <__gethex+0x120>
 8009a76:	b104      	cbz	r4, 8009a7a <__gethex+0xe6>
 8009a78:	4252      	negs	r2, r2
 8009a7a:	4417      	add	r7, r2
 8009a7c:	f8ca 1000 	str.w	r1, [sl]
 8009a80:	b1ed      	cbz	r5, 8009abe <__gethex+0x12a>
 8009a82:	f1bb 0f00 	cmp.w	fp, #0
 8009a86:	bf0c      	ite	eq
 8009a88:	2506      	moveq	r5, #6
 8009a8a:	2500      	movne	r5, #0
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	b005      	add	sp, #20
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a94:	2500      	movs	r5, #0
 8009a96:	462c      	mov	r4, r5
 8009a98:	e7b0      	b.n	80099fc <__gethex+0x68>
 8009a9a:	2c00      	cmp	r4, #0
 8009a9c:	d1c7      	bne.n	8009a2e <__gethex+0x9a>
 8009a9e:	4627      	mov	r7, r4
 8009aa0:	e7c7      	b.n	8009a32 <__gethex+0x9e>
 8009aa2:	464e      	mov	r6, r9
 8009aa4:	462f      	mov	r7, r5
 8009aa6:	2501      	movs	r5, #1
 8009aa8:	e7c3      	b.n	8009a32 <__gethex+0x9e>
 8009aaa:	2400      	movs	r4, #0
 8009aac:	1cb1      	adds	r1, r6, #2
 8009aae:	e7cc      	b.n	8009a4a <__gethex+0xb6>
 8009ab0:	2401      	movs	r4, #1
 8009ab2:	e7fb      	b.n	8009aac <__gethex+0x118>
 8009ab4:	fb03 0002 	mla	r0, r3, r2, r0
 8009ab8:	e7ce      	b.n	8009a58 <__gethex+0xc4>
 8009aba:	4631      	mov	r1, r6
 8009abc:	e7de      	b.n	8009a7c <__gethex+0xe8>
 8009abe:	eba6 0309 	sub.w	r3, r6, r9
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	2b07      	cmp	r3, #7
 8009ac8:	dc0a      	bgt.n	8009ae0 <__gethex+0x14c>
 8009aca:	9801      	ldr	r0, [sp, #4]
 8009acc:	f000 fafc 	bl	800a0c8 <_Balloc>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	b940      	cbnz	r0, 8009ae6 <__gethex+0x152>
 8009ad4:	4b5c      	ldr	r3, [pc, #368]	@ (8009c48 <__gethex+0x2b4>)
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	21e4      	movs	r1, #228	@ 0xe4
 8009ada:	485c      	ldr	r0, [pc, #368]	@ (8009c4c <__gethex+0x2b8>)
 8009adc:	f7ff f83c 	bl	8008b58 <__assert_func>
 8009ae0:	3101      	adds	r1, #1
 8009ae2:	105b      	asrs	r3, r3, #1
 8009ae4:	e7ef      	b.n	8009ac6 <__gethex+0x132>
 8009ae6:	f100 0a14 	add.w	sl, r0, #20
 8009aea:	2300      	movs	r3, #0
 8009aec:	4655      	mov	r5, sl
 8009aee:	469b      	mov	fp, r3
 8009af0:	45b1      	cmp	r9, r6
 8009af2:	d337      	bcc.n	8009b64 <__gethex+0x1d0>
 8009af4:	f845 bb04 	str.w	fp, [r5], #4
 8009af8:	eba5 050a 	sub.w	r5, r5, sl
 8009afc:	10ad      	asrs	r5, r5, #2
 8009afe:	6125      	str	r5, [r4, #16]
 8009b00:	4658      	mov	r0, fp
 8009b02:	f000 fbd3 	bl	800a2ac <__hi0bits>
 8009b06:	016d      	lsls	r5, r5, #5
 8009b08:	f8d8 6000 	ldr.w	r6, [r8]
 8009b0c:	1a2d      	subs	r5, r5, r0
 8009b0e:	42b5      	cmp	r5, r6
 8009b10:	dd54      	ble.n	8009bbc <__gethex+0x228>
 8009b12:	1bad      	subs	r5, r5, r6
 8009b14:	4629      	mov	r1, r5
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 ff67 	bl	800a9ea <__any_on>
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	b178      	cbz	r0, 8009b40 <__gethex+0x1ac>
 8009b20:	1e6b      	subs	r3, r5, #1
 8009b22:	1159      	asrs	r1, r3, #5
 8009b24:	f003 021f 	and.w	r2, r3, #31
 8009b28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009b2c:	f04f 0901 	mov.w	r9, #1
 8009b30:	fa09 f202 	lsl.w	r2, r9, r2
 8009b34:	420a      	tst	r2, r1
 8009b36:	d003      	beq.n	8009b40 <__gethex+0x1ac>
 8009b38:	454b      	cmp	r3, r9
 8009b3a:	dc36      	bgt.n	8009baa <__gethex+0x216>
 8009b3c:	f04f 0902 	mov.w	r9, #2
 8009b40:	4629      	mov	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff febe 	bl	80098c4 <rshift>
 8009b48:	442f      	add	r7, r5
 8009b4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b4e:	42bb      	cmp	r3, r7
 8009b50:	da42      	bge.n	8009bd8 <__gethex+0x244>
 8009b52:	9801      	ldr	r0, [sp, #4]
 8009b54:	4621      	mov	r1, r4
 8009b56:	f000 faf7 	bl	800a148 <_Bfree>
 8009b5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	25a3      	movs	r5, #163	@ 0xa3
 8009b62:	e793      	b.n	8009a8c <__gethex+0xf8>
 8009b64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009b68:	2a2e      	cmp	r2, #46	@ 0x2e
 8009b6a:	d012      	beq.n	8009b92 <__gethex+0x1fe>
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	d104      	bne.n	8009b7a <__gethex+0x1e6>
 8009b70:	f845 bb04 	str.w	fp, [r5], #4
 8009b74:	f04f 0b00 	mov.w	fp, #0
 8009b78:	465b      	mov	r3, fp
 8009b7a:	7830      	ldrb	r0, [r6, #0]
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	f7ff fef3 	bl	8009968 <__hexdig_fun>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	f000 000f 	and.w	r0, r0, #15
 8009b88:	4098      	lsls	r0, r3
 8009b8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009b8e:	3304      	adds	r3, #4
 8009b90:	e7ae      	b.n	8009af0 <__gethex+0x15c>
 8009b92:	45b1      	cmp	r9, r6
 8009b94:	d8ea      	bhi.n	8009b6c <__gethex+0x1d8>
 8009b96:	492b      	ldr	r1, [pc, #172]	@ (8009c44 <__gethex+0x2b0>)
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7fe febe 	bl	800891e <strncmp>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d1e1      	bne.n	8009b6c <__gethex+0x1d8>
 8009ba8:	e7a2      	b.n	8009af0 <__gethex+0x15c>
 8009baa:	1ea9      	subs	r1, r5, #2
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 ff1c 	bl	800a9ea <__any_on>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0c2      	beq.n	8009b3c <__gethex+0x1a8>
 8009bb6:	f04f 0903 	mov.w	r9, #3
 8009bba:	e7c1      	b.n	8009b40 <__gethex+0x1ac>
 8009bbc:	da09      	bge.n	8009bd2 <__gethex+0x23e>
 8009bbe:	1b75      	subs	r5, r6, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	9801      	ldr	r0, [sp, #4]
 8009bc4:	462a      	mov	r2, r5
 8009bc6:	f000 fcd7 	bl	800a578 <__lshift>
 8009bca:	1b7f      	subs	r7, r7, r5
 8009bcc:	4604      	mov	r4, r0
 8009bce:	f100 0a14 	add.w	sl, r0, #20
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	e7b8      	b.n	8009b4a <__gethex+0x1b6>
 8009bd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009bdc:	42bd      	cmp	r5, r7
 8009bde:	dd6f      	ble.n	8009cc0 <__gethex+0x32c>
 8009be0:	1bed      	subs	r5, r5, r7
 8009be2:	42ae      	cmp	r6, r5
 8009be4:	dc34      	bgt.n	8009c50 <__gethex+0x2bc>
 8009be6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d022      	beq.n	8009c34 <__gethex+0x2a0>
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d024      	beq.n	8009c3c <__gethex+0x2a8>
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d115      	bne.n	8009c22 <__gethex+0x28e>
 8009bf6:	42ae      	cmp	r6, r5
 8009bf8:	d113      	bne.n	8009c22 <__gethex+0x28e>
 8009bfa:	2e01      	cmp	r6, #1
 8009bfc:	d10b      	bne.n	8009c16 <__gethex+0x282>
 8009bfe:	9a02      	ldr	r2, [sp, #8]
 8009c00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	2301      	movs	r3, #1
 8009c08:	6123      	str	r3, [r4, #16]
 8009c0a:	f8ca 3000 	str.w	r3, [sl]
 8009c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c10:	2562      	movs	r5, #98	@ 0x62
 8009c12:	601c      	str	r4, [r3, #0]
 8009c14:	e73a      	b.n	8009a8c <__gethex+0xf8>
 8009c16:	1e71      	subs	r1, r6, #1
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fee6 	bl	800a9ea <__any_on>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d1ed      	bne.n	8009bfe <__gethex+0x26a>
 8009c22:	9801      	ldr	r0, [sp, #4]
 8009c24:	4621      	mov	r1, r4
 8009c26:	f000 fa8f 	bl	800a148 <_Bfree>
 8009c2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	2550      	movs	r5, #80	@ 0x50
 8009c32:	e72b      	b.n	8009a8c <__gethex+0xf8>
 8009c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1f3      	bne.n	8009c22 <__gethex+0x28e>
 8009c3a:	e7e0      	b.n	8009bfe <__gethex+0x26a>
 8009c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1dd      	bne.n	8009bfe <__gethex+0x26a>
 8009c42:	e7ee      	b.n	8009c22 <__gethex+0x28e>
 8009c44:	0800b774 	.word	0x0800b774
 8009c48:	0800b916 	.word	0x0800b916
 8009c4c:	0800b927 	.word	0x0800b927
 8009c50:	1e6f      	subs	r7, r5, #1
 8009c52:	f1b9 0f00 	cmp.w	r9, #0
 8009c56:	d130      	bne.n	8009cba <__gethex+0x326>
 8009c58:	b127      	cbz	r7, 8009c64 <__gethex+0x2d0>
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f000 fec4 	bl	800a9ea <__any_on>
 8009c62:	4681      	mov	r9, r0
 8009c64:	117a      	asrs	r2, r7, #5
 8009c66:	2301      	movs	r3, #1
 8009c68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009c6c:	f007 071f 	and.w	r7, r7, #31
 8009c70:	40bb      	lsls	r3, r7
 8009c72:	4213      	tst	r3, r2
 8009c74:	4629      	mov	r1, r5
 8009c76:	4620      	mov	r0, r4
 8009c78:	bf18      	it	ne
 8009c7a:	f049 0902 	orrne.w	r9, r9, #2
 8009c7e:	f7ff fe21 	bl	80098c4 <rshift>
 8009c82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009c86:	1b76      	subs	r6, r6, r5
 8009c88:	2502      	movs	r5, #2
 8009c8a:	f1b9 0f00 	cmp.w	r9, #0
 8009c8e:	d047      	beq.n	8009d20 <__gethex+0x38c>
 8009c90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d015      	beq.n	8009cc4 <__gethex+0x330>
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d017      	beq.n	8009ccc <__gethex+0x338>
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d109      	bne.n	8009cb4 <__gethex+0x320>
 8009ca0:	f019 0f02 	tst.w	r9, #2
 8009ca4:	d006      	beq.n	8009cb4 <__gethex+0x320>
 8009ca6:	f8da 3000 	ldr.w	r3, [sl]
 8009caa:	ea49 0903 	orr.w	r9, r9, r3
 8009cae:	f019 0f01 	tst.w	r9, #1
 8009cb2:	d10e      	bne.n	8009cd2 <__gethex+0x33e>
 8009cb4:	f045 0510 	orr.w	r5, r5, #16
 8009cb8:	e032      	b.n	8009d20 <__gethex+0x38c>
 8009cba:	f04f 0901 	mov.w	r9, #1
 8009cbe:	e7d1      	b.n	8009c64 <__gethex+0x2d0>
 8009cc0:	2501      	movs	r5, #1
 8009cc2:	e7e2      	b.n	8009c8a <__gethex+0x2f6>
 8009cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cc6:	f1c3 0301 	rsb	r3, r3, #1
 8009cca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f0      	beq.n	8009cb4 <__gethex+0x320>
 8009cd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009cd6:	f104 0314 	add.w	r3, r4, #20
 8009cda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009cde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ce2:	f04f 0c00 	mov.w	ip, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cf0:	d01b      	beq.n	8009d2a <__gethex+0x396>
 8009cf2:	3201      	adds	r2, #1
 8009cf4:	6002      	str	r2, [r0, #0]
 8009cf6:	2d02      	cmp	r5, #2
 8009cf8:	f104 0314 	add.w	r3, r4, #20
 8009cfc:	d13c      	bne.n	8009d78 <__gethex+0x3e4>
 8009cfe:	f8d8 2000 	ldr.w	r2, [r8]
 8009d02:	3a01      	subs	r2, #1
 8009d04:	42b2      	cmp	r2, r6
 8009d06:	d109      	bne.n	8009d1c <__gethex+0x388>
 8009d08:	1171      	asrs	r1, r6, #5
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d10:	f006 061f 	and.w	r6, r6, #31
 8009d14:	fa02 f606 	lsl.w	r6, r2, r6
 8009d18:	421e      	tst	r6, r3
 8009d1a:	d13a      	bne.n	8009d92 <__gethex+0x3fe>
 8009d1c:	f045 0520 	orr.w	r5, r5, #32
 8009d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d22:	601c      	str	r4, [r3, #0]
 8009d24:	9b02      	ldr	r3, [sp, #8]
 8009d26:	601f      	str	r7, [r3, #0]
 8009d28:	e6b0      	b.n	8009a8c <__gethex+0xf8>
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d30:	d8d9      	bhi.n	8009ce6 <__gethex+0x352>
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	459b      	cmp	fp, r3
 8009d36:	db17      	blt.n	8009d68 <__gethex+0x3d4>
 8009d38:	6861      	ldr	r1, [r4, #4]
 8009d3a:	9801      	ldr	r0, [sp, #4]
 8009d3c:	3101      	adds	r1, #1
 8009d3e:	f000 f9c3 	bl	800a0c8 <_Balloc>
 8009d42:	4681      	mov	r9, r0
 8009d44:	b918      	cbnz	r0, 8009d4e <__gethex+0x3ba>
 8009d46:	4b1a      	ldr	r3, [pc, #104]	@ (8009db0 <__gethex+0x41c>)
 8009d48:	4602      	mov	r2, r0
 8009d4a:	2184      	movs	r1, #132	@ 0x84
 8009d4c:	e6c5      	b.n	8009ada <__gethex+0x146>
 8009d4e:	6922      	ldr	r2, [r4, #16]
 8009d50:	3202      	adds	r2, #2
 8009d52:	f104 010c 	add.w	r1, r4, #12
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	300c      	adds	r0, #12
 8009d5a:	f7fe fee4 	bl	8008b26 <memcpy>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	9801      	ldr	r0, [sp, #4]
 8009d62:	f000 f9f1 	bl	800a148 <_Bfree>
 8009d66:	464c      	mov	r4, r9
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d70:	6122      	str	r2, [r4, #16]
 8009d72:	2201      	movs	r2, #1
 8009d74:	615a      	str	r2, [r3, #20]
 8009d76:	e7be      	b.n	8009cf6 <__gethex+0x362>
 8009d78:	6922      	ldr	r2, [r4, #16]
 8009d7a:	455a      	cmp	r2, fp
 8009d7c:	dd0b      	ble.n	8009d96 <__gethex+0x402>
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4620      	mov	r0, r4
 8009d82:	f7ff fd9f 	bl	80098c4 <rshift>
 8009d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d8a:	3701      	adds	r7, #1
 8009d8c:	42bb      	cmp	r3, r7
 8009d8e:	f6ff aee0 	blt.w	8009b52 <__gethex+0x1be>
 8009d92:	2501      	movs	r5, #1
 8009d94:	e7c2      	b.n	8009d1c <__gethex+0x388>
 8009d96:	f016 061f 	ands.w	r6, r6, #31
 8009d9a:	d0fa      	beq.n	8009d92 <__gethex+0x3fe>
 8009d9c:	4453      	add	r3, sl
 8009d9e:	f1c6 0620 	rsb	r6, r6, #32
 8009da2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009da6:	f000 fa81 	bl	800a2ac <__hi0bits>
 8009daa:	42b0      	cmp	r0, r6
 8009dac:	dbe7      	blt.n	8009d7e <__gethex+0x3ea>
 8009dae:	e7f0      	b.n	8009d92 <__gethex+0x3fe>
 8009db0:	0800b916 	.word	0x0800b916

08009db4 <L_shift>:
 8009db4:	f1c2 0208 	rsb	r2, r2, #8
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	b570      	push	{r4, r5, r6, lr}
 8009dbc:	f1c2 0620 	rsb	r6, r2, #32
 8009dc0:	6843      	ldr	r3, [r0, #4]
 8009dc2:	6804      	ldr	r4, [r0, #0]
 8009dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8009dc8:	432c      	orrs	r4, r5
 8009dca:	40d3      	lsrs	r3, r2
 8009dcc:	6004      	str	r4, [r0, #0]
 8009dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dd2:	4288      	cmp	r0, r1
 8009dd4:	d3f4      	bcc.n	8009dc0 <L_shift+0xc>
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}

08009dd8 <__match>:
 8009dd8:	b530      	push	{r4, r5, lr}
 8009dda:	6803      	ldr	r3, [r0, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de2:	b914      	cbnz	r4, 8009dea <__match+0x12>
 8009de4:	6003      	str	r3, [r0, #0]
 8009de6:	2001      	movs	r0, #1
 8009de8:	bd30      	pop	{r4, r5, pc}
 8009dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009df2:	2d19      	cmp	r5, #25
 8009df4:	bf98      	it	ls
 8009df6:	3220      	addls	r2, #32
 8009df8:	42a2      	cmp	r2, r4
 8009dfa:	d0f0      	beq.n	8009dde <__match+0x6>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	e7f3      	b.n	8009de8 <__match+0x10>

08009e00 <__hexnan>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	680b      	ldr	r3, [r1, #0]
 8009e06:	6801      	ldr	r1, [r0, #0]
 8009e08:	115e      	asrs	r6, r3, #5
 8009e0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e0e:	f013 031f 	ands.w	r3, r3, #31
 8009e12:	b087      	sub	sp, #28
 8009e14:	bf18      	it	ne
 8009e16:	3604      	addne	r6, #4
 8009e18:	2500      	movs	r5, #0
 8009e1a:	1f37      	subs	r7, r6, #4
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	4690      	mov	r8, r2
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e26:	46b9      	mov	r9, r7
 8009e28:	463c      	mov	r4, r7
 8009e2a:	9502      	str	r5, [sp, #8]
 8009e2c:	46ab      	mov	fp, r5
 8009e2e:	784a      	ldrb	r2, [r1, #1]
 8009e30:	1c4b      	adds	r3, r1, #1
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	b342      	cbz	r2, 8009e88 <__hexnan+0x88>
 8009e36:	4610      	mov	r0, r2
 8009e38:	9105      	str	r1, [sp, #20]
 8009e3a:	9204      	str	r2, [sp, #16]
 8009e3c:	f7ff fd94 	bl	8009968 <__hexdig_fun>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d151      	bne.n	8009ee8 <__hexnan+0xe8>
 8009e44:	9a04      	ldr	r2, [sp, #16]
 8009e46:	9905      	ldr	r1, [sp, #20]
 8009e48:	2a20      	cmp	r2, #32
 8009e4a:	d818      	bhi.n	8009e7e <__hexnan+0x7e>
 8009e4c:	9b02      	ldr	r3, [sp, #8]
 8009e4e:	459b      	cmp	fp, r3
 8009e50:	dd13      	ble.n	8009e7a <__hexnan+0x7a>
 8009e52:	454c      	cmp	r4, r9
 8009e54:	d206      	bcs.n	8009e64 <__hexnan+0x64>
 8009e56:	2d07      	cmp	r5, #7
 8009e58:	dc04      	bgt.n	8009e64 <__hexnan+0x64>
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7ff ffa8 	bl	8009db4 <L_shift>
 8009e64:	4544      	cmp	r4, r8
 8009e66:	d952      	bls.n	8009f0e <__hexnan+0x10e>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e72:	f8cd b008 	str.w	fp, [sp, #8]
 8009e76:	464c      	mov	r4, r9
 8009e78:	461d      	mov	r5, r3
 8009e7a:	9903      	ldr	r1, [sp, #12]
 8009e7c:	e7d7      	b.n	8009e2e <__hexnan+0x2e>
 8009e7e:	2a29      	cmp	r2, #41	@ 0x29
 8009e80:	d157      	bne.n	8009f32 <__hexnan+0x132>
 8009e82:	3102      	adds	r1, #2
 8009e84:	f8ca 1000 	str.w	r1, [sl]
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	d051      	beq.n	8009f32 <__hexnan+0x132>
 8009e8e:	454c      	cmp	r4, r9
 8009e90:	d206      	bcs.n	8009ea0 <__hexnan+0xa0>
 8009e92:	2d07      	cmp	r5, #7
 8009e94:	dc04      	bgt.n	8009ea0 <__hexnan+0xa0>
 8009e96:	462a      	mov	r2, r5
 8009e98:	4649      	mov	r1, r9
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f7ff ff8a 	bl	8009db4 <L_shift>
 8009ea0:	4544      	cmp	r4, r8
 8009ea2:	d936      	bls.n	8009f12 <__hexnan+0x112>
 8009ea4:	f1a8 0204 	sub.w	r2, r8, #4
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009eae:	f842 1f04 	str.w	r1, [r2, #4]!
 8009eb2:	429f      	cmp	r7, r3
 8009eb4:	d2f9      	bcs.n	8009eaa <__hexnan+0xaa>
 8009eb6:	1b3b      	subs	r3, r7, r4
 8009eb8:	f023 0303 	bic.w	r3, r3, #3
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	3e03      	subs	r6, #3
 8009ec2:	42b4      	cmp	r4, r6
 8009ec4:	bf88      	it	hi
 8009ec6:	2304      	movhi	r3, #4
 8009ec8:	4443      	add	r3, r8
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f843 2b04 	str.w	r2, [r3], #4
 8009ed0:	429f      	cmp	r7, r3
 8009ed2:	d2fb      	bcs.n	8009ecc <__hexnan+0xcc>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	b91b      	cbnz	r3, 8009ee0 <__hexnan+0xe0>
 8009ed8:	4547      	cmp	r7, r8
 8009eda:	d128      	bne.n	8009f2e <__hexnan+0x12e>
 8009edc:	2301      	movs	r3, #1
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	2005      	movs	r0, #5
 8009ee2:	b007      	add	sp, #28
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	3501      	adds	r5, #1
 8009eea:	2d08      	cmp	r5, #8
 8009eec:	f10b 0b01 	add.w	fp, fp, #1
 8009ef0:	dd06      	ble.n	8009f00 <__hexnan+0x100>
 8009ef2:	4544      	cmp	r4, r8
 8009ef4:	d9c1      	bls.n	8009e7a <__hexnan+0x7a>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009efc:	2501      	movs	r5, #1
 8009efe:	3c04      	subs	r4, #4
 8009f00:	6822      	ldr	r2, [r4, #0]
 8009f02:	f000 000f 	and.w	r0, r0, #15
 8009f06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009f0a:	6020      	str	r0, [r4, #0]
 8009f0c:	e7b5      	b.n	8009e7a <__hexnan+0x7a>
 8009f0e:	2508      	movs	r5, #8
 8009f10:	e7b3      	b.n	8009e7a <__hexnan+0x7a>
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0dd      	beq.n	8009ed4 <__hexnan+0xd4>
 8009f18:	f1c3 0320 	rsb	r3, r3, #32
 8009f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f20:	40da      	lsrs	r2, r3
 8009f22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009f26:	4013      	ands	r3, r2
 8009f28:	f846 3c04 	str.w	r3, [r6, #-4]
 8009f2c:	e7d2      	b.n	8009ed4 <__hexnan+0xd4>
 8009f2e:	3f04      	subs	r7, #4
 8009f30:	e7d0      	b.n	8009ed4 <__hexnan+0xd4>
 8009f32:	2004      	movs	r0, #4
 8009f34:	e7d5      	b.n	8009ee2 <__hexnan+0xe2>
	...

08009f38 <malloc>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	@ (8009f44 <malloc+0xc>)
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	f000 b825 	b.w	8009f8c <_malloc_r>
 8009f42:	bf00      	nop
 8009f44:	20000188 	.word	0x20000188

08009f48 <sbrk_aligned>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	4e0f      	ldr	r6, [pc, #60]	@ (8009f88 <sbrk_aligned+0x40>)
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	6831      	ldr	r1, [r6, #0]
 8009f50:	4605      	mov	r5, r0
 8009f52:	b911      	cbnz	r1, 8009f5a <sbrk_aligned+0x12>
 8009f54:	f001 f9a0 	bl	800b298 <_sbrk_r>
 8009f58:	6030      	str	r0, [r6, #0]
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f001 f99b 	bl	800b298 <_sbrk_r>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d103      	bne.n	8009f6e <sbrk_aligned+0x26>
 8009f66:	f04f 34ff 	mov.w	r4, #4294967295
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	1cc4      	adds	r4, r0, #3
 8009f70:	f024 0403 	bic.w	r4, r4, #3
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	d0f8      	beq.n	8009f6a <sbrk_aligned+0x22>
 8009f78:	1a21      	subs	r1, r4, r0
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f001 f98c 	bl	800b298 <_sbrk_r>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d1f2      	bne.n	8009f6a <sbrk_aligned+0x22>
 8009f84:	e7ef      	b.n	8009f66 <sbrk_aligned+0x1e>
 8009f86:	bf00      	nop
 8009f88:	20000d58 	.word	0x20000d58

08009f8c <_malloc_r>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	1ccd      	adds	r5, r1, #3
 8009f92:	f025 0503 	bic.w	r5, r5, #3
 8009f96:	3508      	adds	r5, #8
 8009f98:	2d0c      	cmp	r5, #12
 8009f9a:	bf38      	it	cc
 8009f9c:	250c      	movcc	r5, #12
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	db01      	blt.n	8009fa8 <_malloc_r+0x1c>
 8009fa4:	42a9      	cmp	r1, r5
 8009fa6:	d904      	bls.n	8009fb2 <_malloc_r+0x26>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	6033      	str	r3, [r6, #0]
 8009fac:	2000      	movs	r0, #0
 8009fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a088 <_malloc_r+0xfc>
 8009fb6:	f000 f87b 	bl	800a0b0 <__malloc_lock>
 8009fba:	f8d8 3000 	ldr.w	r3, [r8]
 8009fbe:	461c      	mov	r4, r3
 8009fc0:	bb44      	cbnz	r4, 800a014 <_malloc_r+0x88>
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7ff ffbf 	bl	8009f48 <sbrk_aligned>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	4604      	mov	r4, r0
 8009fce:	d158      	bne.n	800a082 <_malloc_r+0xf6>
 8009fd0:	f8d8 4000 	ldr.w	r4, [r8]
 8009fd4:	4627      	mov	r7, r4
 8009fd6:	2f00      	cmp	r7, #0
 8009fd8:	d143      	bne.n	800a062 <_malloc_r+0xd6>
 8009fda:	2c00      	cmp	r4, #0
 8009fdc:	d04b      	beq.n	800a076 <_malloc_r+0xea>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	eb04 0903 	add.w	r9, r4, r3
 8009fe8:	f001 f956 	bl	800b298 <_sbrk_r>
 8009fec:	4581      	cmp	r9, r0
 8009fee:	d142      	bne.n	800a076 <_malloc_r+0xea>
 8009ff0:	6821      	ldr	r1, [r4, #0]
 8009ff2:	1a6d      	subs	r5, r5, r1
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f7ff ffa6 	bl	8009f48 <sbrk_aligned>
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d03a      	beq.n	800a076 <_malloc_r+0xea>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	442b      	add	r3, r5
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	f8d8 3000 	ldr.w	r3, [r8]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	bb62      	cbnz	r2, 800a068 <_malloc_r+0xdc>
 800a00e:	f8c8 7000 	str.w	r7, [r8]
 800a012:	e00f      	b.n	800a034 <_malloc_r+0xa8>
 800a014:	6822      	ldr	r2, [r4, #0]
 800a016:	1b52      	subs	r2, r2, r5
 800a018:	d420      	bmi.n	800a05c <_malloc_r+0xd0>
 800a01a:	2a0b      	cmp	r2, #11
 800a01c:	d917      	bls.n	800a04e <_malloc_r+0xc2>
 800a01e:	1961      	adds	r1, r4, r5
 800a020:	42a3      	cmp	r3, r4
 800a022:	6025      	str	r5, [r4, #0]
 800a024:	bf18      	it	ne
 800a026:	6059      	strne	r1, [r3, #4]
 800a028:	6863      	ldr	r3, [r4, #4]
 800a02a:	bf08      	it	eq
 800a02c:	f8c8 1000 	streq.w	r1, [r8]
 800a030:	5162      	str	r2, [r4, r5]
 800a032:	604b      	str	r3, [r1, #4]
 800a034:	4630      	mov	r0, r6
 800a036:	f000 f841 	bl	800a0bc <__malloc_unlock>
 800a03a:	f104 000b 	add.w	r0, r4, #11
 800a03e:	1d23      	adds	r3, r4, #4
 800a040:	f020 0007 	bic.w	r0, r0, #7
 800a044:	1ac2      	subs	r2, r0, r3
 800a046:	bf1c      	itt	ne
 800a048:	1a1b      	subne	r3, r3, r0
 800a04a:	50a3      	strne	r3, [r4, r2]
 800a04c:	e7af      	b.n	8009fae <_malloc_r+0x22>
 800a04e:	6862      	ldr	r2, [r4, #4]
 800a050:	42a3      	cmp	r3, r4
 800a052:	bf0c      	ite	eq
 800a054:	f8c8 2000 	streq.w	r2, [r8]
 800a058:	605a      	strne	r2, [r3, #4]
 800a05a:	e7eb      	b.n	800a034 <_malloc_r+0xa8>
 800a05c:	4623      	mov	r3, r4
 800a05e:	6864      	ldr	r4, [r4, #4]
 800a060:	e7ae      	b.n	8009fc0 <_malloc_r+0x34>
 800a062:	463c      	mov	r4, r7
 800a064:	687f      	ldr	r7, [r7, #4]
 800a066:	e7b6      	b.n	8009fd6 <_malloc_r+0x4a>
 800a068:	461a      	mov	r2, r3
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	d1fb      	bne.n	800a068 <_malloc_r+0xdc>
 800a070:	2300      	movs	r3, #0
 800a072:	6053      	str	r3, [r2, #4]
 800a074:	e7de      	b.n	800a034 <_malloc_r+0xa8>
 800a076:	230c      	movs	r3, #12
 800a078:	6033      	str	r3, [r6, #0]
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f81e 	bl	800a0bc <__malloc_unlock>
 800a080:	e794      	b.n	8009fac <_malloc_r+0x20>
 800a082:	6005      	str	r5, [r0, #0]
 800a084:	e7d6      	b.n	800a034 <_malloc_r+0xa8>
 800a086:	bf00      	nop
 800a088:	20000d5c 	.word	0x20000d5c

0800a08c <__ascii_mbtowc>:
 800a08c:	b082      	sub	sp, #8
 800a08e:	b901      	cbnz	r1, 800a092 <__ascii_mbtowc+0x6>
 800a090:	a901      	add	r1, sp, #4
 800a092:	b142      	cbz	r2, 800a0a6 <__ascii_mbtowc+0x1a>
 800a094:	b14b      	cbz	r3, 800a0aa <__ascii_mbtowc+0x1e>
 800a096:	7813      	ldrb	r3, [r2, #0]
 800a098:	600b      	str	r3, [r1, #0]
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	1e10      	subs	r0, r2, #0
 800a09e:	bf18      	it	ne
 800a0a0:	2001      	movne	r0, #1
 800a0a2:	b002      	add	sp, #8
 800a0a4:	4770      	bx	lr
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	e7fb      	b.n	800a0a2 <__ascii_mbtowc+0x16>
 800a0aa:	f06f 0001 	mvn.w	r0, #1
 800a0ae:	e7f8      	b.n	800a0a2 <__ascii_mbtowc+0x16>

0800a0b0 <__malloc_lock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	@ (800a0b8 <__malloc_lock+0x8>)
 800a0b2:	f7fe bd2e 	b.w	8008b12 <__retarget_lock_acquire_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	20000d54 	.word	0x20000d54

0800a0bc <__malloc_unlock>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	@ (800a0c4 <__malloc_unlock+0x8>)
 800a0be:	f7fe bd29 	b.w	8008b14 <__retarget_lock_release_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	20000d54 	.word	0x20000d54

0800a0c8 <_Balloc>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	69c6      	ldr	r6, [r0, #28]
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	b976      	cbnz	r6, 800a0f0 <_Balloc+0x28>
 800a0d2:	2010      	movs	r0, #16
 800a0d4:	f7ff ff30 	bl	8009f38 <malloc>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	61e0      	str	r0, [r4, #28]
 800a0dc:	b920      	cbnz	r0, 800a0e8 <_Balloc+0x20>
 800a0de:	4b18      	ldr	r3, [pc, #96]	@ (800a140 <_Balloc+0x78>)
 800a0e0:	4818      	ldr	r0, [pc, #96]	@ (800a144 <_Balloc+0x7c>)
 800a0e2:	216b      	movs	r1, #107	@ 0x6b
 800a0e4:	f7fe fd38 	bl	8008b58 <__assert_func>
 800a0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0ec:	6006      	str	r6, [r0, #0]
 800a0ee:	60c6      	str	r6, [r0, #12]
 800a0f0:	69e6      	ldr	r6, [r4, #28]
 800a0f2:	68f3      	ldr	r3, [r6, #12]
 800a0f4:	b183      	cbz	r3, 800a118 <_Balloc+0x50>
 800a0f6:	69e3      	ldr	r3, [r4, #28]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0fe:	b9b8      	cbnz	r0, 800a130 <_Balloc+0x68>
 800a100:	2101      	movs	r1, #1
 800a102:	fa01 f605 	lsl.w	r6, r1, r5
 800a106:	1d72      	adds	r2, r6, #5
 800a108:	0092      	lsls	r2, r2, #2
 800a10a:	4620      	mov	r0, r4
 800a10c:	f001 f8db 	bl	800b2c6 <_calloc_r>
 800a110:	b160      	cbz	r0, 800a12c <_Balloc+0x64>
 800a112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a116:	e00e      	b.n	800a136 <_Balloc+0x6e>
 800a118:	2221      	movs	r2, #33	@ 0x21
 800a11a:	2104      	movs	r1, #4
 800a11c:	4620      	mov	r0, r4
 800a11e:	f001 f8d2 	bl	800b2c6 <_calloc_r>
 800a122:	69e3      	ldr	r3, [r4, #28]
 800a124:	60f0      	str	r0, [r6, #12]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e4      	bne.n	800a0f6 <_Balloc+0x2e>
 800a12c:	2000      	movs	r0, #0
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	6802      	ldr	r2, [r0, #0]
 800a132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a136:	2300      	movs	r3, #0
 800a138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a13c:	e7f7      	b.n	800a12e <_Balloc+0x66>
 800a13e:	bf00      	nop
 800a140:	0800b7fc 	.word	0x0800b7fc
 800a144:	0800b987 	.word	0x0800b987

0800a148 <_Bfree>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	69c6      	ldr	r6, [r0, #28]
 800a14c:	4605      	mov	r5, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	b976      	cbnz	r6, 800a170 <_Bfree+0x28>
 800a152:	2010      	movs	r0, #16
 800a154:	f7ff fef0 	bl	8009f38 <malloc>
 800a158:	4602      	mov	r2, r0
 800a15a:	61e8      	str	r0, [r5, #28]
 800a15c:	b920      	cbnz	r0, 800a168 <_Bfree+0x20>
 800a15e:	4b09      	ldr	r3, [pc, #36]	@ (800a184 <_Bfree+0x3c>)
 800a160:	4809      	ldr	r0, [pc, #36]	@ (800a188 <_Bfree+0x40>)
 800a162:	218f      	movs	r1, #143	@ 0x8f
 800a164:	f7fe fcf8 	bl	8008b58 <__assert_func>
 800a168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a16c:	6006      	str	r6, [r0, #0]
 800a16e:	60c6      	str	r6, [r0, #12]
 800a170:	b13c      	cbz	r4, 800a182 <_Bfree+0x3a>
 800a172:	69eb      	ldr	r3, [r5, #28]
 800a174:	6862      	ldr	r2, [r4, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a17c:	6021      	str	r1, [r4, #0]
 800a17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	0800b7fc 	.word	0x0800b7fc
 800a188:	0800b987 	.word	0x0800b987

0800a18c <__multadd>:
 800a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a190:	690d      	ldr	r5, [r1, #16]
 800a192:	4607      	mov	r7, r0
 800a194:	460c      	mov	r4, r1
 800a196:	461e      	mov	r6, r3
 800a198:	f101 0c14 	add.w	ip, r1, #20
 800a19c:	2000      	movs	r0, #0
 800a19e:	f8dc 3000 	ldr.w	r3, [ip]
 800a1a2:	b299      	uxth	r1, r3
 800a1a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1a8:	0c1e      	lsrs	r6, r3, #16
 800a1aa:	0c0b      	lsrs	r3, r1, #16
 800a1ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a1b0:	b289      	uxth	r1, r1
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1b8:	4285      	cmp	r5, r0
 800a1ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1c2:	dcec      	bgt.n	800a19e <__multadd+0x12>
 800a1c4:	b30e      	cbz	r6, 800a20a <__multadd+0x7e>
 800a1c6:	68a3      	ldr	r3, [r4, #8]
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	dc19      	bgt.n	800a200 <__multadd+0x74>
 800a1cc:	6861      	ldr	r1, [r4, #4]
 800a1ce:	4638      	mov	r0, r7
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	f7ff ff79 	bl	800a0c8 <_Balloc>
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	b928      	cbnz	r0, 800a1e6 <__multadd+0x5a>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a210 <__multadd+0x84>)
 800a1de:	480d      	ldr	r0, [pc, #52]	@ (800a214 <__multadd+0x88>)
 800a1e0:	21ba      	movs	r1, #186	@ 0xba
 800a1e2:	f7fe fcb9 	bl	8008b58 <__assert_func>
 800a1e6:	6922      	ldr	r2, [r4, #16]
 800a1e8:	3202      	adds	r2, #2
 800a1ea:	f104 010c 	add.w	r1, r4, #12
 800a1ee:	0092      	lsls	r2, r2, #2
 800a1f0:	300c      	adds	r0, #12
 800a1f2:	f7fe fc98 	bl	8008b26 <memcpy>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff ffa5 	bl	800a148 <_Bfree>
 800a1fe:	4644      	mov	r4, r8
 800a200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a204:	3501      	adds	r5, #1
 800a206:	615e      	str	r6, [r3, #20]
 800a208:	6125      	str	r5, [r4, #16]
 800a20a:	4620      	mov	r0, r4
 800a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a210:	0800b916 	.word	0x0800b916
 800a214:	0800b987 	.word	0x0800b987

0800a218 <__s2b>:
 800a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	460c      	mov	r4, r1
 800a21e:	4615      	mov	r5, r2
 800a220:	461f      	mov	r7, r3
 800a222:	2209      	movs	r2, #9
 800a224:	3308      	adds	r3, #8
 800a226:	4606      	mov	r6, r0
 800a228:	fb93 f3f2 	sdiv	r3, r3, r2
 800a22c:	2100      	movs	r1, #0
 800a22e:	2201      	movs	r2, #1
 800a230:	429a      	cmp	r2, r3
 800a232:	db09      	blt.n	800a248 <__s2b+0x30>
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff ff47 	bl	800a0c8 <_Balloc>
 800a23a:	b940      	cbnz	r0, 800a24e <__s2b+0x36>
 800a23c:	4602      	mov	r2, r0
 800a23e:	4b19      	ldr	r3, [pc, #100]	@ (800a2a4 <__s2b+0x8c>)
 800a240:	4819      	ldr	r0, [pc, #100]	@ (800a2a8 <__s2b+0x90>)
 800a242:	21d3      	movs	r1, #211	@ 0xd3
 800a244:	f7fe fc88 	bl	8008b58 <__assert_func>
 800a248:	0052      	lsls	r2, r2, #1
 800a24a:	3101      	adds	r1, #1
 800a24c:	e7f0      	b.n	800a230 <__s2b+0x18>
 800a24e:	9b08      	ldr	r3, [sp, #32]
 800a250:	6143      	str	r3, [r0, #20]
 800a252:	2d09      	cmp	r5, #9
 800a254:	f04f 0301 	mov.w	r3, #1
 800a258:	6103      	str	r3, [r0, #16]
 800a25a:	dd16      	ble.n	800a28a <__s2b+0x72>
 800a25c:	f104 0909 	add.w	r9, r4, #9
 800a260:	46c8      	mov	r8, r9
 800a262:	442c      	add	r4, r5
 800a264:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a268:	4601      	mov	r1, r0
 800a26a:	3b30      	subs	r3, #48	@ 0x30
 800a26c:	220a      	movs	r2, #10
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ff8c 	bl	800a18c <__multadd>
 800a274:	45a0      	cmp	r8, r4
 800a276:	d1f5      	bne.n	800a264 <__s2b+0x4c>
 800a278:	f1a5 0408 	sub.w	r4, r5, #8
 800a27c:	444c      	add	r4, r9
 800a27e:	1b2d      	subs	r5, r5, r4
 800a280:	1963      	adds	r3, r4, r5
 800a282:	42bb      	cmp	r3, r7
 800a284:	db04      	blt.n	800a290 <__s2b+0x78>
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28a:	340a      	adds	r4, #10
 800a28c:	2509      	movs	r5, #9
 800a28e:	e7f6      	b.n	800a27e <__s2b+0x66>
 800a290:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a294:	4601      	mov	r1, r0
 800a296:	3b30      	subs	r3, #48	@ 0x30
 800a298:	220a      	movs	r2, #10
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff ff76 	bl	800a18c <__multadd>
 800a2a0:	e7ee      	b.n	800a280 <__s2b+0x68>
 800a2a2:	bf00      	nop
 800a2a4:	0800b916 	.word	0x0800b916
 800a2a8:	0800b987 	.word	0x0800b987

0800a2ac <__hi0bits>:
 800a2ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	bf36      	itet	cc
 800a2b4:	0403      	lslcc	r3, r0, #16
 800a2b6:	2000      	movcs	r0, #0
 800a2b8:	2010      	movcc	r0, #16
 800a2ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2be:	bf3c      	itt	cc
 800a2c0:	021b      	lslcc	r3, r3, #8
 800a2c2:	3008      	addcc	r0, #8
 800a2c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2c8:	bf3c      	itt	cc
 800a2ca:	011b      	lslcc	r3, r3, #4
 800a2cc:	3004      	addcc	r0, #4
 800a2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d2:	bf3c      	itt	cc
 800a2d4:	009b      	lslcc	r3, r3, #2
 800a2d6:	3002      	addcc	r0, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	db05      	blt.n	800a2e8 <__hi0bits+0x3c>
 800a2dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2e0:	f100 0001 	add.w	r0, r0, #1
 800a2e4:	bf08      	it	eq
 800a2e6:	2020      	moveq	r0, #32
 800a2e8:	4770      	bx	lr

0800a2ea <__lo0bits>:
 800a2ea:	6803      	ldr	r3, [r0, #0]
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	f013 0007 	ands.w	r0, r3, #7
 800a2f2:	d00b      	beq.n	800a30c <__lo0bits+0x22>
 800a2f4:	07d9      	lsls	r1, r3, #31
 800a2f6:	d421      	bmi.n	800a33c <__lo0bits+0x52>
 800a2f8:	0798      	lsls	r0, r3, #30
 800a2fa:	bf49      	itett	mi
 800a2fc:	085b      	lsrmi	r3, r3, #1
 800a2fe:	089b      	lsrpl	r3, r3, #2
 800a300:	2001      	movmi	r0, #1
 800a302:	6013      	strmi	r3, [r2, #0]
 800a304:	bf5c      	itt	pl
 800a306:	6013      	strpl	r3, [r2, #0]
 800a308:	2002      	movpl	r0, #2
 800a30a:	4770      	bx	lr
 800a30c:	b299      	uxth	r1, r3
 800a30e:	b909      	cbnz	r1, 800a314 <__lo0bits+0x2a>
 800a310:	0c1b      	lsrs	r3, r3, #16
 800a312:	2010      	movs	r0, #16
 800a314:	b2d9      	uxtb	r1, r3
 800a316:	b909      	cbnz	r1, 800a31c <__lo0bits+0x32>
 800a318:	3008      	adds	r0, #8
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	0719      	lsls	r1, r3, #28
 800a31e:	bf04      	itt	eq
 800a320:	091b      	lsreq	r3, r3, #4
 800a322:	3004      	addeq	r0, #4
 800a324:	0799      	lsls	r1, r3, #30
 800a326:	bf04      	itt	eq
 800a328:	089b      	lsreq	r3, r3, #2
 800a32a:	3002      	addeq	r0, #2
 800a32c:	07d9      	lsls	r1, r3, #31
 800a32e:	d403      	bmi.n	800a338 <__lo0bits+0x4e>
 800a330:	085b      	lsrs	r3, r3, #1
 800a332:	f100 0001 	add.w	r0, r0, #1
 800a336:	d003      	beq.n	800a340 <__lo0bits+0x56>
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	4770      	bx	lr
 800a33c:	2000      	movs	r0, #0
 800a33e:	4770      	bx	lr
 800a340:	2020      	movs	r0, #32
 800a342:	4770      	bx	lr

0800a344 <__i2b>:
 800a344:	b510      	push	{r4, lr}
 800a346:	460c      	mov	r4, r1
 800a348:	2101      	movs	r1, #1
 800a34a:	f7ff febd 	bl	800a0c8 <_Balloc>
 800a34e:	4602      	mov	r2, r0
 800a350:	b928      	cbnz	r0, 800a35e <__i2b+0x1a>
 800a352:	4b05      	ldr	r3, [pc, #20]	@ (800a368 <__i2b+0x24>)
 800a354:	4805      	ldr	r0, [pc, #20]	@ (800a36c <__i2b+0x28>)
 800a356:	f240 1145 	movw	r1, #325	@ 0x145
 800a35a:	f7fe fbfd 	bl	8008b58 <__assert_func>
 800a35e:	2301      	movs	r3, #1
 800a360:	6144      	str	r4, [r0, #20]
 800a362:	6103      	str	r3, [r0, #16]
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	0800b916 	.word	0x0800b916
 800a36c:	0800b987 	.word	0x0800b987

0800a370 <__multiply>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4614      	mov	r4, r2
 800a376:	690a      	ldr	r2, [r1, #16]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	bfa8      	it	ge
 800a37e:	4623      	movge	r3, r4
 800a380:	460f      	mov	r7, r1
 800a382:	bfa4      	itt	ge
 800a384:	460c      	movge	r4, r1
 800a386:	461f      	movge	r7, r3
 800a388:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a38c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	6861      	ldr	r1, [r4, #4]
 800a394:	eb0a 0609 	add.w	r6, sl, r9
 800a398:	42b3      	cmp	r3, r6
 800a39a:	b085      	sub	sp, #20
 800a39c:	bfb8      	it	lt
 800a39e:	3101      	addlt	r1, #1
 800a3a0:	f7ff fe92 	bl	800a0c8 <_Balloc>
 800a3a4:	b930      	cbnz	r0, 800a3b4 <__multiply+0x44>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	4b44      	ldr	r3, [pc, #272]	@ (800a4bc <__multiply+0x14c>)
 800a3aa:	4845      	ldr	r0, [pc, #276]	@ (800a4c0 <__multiply+0x150>)
 800a3ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3b0:	f7fe fbd2 	bl	8008b58 <__assert_func>
 800a3b4:	f100 0514 	add.w	r5, r0, #20
 800a3b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3bc:	462b      	mov	r3, r5
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4543      	cmp	r3, r8
 800a3c2:	d321      	bcc.n	800a408 <__multiply+0x98>
 800a3c4:	f107 0114 	add.w	r1, r7, #20
 800a3c8:	f104 0214 	add.w	r2, r4, #20
 800a3cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	1b13      	subs	r3, r2, r4
 800a3d8:	3b15      	subs	r3, #21
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	3304      	adds	r3, #4
 800a3e0:	f104 0715 	add.w	r7, r4, #21
 800a3e4:	42ba      	cmp	r2, r7
 800a3e6:	bf38      	it	cc
 800a3e8:	2304      	movcc	r3, #4
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	9b02      	ldr	r3, [sp, #8]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	428b      	cmp	r3, r1
 800a3f2:	d80c      	bhi.n	800a40e <__multiply+0x9e>
 800a3f4:	2e00      	cmp	r6, #0
 800a3f6:	dd03      	ble.n	800a400 <__multiply+0x90>
 800a3f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d05b      	beq.n	800a4b8 <__multiply+0x148>
 800a400:	6106      	str	r6, [r0, #16]
 800a402:	b005      	add	sp, #20
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	f843 2b04 	str.w	r2, [r3], #4
 800a40c:	e7d8      	b.n	800a3c0 <__multiply+0x50>
 800a40e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a412:	f1ba 0f00 	cmp.w	sl, #0
 800a416:	d024      	beq.n	800a462 <__multiply+0xf2>
 800a418:	f104 0e14 	add.w	lr, r4, #20
 800a41c:	46a9      	mov	r9, r5
 800a41e:	f04f 0c00 	mov.w	ip, #0
 800a422:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a426:	f8d9 3000 	ldr.w	r3, [r9]
 800a42a:	fa1f fb87 	uxth.w	fp, r7
 800a42e:	b29b      	uxth	r3, r3
 800a430:	fb0a 330b 	mla	r3, sl, fp, r3
 800a434:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a438:	f8d9 7000 	ldr.w	r7, [r9]
 800a43c:	4463      	add	r3, ip
 800a43e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a442:	fb0a c70b 	mla	r7, sl, fp, ip
 800a446:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a450:	4572      	cmp	r2, lr
 800a452:	f849 3b04 	str.w	r3, [r9], #4
 800a456:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a45a:	d8e2      	bhi.n	800a422 <__multiply+0xb2>
 800a45c:	9b01      	ldr	r3, [sp, #4]
 800a45e:	f845 c003 	str.w	ip, [r5, r3]
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a468:	3104      	adds	r1, #4
 800a46a:	f1b9 0f00 	cmp.w	r9, #0
 800a46e:	d021      	beq.n	800a4b4 <__multiply+0x144>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	f104 0c14 	add.w	ip, r4, #20
 800a476:	46ae      	mov	lr, r5
 800a478:	f04f 0a00 	mov.w	sl, #0
 800a47c:	f8bc b000 	ldrh.w	fp, [ip]
 800a480:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a484:	fb09 770b 	mla	r7, r9, fp, r7
 800a488:	4457      	add	r7, sl
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a490:	f84e 3b04 	str.w	r3, [lr], #4
 800a494:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a498:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a49c:	f8be 3000 	ldrh.w	r3, [lr]
 800a4a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a4a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4a8:	4562      	cmp	r2, ip
 800a4aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ae:	d8e5      	bhi.n	800a47c <__multiply+0x10c>
 800a4b0:	9f01      	ldr	r7, [sp, #4]
 800a4b2:	51eb      	str	r3, [r5, r7]
 800a4b4:	3504      	adds	r5, #4
 800a4b6:	e799      	b.n	800a3ec <__multiply+0x7c>
 800a4b8:	3e01      	subs	r6, #1
 800a4ba:	e79b      	b.n	800a3f4 <__multiply+0x84>
 800a4bc:	0800b916 	.word	0x0800b916
 800a4c0:	0800b987 	.word	0x0800b987

0800a4c4 <__pow5mult>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4615      	mov	r5, r2
 800a4ca:	f012 0203 	ands.w	r2, r2, #3
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	d007      	beq.n	800a4e4 <__pow5mult+0x20>
 800a4d4:	4c25      	ldr	r4, [pc, #148]	@ (800a56c <__pow5mult+0xa8>)
 800a4d6:	3a01      	subs	r2, #1
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4de:	f7ff fe55 	bl	800a18c <__multadd>
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	10ad      	asrs	r5, r5, #2
 800a4e6:	d03d      	beq.n	800a564 <__pow5mult+0xa0>
 800a4e8:	69fc      	ldr	r4, [r7, #28]
 800a4ea:	b97c      	cbnz	r4, 800a50c <__pow5mult+0x48>
 800a4ec:	2010      	movs	r0, #16
 800a4ee:	f7ff fd23 	bl	8009f38 <malloc>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	61f8      	str	r0, [r7, #28]
 800a4f6:	b928      	cbnz	r0, 800a504 <__pow5mult+0x40>
 800a4f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a570 <__pow5mult+0xac>)
 800a4fa:	481e      	ldr	r0, [pc, #120]	@ (800a574 <__pow5mult+0xb0>)
 800a4fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a500:	f7fe fb2a 	bl	8008b58 <__assert_func>
 800a504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a508:	6004      	str	r4, [r0, #0]
 800a50a:	60c4      	str	r4, [r0, #12]
 800a50c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a514:	b94c      	cbnz	r4, 800a52a <__pow5mult+0x66>
 800a516:	f240 2171 	movw	r1, #625	@ 0x271
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7ff ff12 	bl	800a344 <__i2b>
 800a520:	2300      	movs	r3, #0
 800a522:	f8c8 0008 	str.w	r0, [r8, #8]
 800a526:	4604      	mov	r4, r0
 800a528:	6003      	str	r3, [r0, #0]
 800a52a:	f04f 0900 	mov.w	r9, #0
 800a52e:	07eb      	lsls	r3, r5, #31
 800a530:	d50a      	bpl.n	800a548 <__pow5mult+0x84>
 800a532:	4631      	mov	r1, r6
 800a534:	4622      	mov	r2, r4
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff1a 	bl	800a370 <__multiply>
 800a53c:	4631      	mov	r1, r6
 800a53e:	4680      	mov	r8, r0
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff fe01 	bl	800a148 <_Bfree>
 800a546:	4646      	mov	r6, r8
 800a548:	106d      	asrs	r5, r5, #1
 800a54a:	d00b      	beq.n	800a564 <__pow5mult+0xa0>
 800a54c:	6820      	ldr	r0, [r4, #0]
 800a54e:	b938      	cbnz	r0, 800a560 <__pow5mult+0x9c>
 800a550:	4622      	mov	r2, r4
 800a552:	4621      	mov	r1, r4
 800a554:	4638      	mov	r0, r7
 800a556:	f7ff ff0b 	bl	800a370 <__multiply>
 800a55a:	6020      	str	r0, [r4, #0]
 800a55c:	f8c0 9000 	str.w	r9, [r0]
 800a560:	4604      	mov	r4, r0
 800a562:	e7e4      	b.n	800a52e <__pow5mult+0x6a>
 800a564:	4630      	mov	r0, r6
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	bf00      	nop
 800a56c:	0800b9e0 	.word	0x0800b9e0
 800a570:	0800b7fc 	.word	0x0800b7fc
 800a574:	0800b987 	.word	0x0800b987

0800a578 <__lshift>:
 800a578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	6849      	ldr	r1, [r1, #4]
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a586:	68a3      	ldr	r3, [r4, #8]
 800a588:	4607      	mov	r7, r0
 800a58a:	4691      	mov	r9, r2
 800a58c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a590:	f108 0601 	add.w	r6, r8, #1
 800a594:	42b3      	cmp	r3, r6
 800a596:	db0b      	blt.n	800a5b0 <__lshift+0x38>
 800a598:	4638      	mov	r0, r7
 800a59a:	f7ff fd95 	bl	800a0c8 <_Balloc>
 800a59e:	4605      	mov	r5, r0
 800a5a0:	b948      	cbnz	r0, 800a5b6 <__lshift+0x3e>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	4b28      	ldr	r3, [pc, #160]	@ (800a648 <__lshift+0xd0>)
 800a5a6:	4829      	ldr	r0, [pc, #164]	@ (800a64c <__lshift+0xd4>)
 800a5a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5ac:	f7fe fad4 	bl	8008b58 <__assert_func>
 800a5b0:	3101      	adds	r1, #1
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	e7ee      	b.n	800a594 <__lshift+0x1c>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f100 0114 	add.w	r1, r0, #20
 800a5bc:	f100 0210 	add.w	r2, r0, #16
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	4553      	cmp	r3, sl
 800a5c4:	db33      	blt.n	800a62e <__lshift+0xb6>
 800a5c6:	6920      	ldr	r0, [r4, #16]
 800a5c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5cc:	f104 0314 	add.w	r3, r4, #20
 800a5d0:	f019 091f 	ands.w	r9, r9, #31
 800a5d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5dc:	d02b      	beq.n	800a636 <__lshift+0xbe>
 800a5de:	f1c9 0e20 	rsb	lr, r9, #32
 800a5e2:	468a      	mov	sl, r1
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5ec:	4310      	orrs	r0, r2
 800a5ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f6:	459c      	cmp	ip, r3
 800a5f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5fc:	d8f3      	bhi.n	800a5e6 <__lshift+0x6e>
 800a5fe:	ebac 0304 	sub.w	r3, ip, r4
 800a602:	3b15      	subs	r3, #21
 800a604:	f023 0303 	bic.w	r3, r3, #3
 800a608:	3304      	adds	r3, #4
 800a60a:	f104 0015 	add.w	r0, r4, #21
 800a60e:	4584      	cmp	ip, r0
 800a610:	bf38      	it	cc
 800a612:	2304      	movcc	r3, #4
 800a614:	50ca      	str	r2, [r1, r3]
 800a616:	b10a      	cbz	r2, 800a61c <__lshift+0xa4>
 800a618:	f108 0602 	add.w	r6, r8, #2
 800a61c:	3e01      	subs	r6, #1
 800a61e:	4638      	mov	r0, r7
 800a620:	612e      	str	r6, [r5, #16]
 800a622:	4621      	mov	r1, r4
 800a624:	f7ff fd90 	bl	800a148 <_Bfree>
 800a628:	4628      	mov	r0, r5
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a632:	3301      	adds	r3, #1
 800a634:	e7c5      	b.n	800a5c2 <__lshift+0x4a>
 800a636:	3904      	subs	r1, #4
 800a638:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a640:	459c      	cmp	ip, r3
 800a642:	d8f9      	bhi.n	800a638 <__lshift+0xc0>
 800a644:	e7ea      	b.n	800a61c <__lshift+0xa4>
 800a646:	bf00      	nop
 800a648:	0800b916 	.word	0x0800b916
 800a64c:	0800b987 	.word	0x0800b987

0800a650 <__mcmp>:
 800a650:	690a      	ldr	r2, [r1, #16]
 800a652:	4603      	mov	r3, r0
 800a654:	6900      	ldr	r0, [r0, #16]
 800a656:	1a80      	subs	r0, r0, r2
 800a658:	b530      	push	{r4, r5, lr}
 800a65a:	d10e      	bne.n	800a67a <__mcmp+0x2a>
 800a65c:	3314      	adds	r3, #20
 800a65e:	3114      	adds	r1, #20
 800a660:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a664:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a66c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a670:	4295      	cmp	r5, r2
 800a672:	d003      	beq.n	800a67c <__mcmp+0x2c>
 800a674:	d205      	bcs.n	800a682 <__mcmp+0x32>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	bd30      	pop	{r4, r5, pc}
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	d3f3      	bcc.n	800a668 <__mcmp+0x18>
 800a680:	e7fb      	b.n	800a67a <__mcmp+0x2a>
 800a682:	2001      	movs	r0, #1
 800a684:	e7f9      	b.n	800a67a <__mcmp+0x2a>
	...

0800a688 <__mdiff>:
 800a688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	4689      	mov	r9, r1
 800a68e:	4606      	mov	r6, r0
 800a690:	4611      	mov	r1, r2
 800a692:	4648      	mov	r0, r9
 800a694:	4614      	mov	r4, r2
 800a696:	f7ff ffdb 	bl	800a650 <__mcmp>
 800a69a:	1e05      	subs	r5, r0, #0
 800a69c:	d112      	bne.n	800a6c4 <__mdiff+0x3c>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff fd11 	bl	800a0c8 <_Balloc>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	b928      	cbnz	r0, 800a6b6 <__mdiff+0x2e>
 800a6aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a7a8 <__mdiff+0x120>)
 800a6ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a6b0:	483e      	ldr	r0, [pc, #248]	@ (800a7ac <__mdiff+0x124>)
 800a6b2:	f7fe fa51 	bl	8008b58 <__assert_func>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6bc:	4610      	mov	r0, r2
 800a6be:	b003      	add	sp, #12
 800a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c4:	bfbc      	itt	lt
 800a6c6:	464b      	movlt	r3, r9
 800a6c8:	46a1      	movlt	r9, r4
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6d0:	bfba      	itte	lt
 800a6d2:	461c      	movlt	r4, r3
 800a6d4:	2501      	movlt	r5, #1
 800a6d6:	2500      	movge	r5, #0
 800a6d8:	f7ff fcf6 	bl	800a0c8 <_Balloc>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	b918      	cbnz	r0, 800a6e8 <__mdiff+0x60>
 800a6e0:	4b31      	ldr	r3, [pc, #196]	@ (800a7a8 <__mdiff+0x120>)
 800a6e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a6e6:	e7e3      	b.n	800a6b0 <__mdiff+0x28>
 800a6e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6ec:	6926      	ldr	r6, [r4, #16]
 800a6ee:	60c5      	str	r5, [r0, #12]
 800a6f0:	f109 0310 	add.w	r3, r9, #16
 800a6f4:	f109 0514 	add.w	r5, r9, #20
 800a6f8:	f104 0e14 	add.w	lr, r4, #20
 800a6fc:	f100 0b14 	add.w	fp, r0, #20
 800a700:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a704:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	46d9      	mov	r9, fp
 800a70c:	f04f 0c00 	mov.w	ip, #0
 800a710:	9b01      	ldr	r3, [sp, #4]
 800a712:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a716:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	fa1f f38a 	uxth.w	r3, sl
 800a720:	4619      	mov	r1, r3
 800a722:	b283      	uxth	r3, r0
 800a724:	1acb      	subs	r3, r1, r3
 800a726:	0c00      	lsrs	r0, r0, #16
 800a728:	4463      	add	r3, ip
 800a72a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a72e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a732:	b29b      	uxth	r3, r3
 800a734:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a738:	4576      	cmp	r6, lr
 800a73a:	f849 3b04 	str.w	r3, [r9], #4
 800a73e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a742:	d8e5      	bhi.n	800a710 <__mdiff+0x88>
 800a744:	1b33      	subs	r3, r6, r4
 800a746:	3b15      	subs	r3, #21
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	3415      	adds	r4, #21
 800a74e:	3304      	adds	r3, #4
 800a750:	42a6      	cmp	r6, r4
 800a752:	bf38      	it	cc
 800a754:	2304      	movcc	r3, #4
 800a756:	441d      	add	r5, r3
 800a758:	445b      	add	r3, fp
 800a75a:	461e      	mov	r6, r3
 800a75c:	462c      	mov	r4, r5
 800a75e:	4544      	cmp	r4, r8
 800a760:	d30e      	bcc.n	800a780 <__mdiff+0xf8>
 800a762:	f108 0103 	add.w	r1, r8, #3
 800a766:	1b49      	subs	r1, r1, r5
 800a768:	f021 0103 	bic.w	r1, r1, #3
 800a76c:	3d03      	subs	r5, #3
 800a76e:	45a8      	cmp	r8, r5
 800a770:	bf38      	it	cc
 800a772:	2100      	movcc	r1, #0
 800a774:	440b      	add	r3, r1
 800a776:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a77a:	b191      	cbz	r1, 800a7a2 <__mdiff+0x11a>
 800a77c:	6117      	str	r7, [r2, #16]
 800a77e:	e79d      	b.n	800a6bc <__mdiff+0x34>
 800a780:	f854 1b04 	ldr.w	r1, [r4], #4
 800a784:	46e6      	mov	lr, ip
 800a786:	0c08      	lsrs	r0, r1, #16
 800a788:	fa1c fc81 	uxtah	ip, ip, r1
 800a78c:	4471      	add	r1, lr
 800a78e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a792:	b289      	uxth	r1, r1
 800a794:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a798:	f846 1b04 	str.w	r1, [r6], #4
 800a79c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7a0:	e7dd      	b.n	800a75e <__mdiff+0xd6>
 800a7a2:	3f01      	subs	r7, #1
 800a7a4:	e7e7      	b.n	800a776 <__mdiff+0xee>
 800a7a6:	bf00      	nop
 800a7a8:	0800b916 	.word	0x0800b916
 800a7ac:	0800b987 	.word	0x0800b987

0800a7b0 <__ulp>:
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	ed8d 0b00 	vstr	d0, [sp]
 800a7b6:	9a01      	ldr	r2, [sp, #4]
 800a7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f8 <__ulp+0x48>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc08      	bgt.n	800a7d6 <__ulp+0x26>
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7ce:	da04      	bge.n	800a7da <__ulp+0x2a>
 800a7d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7d4:	4113      	asrs	r3, r2
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	e008      	b.n	800a7ec <__ulp+0x3c>
 800a7da:	f1a2 0314 	sub.w	r3, r2, #20
 800a7de:	2b1e      	cmp	r3, #30
 800a7e0:	bfda      	itte	le
 800a7e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7e6:	40da      	lsrle	r2, r3
 800a7e8:	2201      	movgt	r2, #1
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	ec41 0b10 	vmov	d0, r0, r1
 800a7f4:	b002      	add	sp, #8
 800a7f6:	4770      	bx	lr
 800a7f8:	7ff00000 	.word	0x7ff00000

0800a7fc <__b2d>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	6906      	ldr	r6, [r0, #16]
 800a802:	f100 0814 	add.w	r8, r0, #20
 800a806:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a80a:	1f37      	subs	r7, r6, #4
 800a80c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a810:	4610      	mov	r0, r2
 800a812:	f7ff fd4b 	bl	800a2ac <__hi0bits>
 800a816:	f1c0 0320 	rsb	r3, r0, #32
 800a81a:	280a      	cmp	r0, #10
 800a81c:	600b      	str	r3, [r1, #0]
 800a81e:	491b      	ldr	r1, [pc, #108]	@ (800a88c <__b2d+0x90>)
 800a820:	dc15      	bgt.n	800a84e <__b2d+0x52>
 800a822:	f1c0 0c0b 	rsb	ip, r0, #11
 800a826:	fa22 f30c 	lsr.w	r3, r2, ip
 800a82a:	45b8      	cmp	r8, r7
 800a82c:	ea43 0501 	orr.w	r5, r3, r1
 800a830:	bf34      	ite	cc
 800a832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a836:	2300      	movcs	r3, #0
 800a838:	3015      	adds	r0, #21
 800a83a:	fa02 f000 	lsl.w	r0, r2, r0
 800a83e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a842:	4303      	orrs	r3, r0
 800a844:	461c      	mov	r4, r3
 800a846:	ec45 4b10 	vmov	d0, r4, r5
 800a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84e:	45b8      	cmp	r8, r7
 800a850:	bf3a      	itte	cc
 800a852:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a856:	f1a6 0708 	subcc.w	r7, r6, #8
 800a85a:	2300      	movcs	r3, #0
 800a85c:	380b      	subs	r0, #11
 800a85e:	d012      	beq.n	800a886 <__b2d+0x8a>
 800a860:	f1c0 0120 	rsb	r1, r0, #32
 800a864:	fa23 f401 	lsr.w	r4, r3, r1
 800a868:	4082      	lsls	r2, r0
 800a86a:	4322      	orrs	r2, r4
 800a86c:	4547      	cmp	r7, r8
 800a86e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a872:	bf8c      	ite	hi
 800a874:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a878:	2200      	movls	r2, #0
 800a87a:	4083      	lsls	r3, r0
 800a87c:	40ca      	lsrs	r2, r1
 800a87e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a882:	4313      	orrs	r3, r2
 800a884:	e7de      	b.n	800a844 <__b2d+0x48>
 800a886:	ea42 0501 	orr.w	r5, r2, r1
 800a88a:	e7db      	b.n	800a844 <__b2d+0x48>
 800a88c:	3ff00000 	.word	0x3ff00000

0800a890 <__d2b>:
 800a890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a894:	460f      	mov	r7, r1
 800a896:	2101      	movs	r1, #1
 800a898:	ec59 8b10 	vmov	r8, r9, d0
 800a89c:	4616      	mov	r6, r2
 800a89e:	f7ff fc13 	bl	800a0c8 <_Balloc>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b930      	cbnz	r0, 800a8b4 <__d2b+0x24>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b23      	ldr	r3, [pc, #140]	@ (800a938 <__d2b+0xa8>)
 800a8aa:	4824      	ldr	r0, [pc, #144]	@ (800a93c <__d2b+0xac>)
 800a8ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8b0:	f7fe f952 	bl	8008b58 <__assert_func>
 800a8b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8bc:	b10d      	cbz	r5, 800a8c2 <__d2b+0x32>
 800a8be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a8c8:	d023      	beq.n	800a912 <__d2b+0x82>
 800a8ca:	4668      	mov	r0, sp
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	f7ff fd0c 	bl	800a2ea <__lo0bits>
 800a8d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8d6:	b1d0      	cbz	r0, 800a90e <__d2b+0x7e>
 800a8d8:	f1c0 0320 	rsb	r3, r0, #32
 800a8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	40c2      	lsrs	r2, r0
 800a8e4:	6163      	str	r3, [r4, #20]
 800a8e6:	9201      	str	r2, [sp, #4]
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	61a3      	str	r3, [r4, #24]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bf0c      	ite	eq
 800a8f0:	2201      	moveq	r2, #1
 800a8f2:	2202      	movne	r2, #2
 800a8f4:	6122      	str	r2, [r4, #16]
 800a8f6:	b1a5      	cbz	r5, 800a922 <__d2b+0x92>
 800a8f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8fc:	4405      	add	r5, r0
 800a8fe:	603d      	str	r5, [r7, #0]
 800a900:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a904:	6030      	str	r0, [r6, #0]
 800a906:	4620      	mov	r0, r4
 800a908:	b003      	add	sp, #12
 800a90a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a90e:	6161      	str	r1, [r4, #20]
 800a910:	e7ea      	b.n	800a8e8 <__d2b+0x58>
 800a912:	a801      	add	r0, sp, #4
 800a914:	f7ff fce9 	bl	800a2ea <__lo0bits>
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	6163      	str	r3, [r4, #20]
 800a91c:	3020      	adds	r0, #32
 800a91e:	2201      	movs	r2, #1
 800a920:	e7e8      	b.n	800a8f4 <__d2b+0x64>
 800a922:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a92a:	6038      	str	r0, [r7, #0]
 800a92c:	6918      	ldr	r0, [r3, #16]
 800a92e:	f7ff fcbd 	bl	800a2ac <__hi0bits>
 800a932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a936:	e7e5      	b.n	800a904 <__d2b+0x74>
 800a938:	0800b916 	.word	0x0800b916
 800a93c:	0800b987 	.word	0x0800b987

0800a940 <__ratio>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	b085      	sub	sp, #20
 800a946:	e9cd 1000 	strd	r1, r0, [sp]
 800a94a:	a902      	add	r1, sp, #8
 800a94c:	f7ff ff56 	bl	800a7fc <__b2d>
 800a950:	9800      	ldr	r0, [sp, #0]
 800a952:	a903      	add	r1, sp, #12
 800a954:	ec55 4b10 	vmov	r4, r5, d0
 800a958:	f7ff ff50 	bl	800a7fc <__b2d>
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	6919      	ldr	r1, [r3, #16]
 800a960:	9b00      	ldr	r3, [sp, #0]
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	1ac9      	subs	r1, r1, r3
 800a966:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	ec5b ab10 	vmov	sl, fp, d0
 800a970:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a974:	2b00      	cmp	r3, #0
 800a976:	bfce      	itee	gt
 800a978:	462a      	movgt	r2, r5
 800a97a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a97e:	465a      	movle	r2, fp
 800a980:	462f      	mov	r7, r5
 800a982:	46d9      	mov	r9, fp
 800a984:	bfcc      	ite	gt
 800a986:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a98a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a98e:	464b      	mov	r3, r9
 800a990:	4652      	mov	r2, sl
 800a992:	4620      	mov	r0, r4
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 ff71 	bl	800087c <__aeabi_ddiv>
 800a99a:	ec41 0b10 	vmov	d0, r0, r1
 800a99e:	b005      	add	sp, #20
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9a4 <__copybits>:
 800a9a4:	3901      	subs	r1, #1
 800a9a6:	b570      	push	{r4, r5, r6, lr}
 800a9a8:	1149      	asrs	r1, r1, #5
 800a9aa:	6914      	ldr	r4, [r2, #16]
 800a9ac:	3101      	adds	r1, #1
 800a9ae:	f102 0314 	add.w	r3, r2, #20
 800a9b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ba:	1f05      	subs	r5, r0, #4
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d30c      	bcc.n	800a9da <__copybits+0x36>
 800a9c0:	1aa3      	subs	r3, r4, r2
 800a9c2:	3b11      	subs	r3, #17
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	3211      	adds	r2, #17
 800a9ca:	42a2      	cmp	r2, r4
 800a9cc:	bf88      	it	hi
 800a9ce:	2300      	movhi	r3, #0
 800a9d0:	4418      	add	r0, r3
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4288      	cmp	r0, r1
 800a9d6:	d305      	bcc.n	800a9e4 <__copybits+0x40>
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9de:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9e2:	e7eb      	b.n	800a9bc <__copybits+0x18>
 800a9e4:	f840 3b04 	str.w	r3, [r0], #4
 800a9e8:	e7f4      	b.n	800a9d4 <__copybits+0x30>

0800a9ea <__any_on>:
 800a9ea:	f100 0214 	add.w	r2, r0, #20
 800a9ee:	6900      	ldr	r0, [r0, #16]
 800a9f0:	114b      	asrs	r3, r1, #5
 800a9f2:	4298      	cmp	r0, r3
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	db11      	blt.n	800aa1c <__any_on+0x32>
 800a9f8:	dd0a      	ble.n	800aa10 <__any_on+0x26>
 800a9fa:	f011 011f 	ands.w	r1, r1, #31
 800a9fe:	d007      	beq.n	800aa10 <__any_on+0x26>
 800aa00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa04:	fa24 f001 	lsr.w	r0, r4, r1
 800aa08:	fa00 f101 	lsl.w	r1, r0, r1
 800aa0c:	428c      	cmp	r4, r1
 800aa0e:	d10b      	bne.n	800aa28 <__any_on+0x3e>
 800aa10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d803      	bhi.n	800aa20 <__any_on+0x36>
 800aa18:	2000      	movs	r0, #0
 800aa1a:	bd10      	pop	{r4, pc}
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	e7f7      	b.n	800aa10 <__any_on+0x26>
 800aa20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa24:	2900      	cmp	r1, #0
 800aa26:	d0f5      	beq.n	800aa14 <__any_on+0x2a>
 800aa28:	2001      	movs	r0, #1
 800aa2a:	e7f6      	b.n	800aa1a <__any_on+0x30>

0800aa2c <__ascii_wctomb>:
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	b141      	cbz	r1, 800aa44 <__ascii_wctomb+0x18>
 800aa32:	2aff      	cmp	r2, #255	@ 0xff
 800aa34:	d904      	bls.n	800aa40 <__ascii_wctomb+0x14>
 800aa36:	228a      	movs	r2, #138	@ 0x8a
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	4770      	bx	lr
 800aa40:	700a      	strb	r2, [r1, #0]
 800aa42:	2001      	movs	r0, #1
 800aa44:	4770      	bx	lr

0800aa46 <__ssputs_r>:
 800aa46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4a:	688e      	ldr	r6, [r1, #8]
 800aa4c:	461f      	mov	r7, r3
 800aa4e:	42be      	cmp	r6, r7
 800aa50:	680b      	ldr	r3, [r1, #0]
 800aa52:	4682      	mov	sl, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	4690      	mov	r8, r2
 800aa58:	d82d      	bhi.n	800aab6 <__ssputs_r+0x70>
 800aa5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa5e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa62:	d026      	beq.n	800aab2 <__ssputs_r+0x6c>
 800aa64:	6965      	ldr	r5, [r4, #20]
 800aa66:	6909      	ldr	r1, [r1, #16]
 800aa68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa6c:	eba3 0901 	sub.w	r9, r3, r1
 800aa70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa74:	1c7b      	adds	r3, r7, #1
 800aa76:	444b      	add	r3, r9
 800aa78:	106d      	asrs	r5, r5, #1
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	bf38      	it	cc
 800aa7e:	461d      	movcc	r5, r3
 800aa80:	0553      	lsls	r3, r2, #21
 800aa82:	d527      	bpl.n	800aad4 <__ssputs_r+0x8e>
 800aa84:	4629      	mov	r1, r5
 800aa86:	f7ff fa81 	bl	8009f8c <_malloc_r>
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	b360      	cbz	r0, 800aae8 <__ssputs_r+0xa2>
 800aa8e:	6921      	ldr	r1, [r4, #16]
 800aa90:	464a      	mov	r2, r9
 800aa92:	f7fe f848 	bl	8008b26 <memcpy>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	6126      	str	r6, [r4, #16]
 800aaa4:	6165      	str	r5, [r4, #20]
 800aaa6:	444e      	add	r6, r9
 800aaa8:	eba5 0509 	sub.w	r5, r5, r9
 800aaac:	6026      	str	r6, [r4, #0]
 800aaae:	60a5      	str	r5, [r4, #8]
 800aab0:	463e      	mov	r6, r7
 800aab2:	42be      	cmp	r6, r7
 800aab4:	d900      	bls.n	800aab8 <__ssputs_r+0x72>
 800aab6:	463e      	mov	r6, r7
 800aab8:	6820      	ldr	r0, [r4, #0]
 800aaba:	4632      	mov	r2, r6
 800aabc:	4641      	mov	r1, r8
 800aabe:	f000 fbaf 	bl	800b220 <memmove>
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	1b9b      	subs	r3, r3, r6
 800aac6:	60a3      	str	r3, [r4, #8]
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	4433      	add	r3, r6
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	2000      	movs	r0, #0
 800aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad4:	462a      	mov	r2, r5
 800aad6:	f000 fc0a 	bl	800b2ee <_realloc_r>
 800aada:	4606      	mov	r6, r0
 800aadc:	2800      	cmp	r0, #0
 800aade:	d1e0      	bne.n	800aaa2 <__ssputs_r+0x5c>
 800aae0:	6921      	ldr	r1, [r4, #16]
 800aae2:	4650      	mov	r0, sl
 800aae4:	f7fe fea4 	bl	8009830 <_free_r>
 800aae8:	230c      	movs	r3, #12
 800aaea:	f8ca 3000 	str.w	r3, [sl]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	f04f 30ff 	mov.w	r0, #4294967295
 800aafa:	e7e9      	b.n	800aad0 <__ssputs_r+0x8a>

0800aafc <_svfiprintf_r>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4698      	mov	r8, r3
 800ab02:	898b      	ldrh	r3, [r1, #12]
 800ab04:	061b      	lsls	r3, r3, #24
 800ab06:	b09d      	sub	sp, #116	@ 0x74
 800ab08:	4607      	mov	r7, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	4614      	mov	r4, r2
 800ab0e:	d510      	bpl.n	800ab32 <_svfiprintf_r+0x36>
 800ab10:	690b      	ldr	r3, [r1, #16]
 800ab12:	b973      	cbnz	r3, 800ab32 <_svfiprintf_r+0x36>
 800ab14:	2140      	movs	r1, #64	@ 0x40
 800ab16:	f7ff fa39 	bl	8009f8c <_malloc_r>
 800ab1a:	6028      	str	r0, [r5, #0]
 800ab1c:	6128      	str	r0, [r5, #16]
 800ab1e:	b930      	cbnz	r0, 800ab2e <_svfiprintf_r+0x32>
 800ab20:	230c      	movs	r3, #12
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295
 800ab28:	b01d      	add	sp, #116	@ 0x74
 800ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2e:	2340      	movs	r3, #64	@ 0x40
 800ab30:	616b      	str	r3, [r5, #20]
 800ab32:	2300      	movs	r3, #0
 800ab34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab36:	2320      	movs	r3, #32
 800ab38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab40:	2330      	movs	r3, #48	@ 0x30
 800ab42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ace0 <_svfiprintf_r+0x1e4>
 800ab46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab4a:	f04f 0901 	mov.w	r9, #1
 800ab4e:	4623      	mov	r3, r4
 800ab50:	469a      	mov	sl, r3
 800ab52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab56:	b10a      	cbz	r2, 800ab5c <_svfiprintf_r+0x60>
 800ab58:	2a25      	cmp	r2, #37	@ 0x25
 800ab5a:	d1f9      	bne.n	800ab50 <_svfiprintf_r+0x54>
 800ab5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab60:	d00b      	beq.n	800ab7a <_svfiprintf_r+0x7e>
 800ab62:	465b      	mov	r3, fp
 800ab64:	4622      	mov	r2, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7ff ff6c 	bl	800aa46 <__ssputs_r>
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f000 80a7 	beq.w	800acc2 <_svfiprintf_r+0x1c6>
 800ab74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab76:	445a      	add	r2, fp
 800ab78:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 809f 	beq.w	800acc2 <_svfiprintf_r+0x1c6>
 800ab84:	2300      	movs	r3, #0
 800ab86:	f04f 32ff 	mov.w	r2, #4294967295
 800ab8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab8e:	f10a 0a01 	add.w	sl, sl, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	9307      	str	r3, [sp, #28]
 800ab96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab9c:	4654      	mov	r4, sl
 800ab9e:	2205      	movs	r2, #5
 800aba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba4:	484e      	ldr	r0, [pc, #312]	@ (800ace0 <_svfiprintf_r+0x1e4>)
 800aba6:	f7f5 fb2b 	bl	8000200 <memchr>
 800abaa:	9a04      	ldr	r2, [sp, #16]
 800abac:	b9d8      	cbnz	r0, 800abe6 <_svfiprintf_r+0xea>
 800abae:	06d0      	lsls	r0, r2, #27
 800abb0:	bf44      	itt	mi
 800abb2:	2320      	movmi	r3, #32
 800abb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abb8:	0711      	lsls	r1, r2, #28
 800abba:	bf44      	itt	mi
 800abbc:	232b      	movmi	r3, #43	@ 0x2b
 800abbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abc2:	f89a 3000 	ldrb.w	r3, [sl]
 800abc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abc8:	d015      	beq.n	800abf6 <_svfiprintf_r+0xfa>
 800abca:	9a07      	ldr	r2, [sp, #28]
 800abcc:	4654      	mov	r4, sl
 800abce:	2000      	movs	r0, #0
 800abd0:	f04f 0c0a 	mov.w	ip, #10
 800abd4:	4621      	mov	r1, r4
 800abd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abda:	3b30      	subs	r3, #48	@ 0x30
 800abdc:	2b09      	cmp	r3, #9
 800abde:	d94b      	bls.n	800ac78 <_svfiprintf_r+0x17c>
 800abe0:	b1b0      	cbz	r0, 800ac10 <_svfiprintf_r+0x114>
 800abe2:	9207      	str	r2, [sp, #28]
 800abe4:	e014      	b.n	800ac10 <_svfiprintf_r+0x114>
 800abe6:	eba0 0308 	sub.w	r3, r0, r8
 800abea:	fa09 f303 	lsl.w	r3, r9, r3
 800abee:	4313      	orrs	r3, r2
 800abf0:	9304      	str	r3, [sp, #16]
 800abf2:	46a2      	mov	sl, r4
 800abf4:	e7d2      	b.n	800ab9c <_svfiprintf_r+0xa0>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	1d19      	adds	r1, r3, #4
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	9103      	str	r1, [sp, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bfbb      	ittet	lt
 800ac02:	425b      	neglt	r3, r3
 800ac04:	f042 0202 	orrlt.w	r2, r2, #2
 800ac08:	9307      	strge	r3, [sp, #28]
 800ac0a:	9307      	strlt	r3, [sp, #28]
 800ac0c:	bfb8      	it	lt
 800ac0e:	9204      	strlt	r2, [sp, #16]
 800ac10:	7823      	ldrb	r3, [r4, #0]
 800ac12:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac14:	d10a      	bne.n	800ac2c <_svfiprintf_r+0x130>
 800ac16:	7863      	ldrb	r3, [r4, #1]
 800ac18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac1a:	d132      	bne.n	800ac82 <_svfiprintf_r+0x186>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	1d1a      	adds	r2, r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	9203      	str	r2, [sp, #12]
 800ac24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac28:	3402      	adds	r4, #2
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800acf0 <_svfiprintf_r+0x1f4>
 800ac30:	7821      	ldrb	r1, [r4, #0]
 800ac32:	2203      	movs	r2, #3
 800ac34:	4650      	mov	r0, sl
 800ac36:	f7f5 fae3 	bl	8000200 <memchr>
 800ac3a:	b138      	cbz	r0, 800ac4c <_svfiprintf_r+0x150>
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	eba0 000a 	sub.w	r0, r0, sl
 800ac42:	2240      	movs	r2, #64	@ 0x40
 800ac44:	4082      	lsls	r2, r0
 800ac46:	4313      	orrs	r3, r2
 800ac48:	3401      	adds	r4, #1
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac50:	4824      	ldr	r0, [pc, #144]	@ (800ace4 <_svfiprintf_r+0x1e8>)
 800ac52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac56:	2206      	movs	r2, #6
 800ac58:	f7f5 fad2 	bl	8000200 <memchr>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d036      	beq.n	800acce <_svfiprintf_r+0x1d2>
 800ac60:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <_svfiprintf_r+0x1ec>)
 800ac62:	bb1b      	cbnz	r3, 800acac <_svfiprintf_r+0x1b0>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	3307      	adds	r3, #7
 800ac68:	f023 0307 	bic.w	r3, r3, #7
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	9303      	str	r3, [sp, #12]
 800ac70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac72:	4433      	add	r3, r6
 800ac74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac76:	e76a      	b.n	800ab4e <_svfiprintf_r+0x52>
 800ac78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e7a8      	b.n	800abd4 <_svfiprintf_r+0xd8>
 800ac82:	2300      	movs	r3, #0
 800ac84:	3401      	adds	r4, #1
 800ac86:	9305      	str	r3, [sp, #20]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f04f 0c0a 	mov.w	ip, #10
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac94:	3a30      	subs	r2, #48	@ 0x30
 800ac96:	2a09      	cmp	r2, #9
 800ac98:	d903      	bls.n	800aca2 <_svfiprintf_r+0x1a6>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0c6      	beq.n	800ac2c <_svfiprintf_r+0x130>
 800ac9e:	9105      	str	r1, [sp, #20]
 800aca0:	e7c4      	b.n	800ac2c <_svfiprintf_r+0x130>
 800aca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aca6:	4604      	mov	r4, r0
 800aca8:	2301      	movs	r3, #1
 800acaa:	e7f0      	b.n	800ac8e <_svfiprintf_r+0x192>
 800acac:	ab03      	add	r3, sp, #12
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	462a      	mov	r2, r5
 800acb2:	4b0e      	ldr	r3, [pc, #56]	@ (800acec <_svfiprintf_r+0x1f0>)
 800acb4:	a904      	add	r1, sp, #16
 800acb6:	4638      	mov	r0, r7
 800acb8:	f7fd f832 	bl	8007d20 <_printf_float>
 800acbc:	1c42      	adds	r2, r0, #1
 800acbe:	4606      	mov	r6, r0
 800acc0:	d1d6      	bne.n	800ac70 <_svfiprintf_r+0x174>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	065b      	lsls	r3, r3, #25
 800acc6:	f53f af2d 	bmi.w	800ab24 <_svfiprintf_r+0x28>
 800acca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800accc:	e72c      	b.n	800ab28 <_svfiprintf_r+0x2c>
 800acce:	ab03      	add	r3, sp, #12
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	462a      	mov	r2, r5
 800acd4:	4b05      	ldr	r3, [pc, #20]	@ (800acec <_svfiprintf_r+0x1f0>)
 800acd6:	a904      	add	r1, sp, #16
 800acd8:	4638      	mov	r0, r7
 800acda:	f7fd fab9 	bl	8008250 <_printf_i>
 800acde:	e7ed      	b.n	800acbc <_svfiprintf_r+0x1c0>
 800ace0:	0800bbe1 	.word	0x0800bbe1
 800ace4:	0800bbeb 	.word	0x0800bbeb
 800ace8:	08007d21 	.word	0x08007d21
 800acec:	0800aa47 	.word	0x0800aa47
 800acf0:	0800bbe7 	.word	0x0800bbe7

0800acf4 <__sfputc_r>:
 800acf4:	6893      	ldr	r3, [r2, #8]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	b410      	push	{r4}
 800acfc:	6093      	str	r3, [r2, #8]
 800acfe:	da08      	bge.n	800ad12 <__sfputc_r+0x1e>
 800ad00:	6994      	ldr	r4, [r2, #24]
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	db01      	blt.n	800ad0a <__sfputc_r+0x16>
 800ad06:	290a      	cmp	r1, #10
 800ad08:	d103      	bne.n	800ad12 <__sfputc_r+0x1e>
 800ad0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad0e:	f7fd bd5c 	b.w	80087ca <__swbuf_r>
 800ad12:	6813      	ldr	r3, [r2, #0]
 800ad14:	1c58      	adds	r0, r3, #1
 800ad16:	6010      	str	r0, [r2, #0]
 800ad18:	7019      	strb	r1, [r3, #0]
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <__sfputs_r>:
 800ad22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad24:	4606      	mov	r6, r0
 800ad26:	460f      	mov	r7, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	18d5      	adds	r5, r2, r3
 800ad2c:	42ac      	cmp	r4, r5
 800ad2e:	d101      	bne.n	800ad34 <__sfputs_r+0x12>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e007      	b.n	800ad44 <__sfputs_r+0x22>
 800ad34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad38:	463a      	mov	r2, r7
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ffda 	bl	800acf4 <__sfputc_r>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d1f3      	bne.n	800ad2c <__sfputs_r+0xa>
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad48 <_vfiprintf_r>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	b09d      	sub	sp, #116	@ 0x74
 800ad50:	4614      	mov	r4, r2
 800ad52:	4698      	mov	r8, r3
 800ad54:	4606      	mov	r6, r0
 800ad56:	b118      	cbz	r0, 800ad60 <_vfiprintf_r+0x18>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x18>
 800ad5c:	f7fd fc24 	bl	80085a8 <__sinit>
 800ad60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d405      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	059a      	lsls	r2, r3, #22
 800ad6a:	d402      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad6e:	f7fd fed0 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	071b      	lsls	r3, r3, #28
 800ad76:	d501      	bpl.n	800ad7c <_vfiprintf_r+0x34>
 800ad78:	692b      	ldr	r3, [r5, #16]
 800ad7a:	b99b      	cbnz	r3, 800ada4 <_vfiprintf_r+0x5c>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7fd fd62 	bl	8008848 <__swsetup_r>
 800ad84:	b170      	cbz	r0, 800ada4 <_vfiprintf_r+0x5c>
 800ad86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad88:	07dc      	lsls	r4, r3, #31
 800ad8a:	d504      	bpl.n	800ad96 <_vfiprintf_r+0x4e>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b01d      	add	sp, #116	@ 0x74
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	0598      	lsls	r0, r3, #22
 800ad9a:	d4f7      	bmi.n	800ad8c <_vfiprintf_r+0x44>
 800ad9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad9e:	f7fd feb9 	bl	8008b14 <__retarget_lock_release_recursive>
 800ada2:	e7f3      	b.n	800ad8c <_vfiprintf_r+0x44>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ada8:	2320      	movs	r3, #32
 800adaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adae:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb2:	2330      	movs	r3, #48	@ 0x30
 800adb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af64 <_vfiprintf_r+0x21c>
 800adb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adbc:	f04f 0901 	mov.w	r9, #1
 800adc0:	4623      	mov	r3, r4
 800adc2:	469a      	mov	sl, r3
 800adc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc8:	b10a      	cbz	r2, 800adce <_vfiprintf_r+0x86>
 800adca:	2a25      	cmp	r2, #37	@ 0x25
 800adcc:	d1f9      	bne.n	800adc2 <_vfiprintf_r+0x7a>
 800adce:	ebba 0b04 	subs.w	fp, sl, r4
 800add2:	d00b      	beq.n	800adec <_vfiprintf_r+0xa4>
 800add4:	465b      	mov	r3, fp
 800add6:	4622      	mov	r2, r4
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ffa1 	bl	800ad22 <__sfputs_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	f000 80a7 	beq.w	800af34 <_vfiprintf_r+0x1ec>
 800ade6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade8:	445a      	add	r2, fp
 800adea:	9209      	str	r2, [sp, #36]	@ 0x24
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 809f 	beq.w	800af34 <_vfiprintf_r+0x1ec>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae00:	f10a 0a01 	add.w	sl, sl, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae0e:	4654      	mov	r4, sl
 800ae10:	2205      	movs	r2, #5
 800ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae16:	4853      	ldr	r0, [pc, #332]	@ (800af64 <_vfiprintf_r+0x21c>)
 800ae18:	f7f5 f9f2 	bl	8000200 <memchr>
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	b9d8      	cbnz	r0, 800ae58 <_vfiprintf_r+0x110>
 800ae20:	06d1      	lsls	r1, r2, #27
 800ae22:	bf44      	itt	mi
 800ae24:	2320      	movmi	r3, #32
 800ae26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae2a:	0713      	lsls	r3, r2, #28
 800ae2c:	bf44      	itt	mi
 800ae2e:	232b      	movmi	r3, #43	@ 0x2b
 800ae30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae34:	f89a 3000 	ldrb.w	r3, [sl]
 800ae38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae3a:	d015      	beq.n	800ae68 <_vfiprintf_r+0x120>
 800ae3c:	9a07      	ldr	r2, [sp, #28]
 800ae3e:	4654      	mov	r4, sl
 800ae40:	2000      	movs	r0, #0
 800ae42:	f04f 0c0a 	mov.w	ip, #10
 800ae46:	4621      	mov	r1, r4
 800ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4c:	3b30      	subs	r3, #48	@ 0x30
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	d94b      	bls.n	800aeea <_vfiprintf_r+0x1a2>
 800ae52:	b1b0      	cbz	r0, 800ae82 <_vfiprintf_r+0x13a>
 800ae54:	9207      	str	r2, [sp, #28]
 800ae56:	e014      	b.n	800ae82 <_vfiprintf_r+0x13a>
 800ae58:	eba0 0308 	sub.w	r3, r0, r8
 800ae5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	46a2      	mov	sl, r4
 800ae66:	e7d2      	b.n	800ae0e <_vfiprintf_r+0xc6>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	1d19      	adds	r1, r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	9103      	str	r1, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbb      	ittet	lt
 800ae74:	425b      	neglt	r3, r3
 800ae76:	f042 0202 	orrlt.w	r2, r2, #2
 800ae7a:	9307      	strge	r3, [sp, #28]
 800ae7c:	9307      	strlt	r3, [sp, #28]
 800ae7e:	bfb8      	it	lt
 800ae80:	9204      	strlt	r2, [sp, #16]
 800ae82:	7823      	ldrb	r3, [r4, #0]
 800ae84:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae86:	d10a      	bne.n	800ae9e <_vfiprintf_r+0x156>
 800ae88:	7863      	ldrb	r3, [r4, #1]
 800ae8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae8c:	d132      	bne.n	800aef4 <_vfiprintf_r+0x1ac>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	1d1a      	adds	r2, r3, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9203      	str	r2, [sp, #12]
 800ae96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae9a:	3402      	adds	r4, #2
 800ae9c:	9305      	str	r3, [sp, #20]
 800ae9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af74 <_vfiprintf_r+0x22c>
 800aea2:	7821      	ldrb	r1, [r4, #0]
 800aea4:	2203      	movs	r2, #3
 800aea6:	4650      	mov	r0, sl
 800aea8:	f7f5 f9aa 	bl	8000200 <memchr>
 800aeac:	b138      	cbz	r0, 800aebe <_vfiprintf_r+0x176>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	eba0 000a 	sub.w	r0, r0, sl
 800aeb4:	2240      	movs	r2, #64	@ 0x40
 800aeb6:	4082      	lsls	r2, r0
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	3401      	adds	r4, #1
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec2:	4829      	ldr	r0, [pc, #164]	@ (800af68 <_vfiprintf_r+0x220>)
 800aec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aec8:	2206      	movs	r2, #6
 800aeca:	f7f5 f999 	bl	8000200 <memchr>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d03f      	beq.n	800af52 <_vfiprintf_r+0x20a>
 800aed2:	4b26      	ldr	r3, [pc, #152]	@ (800af6c <_vfiprintf_r+0x224>)
 800aed4:	bb1b      	cbnz	r3, 800af1e <_vfiprintf_r+0x1d6>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	3307      	adds	r3, #7
 800aeda:	f023 0307 	bic.w	r3, r3, #7
 800aede:	3308      	adds	r3, #8
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee4:	443b      	add	r3, r7
 800aee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee8:	e76a      	b.n	800adc0 <_vfiprintf_r+0x78>
 800aeea:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeee:	460c      	mov	r4, r1
 800aef0:	2001      	movs	r0, #1
 800aef2:	e7a8      	b.n	800ae46 <_vfiprintf_r+0xfe>
 800aef4:	2300      	movs	r3, #0
 800aef6:	3401      	adds	r4, #1
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	4619      	mov	r1, r3
 800aefc:	f04f 0c0a 	mov.w	ip, #10
 800af00:	4620      	mov	r0, r4
 800af02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af06:	3a30      	subs	r2, #48	@ 0x30
 800af08:	2a09      	cmp	r2, #9
 800af0a:	d903      	bls.n	800af14 <_vfiprintf_r+0x1cc>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0c6      	beq.n	800ae9e <_vfiprintf_r+0x156>
 800af10:	9105      	str	r1, [sp, #20]
 800af12:	e7c4      	b.n	800ae9e <_vfiprintf_r+0x156>
 800af14:	fb0c 2101 	mla	r1, ip, r1, r2
 800af18:	4604      	mov	r4, r0
 800af1a:	2301      	movs	r3, #1
 800af1c:	e7f0      	b.n	800af00 <_vfiprintf_r+0x1b8>
 800af1e:	ab03      	add	r3, sp, #12
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	462a      	mov	r2, r5
 800af24:	4b12      	ldr	r3, [pc, #72]	@ (800af70 <_vfiprintf_r+0x228>)
 800af26:	a904      	add	r1, sp, #16
 800af28:	4630      	mov	r0, r6
 800af2a:	f7fc fef9 	bl	8007d20 <_printf_float>
 800af2e:	4607      	mov	r7, r0
 800af30:	1c78      	adds	r0, r7, #1
 800af32:	d1d6      	bne.n	800aee2 <_vfiprintf_r+0x19a>
 800af34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af36:	07d9      	lsls	r1, r3, #31
 800af38:	d405      	bmi.n	800af46 <_vfiprintf_r+0x1fe>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d402      	bmi.n	800af46 <_vfiprintf_r+0x1fe>
 800af40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af42:	f7fd fde7 	bl	8008b14 <__retarget_lock_release_recursive>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	065b      	lsls	r3, r3, #25
 800af4a:	f53f af1f 	bmi.w	800ad8c <_vfiprintf_r+0x44>
 800af4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af50:	e71e      	b.n	800ad90 <_vfiprintf_r+0x48>
 800af52:	ab03      	add	r3, sp, #12
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	462a      	mov	r2, r5
 800af58:	4b05      	ldr	r3, [pc, #20]	@ (800af70 <_vfiprintf_r+0x228>)
 800af5a:	a904      	add	r1, sp, #16
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7fd f977 	bl	8008250 <_printf_i>
 800af62:	e7e4      	b.n	800af2e <_vfiprintf_r+0x1e6>
 800af64:	0800bbe1 	.word	0x0800bbe1
 800af68:	0800bbeb 	.word	0x0800bbeb
 800af6c:	08007d21 	.word	0x08007d21
 800af70:	0800ad23 	.word	0x0800ad23
 800af74:	0800bbe7 	.word	0x0800bbe7

0800af78 <__sflush_r>:
 800af78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af80:	0716      	lsls	r6, r2, #28
 800af82:	4605      	mov	r5, r0
 800af84:	460c      	mov	r4, r1
 800af86:	d454      	bmi.n	800b032 <__sflush_r+0xba>
 800af88:	684b      	ldr	r3, [r1, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dc02      	bgt.n	800af94 <__sflush_r+0x1c>
 800af8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	dd48      	ble.n	800b026 <__sflush_r+0xae>
 800af94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af96:	2e00      	cmp	r6, #0
 800af98:	d045      	beq.n	800b026 <__sflush_r+0xae>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afa0:	682f      	ldr	r7, [r5, #0]
 800afa2:	6a21      	ldr	r1, [r4, #32]
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	d030      	beq.n	800b00a <__sflush_r+0x92>
 800afa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	0759      	lsls	r1, r3, #29
 800afae:	d505      	bpl.n	800afbc <__sflush_r+0x44>
 800afb0:	6863      	ldr	r3, [r4, #4]
 800afb2:	1ad2      	subs	r2, r2, r3
 800afb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afb6:	b10b      	cbz	r3, 800afbc <__sflush_r+0x44>
 800afb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afba:	1ad2      	subs	r2, r2, r3
 800afbc:	2300      	movs	r3, #0
 800afbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afc0:	6a21      	ldr	r1, [r4, #32]
 800afc2:	4628      	mov	r0, r5
 800afc4:	47b0      	blx	r6
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	d106      	bne.n	800afda <__sflush_r+0x62>
 800afcc:	6829      	ldr	r1, [r5, #0]
 800afce:	291d      	cmp	r1, #29
 800afd0:	d82b      	bhi.n	800b02a <__sflush_r+0xb2>
 800afd2:	4a2a      	ldr	r2, [pc, #168]	@ (800b07c <__sflush_r+0x104>)
 800afd4:	410a      	asrs	r2, r1
 800afd6:	07d6      	lsls	r6, r2, #31
 800afd8:	d427      	bmi.n	800b02a <__sflush_r+0xb2>
 800afda:	2200      	movs	r2, #0
 800afdc:	6062      	str	r2, [r4, #4]
 800afde:	04d9      	lsls	r1, r3, #19
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	6022      	str	r2, [r4, #0]
 800afe4:	d504      	bpl.n	800aff0 <__sflush_r+0x78>
 800afe6:	1c42      	adds	r2, r0, #1
 800afe8:	d101      	bne.n	800afee <__sflush_r+0x76>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	b903      	cbnz	r3, 800aff0 <__sflush_r+0x78>
 800afee:	6560      	str	r0, [r4, #84]	@ 0x54
 800aff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aff2:	602f      	str	r7, [r5, #0]
 800aff4:	b1b9      	cbz	r1, 800b026 <__sflush_r+0xae>
 800aff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800affa:	4299      	cmp	r1, r3
 800affc:	d002      	beq.n	800b004 <__sflush_r+0x8c>
 800affe:	4628      	mov	r0, r5
 800b000:	f7fe fc16 	bl	8009830 <_free_r>
 800b004:	2300      	movs	r3, #0
 800b006:	6363      	str	r3, [r4, #52]	@ 0x34
 800b008:	e00d      	b.n	800b026 <__sflush_r+0xae>
 800b00a:	2301      	movs	r3, #1
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b0      	blx	r6
 800b010:	4602      	mov	r2, r0
 800b012:	1c50      	adds	r0, r2, #1
 800b014:	d1c9      	bne.n	800afaa <__sflush_r+0x32>
 800b016:	682b      	ldr	r3, [r5, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0c6      	beq.n	800afaa <__sflush_r+0x32>
 800b01c:	2b1d      	cmp	r3, #29
 800b01e:	d001      	beq.n	800b024 <__sflush_r+0xac>
 800b020:	2b16      	cmp	r3, #22
 800b022:	d11e      	bne.n	800b062 <__sflush_r+0xea>
 800b024:	602f      	str	r7, [r5, #0]
 800b026:	2000      	movs	r0, #0
 800b028:	e022      	b.n	800b070 <__sflush_r+0xf8>
 800b02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02e:	b21b      	sxth	r3, r3
 800b030:	e01b      	b.n	800b06a <__sflush_r+0xf2>
 800b032:	690f      	ldr	r7, [r1, #16]
 800b034:	2f00      	cmp	r7, #0
 800b036:	d0f6      	beq.n	800b026 <__sflush_r+0xae>
 800b038:	0793      	lsls	r3, r2, #30
 800b03a:	680e      	ldr	r6, [r1, #0]
 800b03c:	bf08      	it	eq
 800b03e:	694b      	ldreq	r3, [r1, #20]
 800b040:	600f      	str	r7, [r1, #0]
 800b042:	bf18      	it	ne
 800b044:	2300      	movne	r3, #0
 800b046:	eba6 0807 	sub.w	r8, r6, r7
 800b04a:	608b      	str	r3, [r1, #8]
 800b04c:	f1b8 0f00 	cmp.w	r8, #0
 800b050:	dde9      	ble.n	800b026 <__sflush_r+0xae>
 800b052:	6a21      	ldr	r1, [r4, #32]
 800b054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b056:	4643      	mov	r3, r8
 800b058:	463a      	mov	r2, r7
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b0      	blx	r6
 800b05e:	2800      	cmp	r0, #0
 800b060:	dc08      	bgt.n	800b074 <__sflush_r+0xfc>
 800b062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	f04f 30ff 	mov.w	r0, #4294967295
 800b070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b074:	4407      	add	r7, r0
 800b076:	eba8 0800 	sub.w	r8, r8, r0
 800b07a:	e7e7      	b.n	800b04c <__sflush_r+0xd4>
 800b07c:	dfbffffe 	.word	0xdfbffffe

0800b080 <_fflush_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	690b      	ldr	r3, [r1, #16]
 800b084:	4605      	mov	r5, r0
 800b086:	460c      	mov	r4, r1
 800b088:	b913      	cbnz	r3, 800b090 <_fflush_r+0x10>
 800b08a:	2500      	movs	r5, #0
 800b08c:	4628      	mov	r0, r5
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	b118      	cbz	r0, 800b09a <_fflush_r+0x1a>
 800b092:	6a03      	ldr	r3, [r0, #32]
 800b094:	b90b      	cbnz	r3, 800b09a <_fflush_r+0x1a>
 800b096:	f7fd fa87 	bl	80085a8 <__sinit>
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0f3      	beq.n	800b08a <_fflush_r+0xa>
 800b0a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0a4:	07d0      	lsls	r0, r2, #31
 800b0a6:	d404      	bmi.n	800b0b2 <_fflush_r+0x32>
 800b0a8:	0599      	lsls	r1, r3, #22
 800b0aa:	d402      	bmi.n	800b0b2 <_fflush_r+0x32>
 800b0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ae:	f7fd fd30 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	f7ff ff5f 	bl	800af78 <__sflush_r>
 800b0ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0bc:	07da      	lsls	r2, r3, #31
 800b0be:	4605      	mov	r5, r0
 800b0c0:	d4e4      	bmi.n	800b08c <_fflush_r+0xc>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	059b      	lsls	r3, r3, #22
 800b0c6:	d4e1      	bmi.n	800b08c <_fflush_r+0xc>
 800b0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ca:	f7fd fd23 	bl	8008b14 <__retarget_lock_release_recursive>
 800b0ce:	e7dd      	b.n	800b08c <_fflush_r+0xc>

0800b0d0 <fiprintf>:
 800b0d0:	b40e      	push	{r1, r2, r3}
 800b0d2:	b503      	push	{r0, r1, lr}
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	4805      	ldr	r0, [pc, #20]	@ (800b0f0 <fiprintf+0x20>)
 800b0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0de:	6800      	ldr	r0, [r0, #0]
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	f7ff fe31 	bl	800ad48 <_vfiprintf_r>
 800b0e6:	b002      	add	sp, #8
 800b0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ec:	b003      	add	sp, #12
 800b0ee:	4770      	bx	lr
 800b0f0:	20000188 	.word	0x20000188

0800b0f4 <__swhatbuf_r>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	b096      	sub	sp, #88	@ 0x58
 800b100:	4615      	mov	r5, r2
 800b102:	461e      	mov	r6, r3
 800b104:	da0d      	bge.n	800b122 <__swhatbuf_r+0x2e>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b10c:	f04f 0100 	mov.w	r1, #0
 800b110:	bf14      	ite	ne
 800b112:	2340      	movne	r3, #64	@ 0x40
 800b114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b118:	2000      	movs	r0, #0
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	b016      	add	sp, #88	@ 0x58
 800b120:	bd70      	pop	{r4, r5, r6, pc}
 800b122:	466a      	mov	r2, sp
 800b124:	f000 f896 	bl	800b254 <_fstat_r>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dbec      	blt.n	800b106 <__swhatbuf_r+0x12>
 800b12c:	9901      	ldr	r1, [sp, #4]
 800b12e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b136:	4259      	negs	r1, r3
 800b138:	4159      	adcs	r1, r3
 800b13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b13e:	e7eb      	b.n	800b118 <__swhatbuf_r+0x24>

0800b140 <__smakebuf_r>:
 800b140:	898b      	ldrh	r3, [r1, #12]
 800b142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b144:	079d      	lsls	r5, r3, #30
 800b146:	4606      	mov	r6, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	d507      	bpl.n	800b15c <__smakebuf_r+0x1c>
 800b14c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	2301      	movs	r3, #1
 800b156:	6163      	str	r3, [r4, #20]
 800b158:	b003      	add	sp, #12
 800b15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15c:	ab01      	add	r3, sp, #4
 800b15e:	466a      	mov	r2, sp
 800b160:	f7ff ffc8 	bl	800b0f4 <__swhatbuf_r>
 800b164:	9f00      	ldr	r7, [sp, #0]
 800b166:	4605      	mov	r5, r0
 800b168:	4639      	mov	r1, r7
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7fe ff0e 	bl	8009f8c <_malloc_r>
 800b170:	b948      	cbnz	r0, 800b186 <__smakebuf_r+0x46>
 800b172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d4ee      	bmi.n	800b158 <__smakebuf_r+0x18>
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	f043 0302 	orr.w	r3, r3, #2
 800b182:	81a3      	strh	r3, [r4, #12]
 800b184:	e7e2      	b.n	800b14c <__smakebuf_r+0xc>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	6020      	str	r0, [r4, #0]
 800b18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b196:	b15b      	cbz	r3, 800b1b0 <__smakebuf_r+0x70>
 800b198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f86b 	bl	800b278 <_isatty_r>
 800b1a2:	b128      	cbz	r0, 800b1b0 <__smakebuf_r+0x70>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	f043 0301 	orr.w	r3, r3, #1
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	431d      	orrs	r5, r3
 800b1b4:	81a5      	strh	r5, [r4, #12]
 800b1b6:	e7cf      	b.n	800b158 <__smakebuf_r+0x18>

0800b1b8 <_putc_r>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4614      	mov	r4, r2
 800b1be:	4606      	mov	r6, r0
 800b1c0:	b118      	cbz	r0, 800b1ca <_putc_r+0x12>
 800b1c2:	6a03      	ldr	r3, [r0, #32]
 800b1c4:	b90b      	cbnz	r3, 800b1ca <_putc_r+0x12>
 800b1c6:	f7fd f9ef 	bl	80085a8 <__sinit>
 800b1ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1cc:	07d8      	lsls	r0, r3, #31
 800b1ce:	d405      	bmi.n	800b1dc <_putc_r+0x24>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	0599      	lsls	r1, r3, #22
 800b1d4:	d402      	bmi.n	800b1dc <_putc_r+0x24>
 800b1d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1d8:	f7fd fc9b 	bl	8008b12 <__retarget_lock_acquire_recursive>
 800b1dc:	68a3      	ldr	r3, [r4, #8]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	60a3      	str	r3, [r4, #8]
 800b1e4:	da05      	bge.n	800b1f2 <_putc_r+0x3a>
 800b1e6:	69a2      	ldr	r2, [r4, #24]
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	db12      	blt.n	800b212 <_putc_r+0x5a>
 800b1ec:	b2eb      	uxtb	r3, r5
 800b1ee:	2b0a      	cmp	r3, #10
 800b1f0:	d00f      	beq.n	800b212 <_putc_r+0x5a>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	6022      	str	r2, [r4, #0]
 800b1f8:	701d      	strb	r5, [r3, #0]
 800b1fa:	b2ed      	uxtb	r5, r5
 800b1fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1fe:	07da      	lsls	r2, r3, #31
 800b200:	d405      	bmi.n	800b20e <_putc_r+0x56>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	059b      	lsls	r3, r3, #22
 800b206:	d402      	bmi.n	800b20e <_putc_r+0x56>
 800b208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b20a:	f7fd fc83 	bl	8008b14 <__retarget_lock_release_recursive>
 800b20e:	4628      	mov	r0, r5
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	4629      	mov	r1, r5
 800b214:	4622      	mov	r2, r4
 800b216:	4630      	mov	r0, r6
 800b218:	f7fd fad7 	bl	80087ca <__swbuf_r>
 800b21c:	4605      	mov	r5, r0
 800b21e:	e7ed      	b.n	800b1fc <_putc_r+0x44>

0800b220 <memmove>:
 800b220:	4288      	cmp	r0, r1
 800b222:	b510      	push	{r4, lr}
 800b224:	eb01 0402 	add.w	r4, r1, r2
 800b228:	d902      	bls.n	800b230 <memmove+0x10>
 800b22a:	4284      	cmp	r4, r0
 800b22c:	4623      	mov	r3, r4
 800b22e:	d807      	bhi.n	800b240 <memmove+0x20>
 800b230:	1e43      	subs	r3, r0, #1
 800b232:	42a1      	cmp	r1, r4
 800b234:	d008      	beq.n	800b248 <memmove+0x28>
 800b236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b23e:	e7f8      	b.n	800b232 <memmove+0x12>
 800b240:	4402      	add	r2, r0
 800b242:	4601      	mov	r1, r0
 800b244:	428a      	cmp	r2, r1
 800b246:	d100      	bne.n	800b24a <memmove+0x2a>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b252:	e7f7      	b.n	800b244 <memmove+0x24>

0800b254 <_fstat_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	@ (800b274 <_fstat_r+0x20>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f7f7 fce9 	bl	8002c38 <_fstat>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d102      	bne.n	800b270 <_fstat_r+0x1c>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b103      	cbz	r3, 800b270 <_fstat_r+0x1c>
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop
 800b274:	20000d50 	.word	0x20000d50

0800b278 <_isatty_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d06      	ldr	r5, [pc, #24]	@ (800b294 <_isatty_r+0x1c>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f7f7 fce8 	bl	8002c58 <_isatty>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_isatty_r+0x1a>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_isatty_r+0x1a>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	20000d50 	.word	0x20000d50

0800b298 <_sbrk_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d06      	ldr	r5, [pc, #24]	@ (800b2b4 <_sbrk_r+0x1c>)
 800b29c:	2300      	movs	r3, #0
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	f7f7 fcf0 	bl	8002c88 <_sbrk>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_sbrk_r+0x1a>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_sbrk_r+0x1a>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	20000d50 	.word	0x20000d50

0800b2b8 <abort>:
 800b2b8:	b508      	push	{r3, lr}
 800b2ba:	2006      	movs	r0, #6
 800b2bc:	f000 f86e 	bl	800b39c <raise>
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f7f7 fc69 	bl	8002b98 <_exit>

0800b2c6 <_calloc_r>:
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	fba1 5402 	umull	r5, r4, r1, r2
 800b2cc:	b93c      	cbnz	r4, 800b2de <_calloc_r+0x18>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7fe fe5c 	bl	8009f8c <_malloc_r>
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	b928      	cbnz	r0, 800b2e4 <_calloc_r+0x1e>
 800b2d8:	2600      	movs	r6, #0
 800b2da:	4630      	mov	r0, r6
 800b2dc:	bd70      	pop	{r4, r5, r6, pc}
 800b2de:	220c      	movs	r2, #12
 800b2e0:	6002      	str	r2, [r0, #0]
 800b2e2:	e7f9      	b.n	800b2d8 <_calloc_r+0x12>
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f7fd fb04 	bl	80088f4 <memset>
 800b2ec:	e7f5      	b.n	800b2da <_calloc_r+0x14>

0800b2ee <_realloc_r>:
 800b2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	4615      	mov	r5, r2
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	b921      	cbnz	r1, 800b304 <_realloc_r+0x16>
 800b2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	4611      	mov	r1, r2
 800b300:	f7fe be44 	b.w	8009f8c <_malloc_r>
 800b304:	b92a      	cbnz	r2, 800b312 <_realloc_r+0x24>
 800b306:	f7fe fa93 	bl	8009830 <_free_r>
 800b30a:	2400      	movs	r4, #0
 800b30c:	4620      	mov	r0, r4
 800b30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b312:	f000 f85f 	bl	800b3d4 <_malloc_usable_size_r>
 800b316:	4285      	cmp	r5, r0
 800b318:	4606      	mov	r6, r0
 800b31a:	d802      	bhi.n	800b322 <_realloc_r+0x34>
 800b31c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b320:	d8f4      	bhi.n	800b30c <_realloc_r+0x1e>
 800b322:	4629      	mov	r1, r5
 800b324:	4640      	mov	r0, r8
 800b326:	f7fe fe31 	bl	8009f8c <_malloc_r>
 800b32a:	4607      	mov	r7, r0
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d0ec      	beq.n	800b30a <_realloc_r+0x1c>
 800b330:	42b5      	cmp	r5, r6
 800b332:	462a      	mov	r2, r5
 800b334:	4621      	mov	r1, r4
 800b336:	bf28      	it	cs
 800b338:	4632      	movcs	r2, r6
 800b33a:	f7fd fbf4 	bl	8008b26 <memcpy>
 800b33e:	4621      	mov	r1, r4
 800b340:	4640      	mov	r0, r8
 800b342:	f7fe fa75 	bl	8009830 <_free_r>
 800b346:	463c      	mov	r4, r7
 800b348:	e7e0      	b.n	800b30c <_realloc_r+0x1e>

0800b34a <_raise_r>:
 800b34a:	291f      	cmp	r1, #31
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4605      	mov	r5, r0
 800b350:	460c      	mov	r4, r1
 800b352:	d904      	bls.n	800b35e <_raise_r+0x14>
 800b354:	2316      	movs	r3, #22
 800b356:	6003      	str	r3, [r0, #0]
 800b358:	f04f 30ff 	mov.w	r0, #4294967295
 800b35c:	bd38      	pop	{r3, r4, r5, pc}
 800b35e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b360:	b112      	cbz	r2, 800b368 <_raise_r+0x1e>
 800b362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b366:	b94b      	cbnz	r3, 800b37c <_raise_r+0x32>
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 f831 	bl	800b3d0 <_getpid_r>
 800b36e:	4622      	mov	r2, r4
 800b370:	4601      	mov	r1, r0
 800b372:	4628      	mov	r0, r5
 800b374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b378:	f000 b818 	b.w	800b3ac <_kill_r>
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d00a      	beq.n	800b396 <_raise_r+0x4c>
 800b380:	1c59      	adds	r1, r3, #1
 800b382:	d103      	bne.n	800b38c <_raise_r+0x42>
 800b384:	2316      	movs	r3, #22
 800b386:	6003      	str	r3, [r0, #0]
 800b388:	2001      	movs	r0, #1
 800b38a:	e7e7      	b.n	800b35c <_raise_r+0x12>
 800b38c:	2100      	movs	r1, #0
 800b38e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b392:	4620      	mov	r0, r4
 800b394:	4798      	blx	r3
 800b396:	2000      	movs	r0, #0
 800b398:	e7e0      	b.n	800b35c <_raise_r+0x12>
	...

0800b39c <raise>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	@ (800b3a8 <raise+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f7ff bfd2 	b.w	800b34a <_raise_r>
 800b3a6:	bf00      	nop
 800b3a8:	20000188 	.word	0x20000188

0800b3ac <_kill_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	@ (800b3cc <_kill_r+0x20>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	f7f7 fbdd 	bl	8002b78 <_kill>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	d102      	bne.n	800b3c8 <_kill_r+0x1c>
 800b3c2:	682b      	ldr	r3, [r5, #0]
 800b3c4:	b103      	cbz	r3, 800b3c8 <_kill_r+0x1c>
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000d50 	.word	0x20000d50

0800b3d0 <_getpid_r>:
 800b3d0:	f7f7 bbca 	b.w	8002b68 <_getpid>

0800b3d4 <_malloc_usable_size_r>:
 800b3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d8:	1f18      	subs	r0, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bfbc      	itt	lt
 800b3de:	580b      	ldrlt	r3, [r1, r0]
 800b3e0:	18c0      	addlt	r0, r0, r3
 800b3e2:	4770      	bx	lr

0800b3e4 <_init>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	bf00      	nop
 800b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ea:	bc08      	pop	{r3}
 800b3ec:	469e      	mov	lr, r3
 800b3ee:	4770      	bx	lr

0800b3f0 <_fini>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	bf00      	nop
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr
