
LedMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb1  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af4  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000778  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 31       	cpi	r26, 0x16	; 22
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a0 d1       	rcall	.+832    	; 0x3ea <main>
  aa:	a2 c1       	rjmp	.+836    	; 0x3f0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <L1>:
uint8_t ledState;
button_t btnNext, btnPrev;

void L1()
{
	if (timeTick-prevtime >= 200)
  ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
  b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
  b6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
  ba:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
  be:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  ca:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  ce:	84 1b       	sub	r24, r20
  d0:	95 0b       	sbc	r25, r21
  d2:	a6 0b       	sbc	r26, r22
  d4:	b7 0b       	sbc	r27, r23
  d6:	88 3c       	cpi	r24, 0xC8	; 200
  d8:	91 05       	cpc	r25, r1
  da:	a1 05       	cpc	r26, r1
  dc:	b1 05       	cpc	r27, r1
  de:	b8 f0       	brcs	.+46     	; 0x10e <L1+0x60>
	{
		ledData ^= 0x01;
  e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ledData>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	89 27       	eor	r24, r25
  e8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledData>
		//LED_PORT = ledData;
		Led_writeData(ledData);
  ec:	7c d1       	rcall	.+760    	; 0x3e6 <Led_writeData>
		prevtime = timeTick;
  ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
  f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
  f6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
  fa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 106:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 10a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 10e:	08 95       	ret

00000110 <L2>:
	}
}

void L2()
{
	if (timeTick-prevtime >= 200)
 110:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 114:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 118:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 11c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 120:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 128:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 130:	84 1b       	sub	r24, r20
 132:	95 0b       	sbc	r25, r21
 134:	a6 0b       	sbc	r26, r22
 136:	b7 0b       	sbc	r27, r23
 138:	88 3c       	cpi	r24, 0xC8	; 200
 13a:	91 05       	cpc	r25, r1
 13c:	a1 05       	cpc	r26, r1
 13e:	b1 05       	cpc	r27, r1
 140:	b8 f0       	brcs	.+46     	; 0x170 <L2+0x60>
	{
		ledData ^= 0x02;
 142:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ledData>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	89 27       	eor	r24, r25
 14a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledData>
		//LED_PORT = ledData;
		Led_writeData(ledData);
 14e:	4b d1       	rcall	.+662    	; 0x3e6 <Led_writeData>
		prevtime = timeTick;
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 158:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 15c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 170:	08 95       	ret

00000172 <L3>:
	}
}

void L3()
{
	if (timeTick-prevtime >= 200)
 172:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 176:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 17a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 17e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 182:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 192:	84 1b       	sub	r24, r20
 194:	95 0b       	sbc	r25, r21
 196:	a6 0b       	sbc	r26, r22
 198:	b7 0b       	sbc	r27, r23
 19a:	88 3c       	cpi	r24, 0xC8	; 200
 19c:	91 05       	cpc	r25, r1
 19e:	a1 05       	cpc	r26, r1
 1a0:	b1 05       	cpc	r27, r1
 1a2:	b8 f0       	brcs	.+46     	; 0x1d2 <L3+0x60>
	{
		ledData ^= 0x04;
 1a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ledData>
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	89 27       	eor	r24, r25
 1ac:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledData>
		//LED_PORT = ledData;
		Led_writeData(ledData);
 1b0:	1a d1       	rcall	.+564    	; 0x3e6 <Led_writeData>
		prevtime = timeTick;
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 1b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 1ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 1be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1d2:	08 95       	ret

000001d4 <L4>:

}

void L4()
{
	if (timeTick-prevtime >= 200)
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 1d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 1dc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 1e0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 1e4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f4:	84 1b       	sub	r24, r20
 1f6:	95 0b       	sbc	r25, r21
 1f8:	a6 0b       	sbc	r26, r22
 1fa:	b7 0b       	sbc	r27, r23
 1fc:	88 3c       	cpi	r24, 0xC8	; 200
 1fe:	91 05       	cpc	r25, r1
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	b8 f0       	brcs	.+46     	; 0x234 <L4+0x60>
	{
		ledData ^= 0x08;
 206:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ledData>
 20a:	88 e0       	ldi	r24, 0x08	; 8
 20c:	89 27       	eor	r24, r25
 20e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledData>
		//LED_PORT = ledData;
		Led_writeData(ledData);
 212:	e9 d0       	rcall	.+466    	; 0x3e6 <Led_writeData>
		prevtime = timeTick;
 214:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 218:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 21c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 220:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 230:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 234:	08 95       	ret

00000236 <LedMachine_init>:
}

void LedMachine_init()
{
	
	Led_init();
 236:	d4 d0       	rcall	.+424    	; 0x3e0 <Led_init>
	Button_init(&btnNext, &DDRA, &PINA, 0);
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	49 e3       	ldi	r20, 0x39	; 57
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	6a e3       	ldi	r22, 0x3A	; 58
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	8b d0       	rcall	.+278    	; 0x35e <Button_init>
	Button_init(&btnPrev, &DDRA, &PINA, 1);
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	49 e3       	ldi	r20, 0x39	; 57
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	6a e3       	ldi	r22, 0x3A	; 58
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	83 d0       	rcall	.+262    	; 0x35e <Button_init>
	
	ledData = 0x01;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ledData>
	ledState = led1;
 25e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledState>
 262:	08 95       	ret

00000264 <LedMachine_execute>:

}

void LedMachine_execute()
{switch(ledState)
 264:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ledState>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	f9 f0       	breq	.+62     	; 0x2aa <LedMachine_execute+0x46>
 26c:	30 f0       	brcs	.+12     	; 0x27a <LedMachine_execute+0x16>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	89 f1       	breq	.+98     	; 0x2d4 <LedMachine_execute+0x70>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <LedMachine_execute+0x14>
 276:	45 c0       	rjmp	.+138    	; 0x302 <LedMachine_execute+0x9e>
 278:	58 c0       	rjmp	.+176    	; 0x32a <LedMachine_execute+0xc6>
	{
		case led1:
		L1();
 27a:	19 df       	rcall	.-462    	; 0xae <L1>
		if (Button_GetState(&btnNext) == ACT_RELEASED)
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	83 d0       	rcall	.+262    	; 0x388 <Button_GetState>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	31 f4       	brne	.+12     	; 0x292 <LedMachine_execute+0x2e>
		{
			ledState = led2;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
			ledData=0x00;
 28c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
 290:	4c c0       	rjmp	.+152    	; 0x32a <LedMachine_execute+0xc6>
		}
		else if (Button_GetState(&btnPrev) == ACT_RELEASED)
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	78 d0       	rcall	.+240    	; 0x388 <Button_GetState>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	09 f0       	breq	.+2      	; 0x29e <LedMachine_execute+0x3a>
 29c:	46 c0       	rjmp	.+140    	; 0x32a <LedMachine_execute+0xc6>
		{
			ledState = led4;
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
			ledData=0x00;
 2a4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		break;
		case led2:
		L2();
 2a8:	40 c0       	rjmp	.+128    	; 0x32a <LedMachine_execute+0xc6>
		if (Button_GetState(&btnNext) == ACT_RELEASED)
 2aa:	32 df       	rcall	.-412    	; 0x110 <L2>
 2ac:	80 e1       	ldi	r24, 0x10	; 16
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	6b d0       	rcall	.+214    	; 0x388 <Button_GetState>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <LedMachine_execute+0x5c>
		{
			ledState = led3;
 2b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
			ledData=0x00;
 2ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		else if (Button_GetState(&btnPrev) == ACT_RELEASED)
 2be:	35 c0       	rjmp	.+106    	; 0x32a <LedMachine_execute+0xc6>
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	61 d0       	rcall	.+194    	; 0x388 <Button_GetState>
 2c6:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = led1;
 2c8:	81 f5       	brne	.+96     	; 0x32a <LedMachine_execute+0xc6>
 2ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledState>
			ledData=0x00;
 2ce:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		break;
		case led3:
		L3();
 2d2:	2b c0       	rjmp	.+86     	; 0x32a <LedMachine_execute+0xc6>
		if (Button_GetState(&btnNext) == ACT_RELEASED)
 2d4:	4e df       	rcall	.-356    	; 0x172 <L3>
 2d6:	80 e1       	ldi	r24, 0x10	; 16
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	56 d0       	rcall	.+172    	; 0x388 <Button_GetState>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	31 f4       	brne	.+12     	; 0x2ec <LedMachine_execute+0x88>
		{
			ledState = led4;
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
			ledData=0x00;
 2e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		else if (Button_GetState(&btnPrev) == ACT_RELEASED)
 2ea:	1f c0       	rjmp	.+62     	; 0x32a <LedMachine_execute+0xc6>
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	4b d0       	rcall	.+150    	; 0x388 <Button_GetState>
 2f2:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = led2;
 2f4:	d1 f4       	brne	.+52     	; 0x32a <LedMachine_execute+0xc6>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
			ledData=0x00;
 2f8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
 2fc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		break;
		case led4:
		L4();
 300:	14 c0       	rjmp	.+40     	; 0x32a <LedMachine_execute+0xc6>
		if (Button_GetState(&btnNext) == ACT_RELEASED)
 302:	68 df       	rcall	.-304    	; 0x1d4 <L4>
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	3f d0       	rcall	.+126    	; 0x388 <Button_GetState>
 30a:	82 30       	cpi	r24, 0x02	; 2
		{
			ledState = led1;
 30c:	29 f4       	brne	.+10     	; 0x318 <LedMachine_execute+0xb4>
 30e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledState>
			ledData=0x00;
 312:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
		}
		else if (Button_GetState(&btnPrev) == ACT_RELEASED)
 316:	09 c0       	rjmp	.+18     	; 0x32a <LedMachine_execute+0xc6>
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	35 d0       	rcall	.+106    	; 0x388 <Button_GetState>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	21 f4       	brne	.+8      	; 0x32a <LedMachine_execute+0xc6>
		{
			ledState = led3;
 322:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledState>
			ledData=0x00;
 326:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ledData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	8f e9       	ldi	r24, 0x9F	; 159
 32c:	9f e0       	ldi	r25, 0x0F	; 15
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LedMachine_execute+0xca>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LedMachine_execute+0xd0>
 334:	00 00       	nop
		}
		break;
	}
	_delay_ms(1);
	timeTick ++;
 336:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeTick>
 33a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeTick+0x1>
 33e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <timeTick+0x2>
 342:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <timeTick+0x3>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeTick>
 350:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeTick+0x1>
 354:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timeTick+0x2>
 358:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timeTick+0x3>
 35c:	08 95       	ret

0000035e <Button_init>:
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr,volatile uint8_t *pin,uint8_t pinNum) //버튼이 연결된 곳을 정의하는 함수
{
 35e:	fc 01       	movw	r30, r24
	btn -> DDR = ddr;
 360:	71 83       	std	Z+1, r23	; 0x01
 362:	60 83       	st	Z, r22
	btn -> PIN = pin;
 364:	53 83       	std	Z+3, r21	; 0x03
 366:	42 83       	std	Z+2, r20	; 0x02
	btn -> pinNum = pinNum;
 368:	24 83       	std	Z+4, r18	; 0x04
	btn -> prevstate = RELEASED;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	85 83       	std	Z+5, r24	; 0x05
	*btn -> DDR &= ~(1<<btn->pinNum); //DDRx의 pinNum을 입력모드로 바꾸겠다.
 36e:	fb 01       	movw	r30, r22
 370:	30 81       	ld	r19, Z
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <Button_init+0x1e>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	2a 95       	dec	r18
 37e:	e2 f7       	brpl	.-8      	; 0x378 <Button_init+0x1a>
 380:	80 95       	com	r24
 382:	83 23       	and	r24, r19
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //버튼의 동작을 얻어오는 함수
{
 388:	fc 01       	movw	r30, r24
	uint8_t curState = *(btn -> PIN) & (1<<(btn -> pinNum));
 38a:	a2 81       	ldd	r26, Z+2	; 0x02
 38c:	b3 81       	ldd	r27, Z+3	; 0x03
 38e:	8c 91       	ld	r24, X
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	04 80       	ldd	r0, Z+4	; 0x04
 396:	02 c0       	rjmp	.+4      	; 0x39c <Button_GetState+0x14>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <Button_GetState+0x10>
 3a0:	28 23       	and	r18, r24

	if ((curState == PUSHED) && ((btn -> prevstate) == RELEASED))
 3a2:	59 f4       	brne	.+22     	; 0x3ba <Button_GetState+0x32>
 3a4:	85 81       	ldd	r24, Z+5	; 0x05
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	41 f4       	brne	.+16     	; 0x3ba <Button_GetState+0x32>
 3aa:	af e3       	ldi	r26, 0x3F	; 63
 3ac:	bc e9       	ldi	r27, 0x9C	; 156
 3ae:	11 97       	sbiw	r26, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <Button_GetState+0x26>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <Button_GetState+0x2c>
 3b4:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = PUSHED;
 3b6:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 3b8:	08 95       	ret
	}

	else if ((curState != PUSHED) && (btn -> prevstate  == PUSHED))
 3ba:	22 23       	and	r18, r18
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <Button_GetState+0x50>
 3be:	85 81       	ldd	r24, Z+5	; 0x05
 3c0:	81 11       	cpse	r24, r1
 3c2:	0c c0       	rjmp	.+24     	; 0x3dc <Button_GetState+0x54>
 3c4:	8f e3       	ldi	r24, 0x3F	; 63
 3c6:	9c e9       	ldi	r25, 0x9C	; 156
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <Button_GetState+0x40>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <Button_GetState+0x46>
 3ce:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = RELEASED;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	08 95       	ret
	}
	return ACT_NONE;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret

000003e0 <Led_init>:
﻿#include "Led.h"

void Led_init()
{
	LED_DDR = 0xff;
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	81 bb       	out	0x11, r24	; 17
 3e4:	08 95       	ret

000003e6 <Led_writeData>:
}

void Led_writeData(uint8_t data)
{
	LED_PORT = data;
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	08 95       	ret

000003ea <main>:
	//}
//}

int main(void)
{
	LedMachine_init();
 3ea:	25 df       	rcall	.-438    	; 0x236 <LedMachine_init>
	
	while (1)
	{
		LedMachine_execute();
 3ec:	3b df       	rcall	.-394    	; 0x264 <LedMachine_execute>
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <main+0x2>

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
