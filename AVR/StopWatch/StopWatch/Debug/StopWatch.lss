
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010c  0080010c  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d2  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9d  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8d  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000684  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000504  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	bb c2       	rjmp	.+1398   	; 0x59c <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	84 c2       	rjmp	.+1288   	; 0x54a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	93 d2       	rcall	.+1318   	; 0x5ea <main>
  c4:	08 c3       	rjmp	.+1552   	; 0x6d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <StopWatch_init>:

btn_t btnRunStop, btnReset;

void StopWatch_init()
{
	milisec = 0;
  c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <milisec+0x1>
  cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <milisec>
	sec = 0;
  d0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec>
	min = 0;
  d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <min>
	hour = 0;
  d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <hour>
	state = STOP;
  dc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
	FND_init();
  e0:	2f d1       	rcall	.+606    	; 0x340 <FND_init>
	TIM0_OVF_init();
  e2:	ae d2       	rcall	.+1372   	; 0x640 <TIM0_OVF_init>
	TIM2_CTC_init();
  e4:	b6 d2       	rcall	.+1388   	; 0x652 <TIM2_CTC_init>
  e6:	20 e0       	ldi	r18, 0x00	; 0
	BUTTON_init(&btnRunStop,&DDRA,&PINA,0);
  e8:	49 e3       	ldi	r20, 0x39	; 57
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	6a e3       	ldi	r22, 0x3A	; 58
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	8b e1       	ldi	r24, 0x1B	; 27
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	ee d0       	rcall	.+476    	; 0x2d2 <BUTTON_init>
  f6:	21 e0       	ldi	r18, 0x01	; 1
	BUTTON_init(&btnReset,&DDRA,&PINA,1);
  f8:	49 e3       	ldi	r20, 0x39	; 57
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	6a e3       	ldi	r22, 0x3A	; 58
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e1       	ldi	r24, 0x12	; 18
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	e6 c0       	rjmp	.+460    	; 0x2d2 <BUTTON_init>
 106:	08 95       	ret

00000108 <StopWatch_incMilisec>:
 108:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
}

void StopWatch_incMilisec()
{
	if(state == RUN)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <StopWatch_incMilisec+0xa>
 110:	47 c0       	rjmp	.+142    	; 0x1a0 <StopWatch_incMilisec+0x98>
	{
		milisec = (milisec+1) % 1000;
 112:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <milisec>
 116:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <milisec+0x1>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	9a 01       	movw	r18, r20
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	a5 ec       	ldi	r26, 0xC5	; 197
 12e:	b0 e2       	ldi	r27, 0x20	; 32
 130:	af d2       	rcall	.+1374   	; 0x690 <__umulhisi3>
 132:	92 95       	swap	r25
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	89 27       	eor	r24, r25
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	89 27       	eor	r24, r25
 13e:	68 ee       	ldi	r22, 0xE8	; 232
 140:	73 e0       	ldi	r23, 0x03	; 3
 142:	86 9f       	mul	r24, r22
 144:	90 01       	movw	r18, r0
 146:	87 9f       	mul	r24, r23
 148:	30 0d       	add	r19, r0
 14a:	96 9f       	mul	r25, r22
 14c:	30 0d       	add	r19, r0
 14e:	11 24       	eor	r1, r1
 150:	ca 01       	movw	r24, r20
 152:	82 1b       	sub	r24, r18
 154:	93 0b       	sbc	r25, r19
 156:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <milisec+0x1>
 15a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <milisec>
		if(milisec) return;
 15e:	89 2b       	or	r24, r25
 160:	f9 f4       	brne	.+62     	; 0x1a0 <StopWatch_incMilisec+0x98>
		
		sec = (sec+1) % 60;
 162:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	6c e3       	ldi	r22, 0x3C	; 60
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	7d d2       	rcall	.+1274   	; 0x66a <__divmodhi4>
 170:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec>
		if(sec) return;
 174:	81 11       	cpse	r24, r1
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <StopWatch_incMilisec+0x98>
		
		min = (min+1) % 60;
 178:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min>
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	6c e3       	ldi	r22, 0x3C	; 60
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	72 d2       	rcall	.+1252   	; 0x66a <__divmodhi4>
 186:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min>
		if(min) return;
 18a:	81 11       	cpse	r24, r1
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <StopWatch_incMilisec+0x98>
		
		hour = (hour+1) % 24;
 18e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour>
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	68 e1       	ldi	r22, 0x18	; 24
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	67 d2       	rcall	.+1230   	; 0x66a <__divmodhi4>
 19c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour>
 1a0:	08 95       	ret

000001a2 <StopWatch_eventCheck>:
	}
}

void StopWatch_eventCheck()
{
	switch(state)
 1a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a1 f0       	breq	.+40     	; 0x1d2 <StopWatch_eventCheck+0x30>
 1aa:	18 f0       	brcs	.+6      	; 0x1b2 <StopWatch_eventCheck+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	01 f1       	breq	.+64     	; 0x1f0 <StopWatch_eventCheck+0x4e>
 1b0:	08 95       	ret
	{
		case STOP:
		if (BUTTON_GETSTATE(&btnRunStop) == ACT_REALESED)
 1b2:	8b e1       	ldi	r24, 0x1B	; 27
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9a d0       	rcall	.+308    	; 0x2ec <BUTTON_GETSTATE>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <StopWatch_eventCheck+0x20>
		{
			state = RUN;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
		}
		if( BUTTON_GETSTATE(&btnReset) == ACT_REALESED)
 1c2:	82 e1       	ldi	r24, 0x12	; 18
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	92 d0       	rcall	.+292    	; 0x2ec <BUTTON_GETSTATE>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	a1 f4       	brne	.+40     	; 0x1f4 <StopWatch_eventCheck+0x52>
		{
			state = RESET;
 1cc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
 1d0:	08 95       	ret
		}
		break;
		case RUN:
		if (BUTTON_GETSTATE(&btnRunStop) == ACT_REALESED)
 1d2:	8b e1       	ldi	r24, 0x1B	; 27
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	8a d0       	rcall	.+276    	; 0x2ec <BUTTON_GETSTATE>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	11 f4       	brne	.+4      	; 0x1e0 <StopWatch_eventCheck+0x3e>
		{
			state = STOP;
 1dc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
		}
		if( BUTTON_GETSTATE(&btnReset) == ACT_REALESED)
 1e0:	82 e1       	ldi	r24, 0x12	; 18
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	83 d0       	rcall	.+262    	; 0x2ec <BUTTON_GETSTATE>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <StopWatch_eventCheck+0x52>
		{
			state = RESET;
 1ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
 1ee:	08 95       	ret
		}
		break;
		case RESET:
		state = STOP;
 1f0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
 1f4:	08 95       	ret

000001f6 <StopWatch_execute>:
}

void StopWatch_execute()
{
	uint16_t stopWatchData;
	switch(state)
 1f6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	21 f0       	breq	.+8      	; 0x206 <StopWatch_execute+0x10>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	09 f4       	brne	.+2      	; 0x204 <StopWatch_execute+0xe>
 202:	56 c0       	rjmp	.+172    	; 0x2b0 <StopWatch_execute+0xba>
 204:	08 95       	ret
	{
		case STOP:
		break;
		case RUN:
		if (min<10 && hour<1)
 206:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <min>
 20a:	2a 30       	cpi	r18, 0x0A	; 10
 20c:	d0 f5       	brcc	.+116    	; 0x282 <StopWatch_execute+0x8c>
 20e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour>
 212:	81 11       	cpse	r24, r1
 214:	36 c0       	rjmp	.+108    	; 0x282 <StopWatch_execute+0x8c>
		{
			stopWatchData = (min%10 *1000) + (sec * 10) + (milisec/100);	
 216:	8d ec       	ldi	r24, 0xCD	; 205
 218:	28 9f       	mul	r18, r24
 21a:	81 2d       	mov	r24, r1
 21c:	11 24       	eor	r1, r1
 21e:	86 95       	lsr	r24
 220:	86 95       	lsr	r24
 222:	86 95       	lsr	r24
 224:	88 0f       	add	r24, r24
 226:	98 2f       	mov	r25, r24
 228:	99 0f       	add	r25, r25
 22a:	99 0f       	add	r25, r25
 22c:	89 0f       	add	r24, r25
 22e:	28 1b       	sub	r18, r24
 230:	82 2f       	mov	r24, r18
 232:	28 ee       	ldi	r18, 0xE8	; 232
 234:	33 e0       	ldi	r19, 0x03	; 3
 236:	82 9f       	mul	r24, r18
 238:	b0 01       	movw	r22, r0
 23a:	83 9f       	mul	r24, r19
 23c:	70 0d       	add	r23, r0
 23e:	11 24       	eor	r1, r1
 240:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <sec>
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	a9 01       	movw	r20, r18
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	24 0f       	add	r18, r20
 25a:	35 1f       	adc	r19, r21
 25c:	ab 01       	movw	r20, r22
 25e:	42 0f       	add	r20, r18
 260:	53 1f       	adc	r21, r19
 262:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <milisec>
 266:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <milisec+0x1>
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	36 95       	lsr	r19
 270:	27 95       	ror	r18
 272:	ab e7       	ldi	r26, 0x7B	; 123
 274:	b4 e1       	ldi	r27, 0x14	; 20
 276:	0c d2       	rcall	.+1048   	; 0x690 <__umulhisi3>
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	84 0f       	add	r24, r20
 27e:	95 1f       	adc	r25, r21
 280:	15 c0       	rjmp	.+42     	; 0x2ac <StopWatch_execute+0xb6>
		}
		else if (hour<10)
 282:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <hour>
 286:	3a 30       	cpi	r19, 0x0A	; 10
 288:	50 f4       	brcc	.+20     	; 0x29e <StopWatch_execute+0xa8>
		{
			stopWatchData =  min*100 + sec;
 28a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <sec>
 28e:	89 2f       	mov	r24, r25
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	34 e6       	ldi	r19, 0x64	; 100
 294:	23 9f       	mul	r18, r19
 296:	80 0d       	add	r24, r0
 298:	91 1d       	adc	r25, r1
 29a:	11 24       	eor	r1, r1
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <StopWatch_execute+0xb6>
		}
		else
		{
			stopWatchData =  hour*100 + min;
 29e:	82 2f       	mov	r24, r18
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	24 e6       	ldi	r18, 0x64	; 100
 2a4:	32 9f       	mul	r19, r18
 2a6:	80 0d       	add	r24, r0
 2a8:	91 1d       	adc	r25, r1
		}
		FND_setfndData(stopWatchData);
 2aa:	11 24       	eor	r1, r1
 2ac:	43 c1       	rjmp	.+646    	; 0x534 <FND_setfndData>
		break;
 2ae:	08 95       	ret
		case RESET:
		milisec = 0;
 2b0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <milisec+0x1>
 2b4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <milisec>
		sec = 0;
 2b8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec>
		min = 0;
 2bc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <min>
		hour = 0;
 2c0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <hour>
		stopWatchData = 0;
		FND_setfndData(stopWatchData);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	35 c1       	rjmp	.+618    	; 0x534 <FND_setfndData>
 2ca:	08 95       	ret

000002cc <StopWatch_run>:
	}
}

void StopWatch_run()
{
	StopWatch_eventCheck();
 2cc:	6a df       	rcall	.-300    	; 0x1a2 <StopWatch_eventCheck>
	StopWatch_execute();
 2ce:	93 cf       	rjmp	.-218    	; 0x1f6 <StopWatch_execute>
 2d0:	08 95       	ret

000002d2 <BUTTON_init>:
 2d2:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 2d4:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 2d6:	71 83       	std	Z+1, r23	; 0x01
 2d8:	60 83       	st	Z, r22
	btn ->PIN = pin;
 2da:	53 83       	std	Z+3, r21	; 0x03
 2dc:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 2de:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 2e0:	31 e0       	ldi	r19, 0x01	; 1
 2e2:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
 2e4:	42 2f       	mov	r20, r18
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	84 c1       	rjmp	.+776    	; 0x5f2 <Gpio_initPin>
 2ea:	08 95       	ret

000002ec <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
 2f2:	6c 81       	ldd	r22, Y+4	; 0x04
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	9b 81       	ldd	r25, Y+3	; 0x03
 2f8:	99 d1       	rcall	.+818    	; 0x62c <Gpio_ReadPin>
 2fa:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 2fc:	81 11       	cpse	r24, r1
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <BUTTON_GETSTATE+0x2a>
 300:	8d 81       	ldd	r24, Y+5	; 0x05
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	41 f4       	brne	.+16     	; 0x316 <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	ef e3       	ldi	r30, 0x3F	; 63
 308:	fc e9       	ldi	r31, 0x9C	; 156
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <BUTTON_GETSTATE+0x1e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <BUTTON_GETSTATE+0x24>
 310:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 312:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
 314:	12 c0       	rjmp	.+36     	; 0x33a <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 316:	99 23       	and	r25, r25
 318:	69 f0       	breq	.+26     	; 0x334 <BUTTON_GETSTATE+0x48>
 31a:	8d 81       	ldd	r24, Y+5	; 0x05
 31c:	81 11       	cpse	r24, r1
 31e:	0c c0       	rjmp	.+24     	; 0x338 <BUTTON_GETSTATE+0x4c>
 320:	8f e3       	ldi	r24, 0x3F	; 63
 322:	9c e9       	ldi	r25, 0x9C	; 156
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <BUTTON_GETSTATE+0x38>
 328:	00 c0       	rjmp	.+0      	; 0x32a <BUTTON_GETSTATE+0x3e>
 32a:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	03 c0       	rjmp	.+6      	; 0x33a <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	01 c0       	rjmp	.+2      	; 0x33a <BUTTON_GETSTATE+0x4e>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <FND_init>:

uint16_t fndData  = 0;

void FND_init()
{
	DDRE |= (1<<FND_DIGIT_4) |(1<<FND_DIGIT_3) |(1<<FND_DIGIT_2) |(1<<FND_DIGIT_1) ;
 340:	82 b1       	in	r24, 0x02	; 2
 342:	80 6f       	ori	r24, 0xF0	; 240
 344:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 34c:	08 95       	ret

0000034e <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	2c 97       	sbiw	r28, 0x0c	; 12
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	ac 01       	movw	r20, r24
	uint8_t Number[12] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x40,0x00}; //0 -> 0x3f 1->0x06 2-> 0x5b 3->0x4f 4->0x66 5->0x6d 6->0x7d 7-> 0x07 8->0x7f 9->0x6f
 364:	8c e0       	ldi	r24, 0x0C	; 12
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	de 01       	movw	r26, r28
 36c:	11 96       	adiw	r26, 0x01	; 1
 36e:	01 90       	ld	r0, Z+
 370:	0d 92       	st	X+, r0
 372:	8a 95       	dec	r24
 374:	e1 f7       	brne	.-8      	; 0x36e <FND_dispNum+0x20>
	
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) %4;
 376:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	83 70       	andi	r24, 0x03	; 3
 380:	90 78       	andi	r25, 0x80	; 128
 382:	99 23       	and	r25, r25
 384:	24 f4       	brge	.+8      	; 0x38e <FND_dispNum+0x40>
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	8c 6f       	ori	r24, 0xFC	; 252
 38a:	9f 6f       	ori	r25, 0xFF	; 255
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	FND_DIGIT_PORT |= (1<<7) | (1<<6) | (1<<5) | (1<<4);
 392:	83 b1       	in	r24, 0x03	; 3
 394:	80 6f       	ori	r24, 0xF0	; 240
 396:	83 b9       	out	0x03, r24	; 3
	switch(fndDigitState)
 398:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	09 f4       	brne	.+2      	; 0x3a2 <FND_dispNum+0x54>
 3a0:	3e c0       	rjmp	.+124    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3a2:	38 f0       	brcs	.+14     	; 0x3b2 <FND_dispNum+0x64>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	09 f4       	brne	.+2      	; 0x3aa <FND_dispNum+0x5c>
 3a8:	6a c0       	rjmp	.+212    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <FND_dispNum+0x62>
 3ae:	95 c0       	rjmp	.+298    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 3b0:	b8 c0       	rjmp	.+368    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	{
		case 0:
		
		FND_NUM_PORT = Number[fndNum/1000%10];
 3b2:	9a 01       	movw	r18, r20
 3b4:	36 95       	lsr	r19
 3b6:	27 95       	ror	r18
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	36 95       	lsr	r19
 3be:	27 95       	ror	r18
 3c0:	a5 ec       	ldi	r26, 0xC5	; 197
 3c2:	b0 e2       	ldi	r27, 0x20	; 32
 3c4:	65 d1       	rcall	.+714    	; 0x690 <__umulhisi3>
 3c6:	ac 01       	movw	r20, r24
 3c8:	52 95       	swap	r21
 3ca:	42 95       	swap	r20
 3cc:	4f 70       	andi	r20, 0x0F	; 15
 3ce:	45 27       	eor	r20, r21
 3d0:	5f 70       	andi	r21, 0x0F	; 15
 3d2:	45 27       	eor	r20, r21
 3d4:	9a 01       	movw	r18, r20
 3d6:	ad ec       	ldi	r26, 0xCD	; 205
 3d8:	bc ec       	ldi	r27, 0xCC	; 204
 3da:	5a d1       	rcall	.+692    	; 0x690 <__umulhisi3>
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	9c 01       	movw	r18, r24
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	82 0f       	add	r24, r18
 3fc:	93 1f       	adc	r25, r19
 3fe:	9a 01       	movw	r18, r20
 400:	28 1b       	sub	r18, r24
 402:	39 0b       	sbc	r19, r25
 404:	e1 e0       	ldi	r30, 0x01	; 1
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	ec 0f       	add	r30, r28
 40a:	fd 1f       	adc	r31, r29
 40c:	e2 0f       	add	r30, r18
 40e:	f3 1f       	adc	r31, r19
 410:	80 81       	ld	r24, Z
 412:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<4);
 416:	83 b1       	in	r24, 0x03	; 3
 418:	8f 7e       	andi	r24, 0xEF	; 239
 41a:	83 b9       	out	0x03, r24	; 3
		break;
 41c:	82 c0       	rjmp	.+260    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
		case 1:
		
		FND_NUM_PORT = Number[fndNum/100%10];
 41e:	9a 01       	movw	r18, r20
 420:	36 95       	lsr	r19
 422:	27 95       	ror	r18
 424:	36 95       	lsr	r19
 426:	27 95       	ror	r18
 428:	ab e7       	ldi	r26, 0x7B	; 123
 42a:	b4 e1       	ldi	r27, 0x14	; 20
 42c:	31 d1       	rcall	.+610    	; 0x690 <__umulhisi3>
 42e:	ac 01       	movw	r20, r24
 430:	56 95       	lsr	r21
 432:	47 95       	ror	r20
 434:	9a 01       	movw	r18, r20
 436:	ad ec       	ldi	r26, 0xCD	; 205
 438:	bc ec       	ldi	r27, 0xCC	; 204
 43a:	2a d1       	rcall	.+596    	; 0x690 <__umulhisi3>
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	9c 01       	movw	r18, r24
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	82 0f       	add	r24, r18
 45c:	93 1f       	adc	r25, r19
 45e:	9a 01       	movw	r18, r20
 460:	28 1b       	sub	r18, r24
 462:	39 0b       	sbc	r19, r25
 464:	e1 e0       	ldi	r30, 0x01	; 1
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	ec 0f       	add	r30, r28
 46a:	fd 1f       	adc	r31, r29
 46c:	e2 0f       	add	r30, r18
 46e:	f3 1f       	adc	r31, r19
 470:	80 81       	ld	r24, Z
 472:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<5);
 476:	83 b1       	in	r24, 0x03	; 3
 478:	8f 7d       	andi	r24, 0xDF	; 223
 47a:	83 b9       	out	0x03, r24	; 3
		break;
		case 2:
		
		FND_NUM_PORT = Number[fndNum/10%10];
 47c:	52 c0       	rjmp	.+164    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 47e:	9a 01       	movw	r18, r20
 480:	ad ec       	ldi	r26, 0xCD	; 205
 482:	bc ec       	ldi	r27, 0xCC	; 204
 484:	05 d1       	rcall	.+522    	; 0x690 <__umulhisi3>
 486:	ac 01       	movw	r20, r24
 488:	56 95       	lsr	r21
 48a:	47 95       	ror	r20
 48c:	56 95       	lsr	r21
 48e:	47 95       	ror	r20
 490:	56 95       	lsr	r21
 492:	47 95       	ror	r20
 494:	9a 01       	movw	r18, r20
 496:	fc d0       	rcall	.+504    	; 0x690 <__umulhisi3>
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
 4a4:	9c 01       	movw	r18, r24
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	9a 01       	movw	r18, r20
 4bc:	28 1b       	sub	r18, r24
 4be:	39 0b       	sbc	r19, r25
 4c0:	e1 e0       	ldi	r30, 0x01	; 1
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ec 0f       	add	r30, r28
 4c6:	fd 1f       	adc	r31, r29
 4c8:	e2 0f       	add	r30, r18
 4ca:	f3 1f       	adc	r31, r19
 4cc:	80 81       	ld	r24, Z
 4ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<6);
 4d2:	83 b1       	in	r24, 0x03	; 3
 4d4:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 4d6:	83 b9       	out	0x03, r24	; 3
		case 3:
		
		FND_NUM_PORT = Number[fndNum%10];
 4d8:	24 c0       	rjmp	.+72     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 4da:	9a 01       	movw	r18, r20
 4dc:	ad ec       	ldi	r26, 0xCD	; 205
 4de:	bc ec       	ldi	r27, 0xCC	; 204
 4e0:	d7 d0       	rcall	.+430    	; 0x690 <__umulhisi3>
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	9c 01       	movw	r18, r24
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	82 0f       	add	r24, r18
 502:	93 1f       	adc	r25, r19
 504:	9a 01       	movw	r18, r20
 506:	28 1b       	sub	r18, r24
 508:	39 0b       	sbc	r19, r25
 50a:	e1 e0       	ldi	r30, 0x01	; 1
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	ec 0f       	add	r30, r28
 510:	fd 1f       	adc	r31, r29
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	80 81       	ld	r24, Z
 518:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<7);
 51c:	83 b1       	in	r24, 0x03	; 3
 51e:	8f 77       	andi	r24, 0x7F	; 127
 520:	83 b9       	out	0x03, r24	; 3
		break;
	}
}
 522:	2c 96       	adiw	r28, 0x0c	; 12
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <FND_setfndData>:

void FND_setfndData(uint16_t data)
{
	fndData= data;
 534:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <fndData+0x1>
 538:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <fndData>
 53c:	08 95       	ret

0000053e <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
 53e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <fndData>
 542:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <fndData+0x1>
 546:	03 cf       	rjmp	.-506    	; 0x34e <FND_dispNum>
 548:	08 95       	ret

0000054a <__vector_16>:
#include <avr/interrupt.h>
#include "ap/StopWatch/StopWatch.h"
#include "driver/fnd/fnd.h"

ISR(TIMER0_OVF_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	0b b6       	in	r0, 0x3b	; 59
 556:	0f 92       	push	r0
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	FND_ISR_Process();
 570:	e6 df       	rcall	.-52     	; 0x53e <FND_ISR_Process>
	TCNT0 = 131;
 572:	83 e8       	ldi	r24, 0x83	; 131
 574:	82 bf       	out	0x32, r24	; 50
}
 576:	ff 91       	pop	r31
 578:	ef 91       	pop	r30
 57a:	bf 91       	pop	r27
 57c:	af 91       	pop	r26
 57e:	9f 91       	pop	r25
 580:	8f 91       	pop	r24
 582:	7f 91       	pop	r23
 584:	6f 91       	pop	r22
 586:	5f 91       	pop	r21
 588:	4f 91       	pop	r20
 58a:	3f 91       	pop	r19
 58c:	2f 91       	pop	r18
 58e:	0f 90       	pop	r0
 590:	0b be       	out	0x3b, r0	; 59
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	0b b6       	in	r0, 0x3b	; 59
 5a8:	0f 92       	push	r0
 5aa:	2f 93       	push	r18
 5ac:	3f 93       	push	r19
 5ae:	4f 93       	push	r20
 5b0:	5f 93       	push	r21
 5b2:	6f 93       	push	r22
 5b4:	7f 93       	push	r23
 5b6:	8f 93       	push	r24
 5b8:	9f 93       	push	r25
 5ba:	af 93       	push	r26
 5bc:	bf 93       	push	r27
 5be:	ef 93       	push	r30
 5c0:	ff 93       	push	r31
	StopWatch_incMilisec();
 5c2:	a2 dd       	rcall	.-1212   	; 0x108 <StopWatch_incMilisec>
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	0f 90       	pop	r0
 5de:	0b be       	out	0x3b, r0	; 59
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <main>:

int main(void)
{
	StopWatch_init();
 5ea:	6e dd       	rcall	.-1316   	; 0xc8 <StopWatch_init>
	//Global Interrupt Enable
	sei();
	
	while (1)
	{
		StopWatch_run();
 5ec:	78 94       	sei
 5ee:	6e de       	rcall	.-804    	; 0x2cc <StopWatch_run>
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <main+0x4>

000005f2 <Gpio_initPin>:
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 5f2:	61 30       	cpi	r22, 0x01	; 1
 5f4:	61 f4       	brne	.+24     	; 0x60e <Gpio_initPin+0x1c>
 5f6:	fc 01       	movw	r30, r24
 5f8:	50 81       	ld	r21, Z
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	04 2e       	mov	r0, r20
 600:	02 c0       	rjmp	.+4      	; 0x606 <Gpio_initPin+0x14>
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <Gpio_initPin+0x10>
 60a:	25 2b       	or	r18, r21
 60c:	20 83       	st	Z, r18
 60e:	61 11       	cpse	r22, r1
 610:	0c c0       	rjmp	.+24     	; 0x62a <Gpio_initPin+0x38>
 612:	fc 01       	movw	r30, r24
 614:	50 81       	ld	r21, Z
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <Gpio_initPin+0x2e>
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	4a 95       	dec	r20
 622:	e2 f7       	brpl	.-8      	; 0x61c <Gpio_initPin+0x2a>
 624:	20 95       	com	r18
 626:	25 23       	and	r18, r21
 628:	20 83       	st	Z, r18
 62a:	08 95       	ret

0000062c <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
 62c:	fc 01       	movw	r30, r24
 62e:	80 81       	ld	r24, Z
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <Gpio_ReadPin+0xc>
 634:	95 95       	asr	r25
 636:	87 95       	ror	r24
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
 63c:	81 70       	andi	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <TIM0_OVF_init>:
﻿#include "TIM.h"

void TIM0_OVF_init()   // 1ms interrupt Enable
{
	// prescaler /128
	TCCR0 |= (1<<CS02) |(0<<CS01) | (1<<CS00);
 640:	83 b7       	in	r24, 0x33	; 51
 642:	85 60       	ori	r24, 0x05	; 5
 644:	83 bf       	out	0x33, r24	; 51
	//TIMSK Timer Overflow Interrupt Enable
	TIMSK |= (1<<TOIE0);
 646:	87 b7       	in	r24, 0x37	; 55
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;
 64c:	83 e8       	ldi	r24, 0x83	; 131
 64e:	82 bf       	out	0x32, r24	; 50
 650:	08 95       	ret

00000652 <TIM2_CTC_init>:
}

void TIM2_CTC_init()
{
	TCCR2 |= (0<<CS02) | (1<<CS01) | (1<<CS00); //prescaler /64
 652:	85 b5       	in	r24, 0x25	; 37
 654:	83 60       	ori	r24, 0x03	; 3
 656:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) |(0<<WGM20); //CTC 모드
 658:	85 b5       	in	r24, 0x25	; 37
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //Output Compare Match Interrupt Enable
 65e:	87 b7       	in	r24, 0x37	; 55
 660:	80 68       	ori	r24, 0x80	; 128
 662:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249;
 664:	89 ef       	ldi	r24, 0xF9	; 249
 666:	83 bd       	out	0x23, r24	; 35
 668:	08 95       	ret

0000066a <__divmodhi4>:
 66a:	97 fb       	bst	r25, 7
 66c:	07 2e       	mov	r0, r23
 66e:	16 f4       	brtc	.+4      	; 0x674 <__divmodhi4+0xa>
 670:	00 94       	com	r0
 672:	06 d0       	rcall	.+12     	; 0x680 <__divmodhi4_neg1>
 674:	77 fd       	sbrc	r23, 7
 676:	08 d0       	rcall	.+16     	; 0x688 <__divmodhi4_neg2>
 678:	1a d0       	rcall	.+52     	; 0x6ae <__udivmodhi4>
 67a:	07 fc       	sbrc	r0, 7
 67c:	05 d0       	rcall	.+10     	; 0x688 <__divmodhi4_neg2>
 67e:	3e f4       	brtc	.+14     	; 0x68e <__divmodhi4_exit>

00000680 <__divmodhi4_neg1>:
 680:	90 95       	com	r25
 682:	81 95       	neg	r24
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__divmodhi4_neg2>:
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255

0000068e <__divmodhi4_exit>:
 68e:	08 95       	ret

00000690 <__umulhisi3>:
 690:	a2 9f       	mul	r26, r18
 692:	b0 01       	movw	r22, r0
 694:	b3 9f       	mul	r27, r19
 696:	c0 01       	movw	r24, r0
 698:	a3 9f       	mul	r26, r19
 69a:	70 0d       	add	r23, r0
 69c:	81 1d       	adc	r24, r1
 69e:	11 24       	eor	r1, r1
 6a0:	91 1d       	adc	r25, r1
 6a2:	b2 9f       	mul	r27, r18
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	08 95       	ret

000006ae <__udivmodhi4>:
 6ae:	aa 1b       	sub	r26, r26
 6b0:	bb 1b       	sub	r27, r27
 6b2:	51 e1       	ldi	r21, 0x11	; 17
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <__udivmodhi4_ep>

000006b6 <__udivmodhi4_loop>:
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	a6 17       	cp	r26, r22
 6bc:	b7 07       	cpc	r27, r23
 6be:	10 f0       	brcs	.+4      	; 0x6c4 <__udivmodhi4_ep>
 6c0:	a6 1b       	sub	r26, r22
 6c2:	b7 0b       	sbc	r27, r23

000006c4 <__udivmodhi4_ep>:
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	5a 95       	dec	r21
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__udivmodhi4_loop>
 6cc:	80 95       	com	r24
 6ce:	90 95       	com	r25
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	08 95       	ret

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
