
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000072a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010c  0080010c  000007ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133f  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c87  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af1  00000000  00000000  00002952  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006aa  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  00003d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	e3 c2       	rjmp	.+1478   	; 0x5ec <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ac c2       	rjmp	.+1368   	; 0x59a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bb d2       	rcall	.+1398   	; 0x63a <main>
  c4:	30 c3       	rjmp	.+1632   	; 0x726 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <StopWatch_init>:

btn_t btnRunStop, btnReset;

void StopWatch_init()
{
	milisec = 0;
  c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <milisec+0x1>
  cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <milisec>
	sec = 0;
  d0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec>
	min = 0;
  d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <min>
	hour = 0;
  d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <hour>
	state = STOP;
  dc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
	FND_init();
  e0:	39 d1       	rcall	.+626    	; 0x354 <FND_init>
	TIM0_OVF_init();
  e2:	d6 d2       	rcall	.+1452   	; 0x690 <TIM0_OVF_init>
	TIM2_CTC_init();
  e4:	de d2       	rcall	.+1468   	; 0x6a2 <TIM2_CTC_init>
  e6:	20 e0       	ldi	r18, 0x00	; 0
	BUTTON_init(&btnRunStop,&DDRA,&PINA,0);
  e8:	49 e3       	ldi	r20, 0x39	; 57
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	6a e3       	ldi	r22, 0x3A	; 58
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	8b e1       	ldi	r24, 0x1B	; 27
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	f8 d0       	rcall	.+496    	; 0x2e6 <BUTTON_init>
  f6:	21 e0       	ldi	r18, 0x01	; 1
	BUTTON_init(&btnReset,&DDRA,&PINA,1);
  f8:	49 e3       	ldi	r20, 0x39	; 57
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	6a e3       	ldi	r22, 0x3A	; 58
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	82 e1       	ldi	r24, 0x12	; 18
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	f0 c0       	rjmp	.+480    	; 0x2e6 <BUTTON_init>
 106:	08 95       	ret

00000108 <StopWatch_incMilisec>:
 108:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
}

void StopWatch_incMilisec()
{
	if(state == RUN)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <StopWatch_incMilisec+0xa>
 110:	51 c0       	rjmp	.+162    	; 0x1b4 <StopWatch_incMilisec+0xac>
	{
		milisec = (milisec+1) % 1000;
 112:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <milisec>
 116:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <milisec+0x1>
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	9a 01       	movw	r18, r20
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	a5 ec       	ldi	r26, 0xC5	; 197
 12e:	b0 e2       	ldi	r27, 0x20	; 32
 130:	d7 d2       	rcall	.+1454   	; 0x6e0 <__umulhisi3>
 132:	92 95       	swap	r25
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	89 27       	eor	r24, r25
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	89 27       	eor	r24, r25
 13e:	68 ee       	ldi	r22, 0xE8	; 232
 140:	73 e0       	ldi	r23, 0x03	; 3
 142:	86 9f       	mul	r24, r22
 144:	90 01       	movw	r18, r0
 146:	87 9f       	mul	r24, r23
 148:	30 0d       	add	r19, r0
 14a:	96 9f       	mul	r25, r22
 14c:	30 0d       	add	r19, r0
 14e:	11 24       	eor	r1, r1
 150:	ca 01       	movw	r24, r20
 152:	82 1b       	sub	r24, r18
 154:	93 0b       	sbc	r25, r19
 156:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <milisec+0x1>
 15a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <milisec>
		if (milisec<500)
 15e:	84 3f       	cpi	r24, 0xF4	; 244
 160:	91 40       	sbci	r25, 0x01	; 1
		{
			FND_colonOn();
 162:	10 f4       	brcc	.+4      	; 0x168 <StopWatch_incMilisec+0x60>
 164:	13 d2       	rcall	.+1062   	; 0x58c <FND_colonOn>
		}
		else
		{
			FND_colonOff();
 166:	01 c0       	rjmp	.+2      	; 0x16a <StopWatch_incMilisec+0x62>
 168:	15 d2       	rcall	.+1066   	; 0x594 <FND_colonOff>
		}
		if(milisec) return;
 16a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <milisec>
 16e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <milisec+0x1>
 172:	89 2b       	or	r24, r25
 174:	f9 f4       	brne	.+62     	; 0x1b4 <StopWatch_incMilisec+0xac>
		
		sec = (sec+1) % 60;
 176:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec>
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	6c e3       	ldi	r22, 0x3C	; 60
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	9b d2       	rcall	.+1334   	; 0x6ba <__divmodhi4>
 184:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec>
		if(sec) return;
 188:	81 11       	cpse	r24, r1
 18a:	14 c0       	rjmp	.+40     	; 0x1b4 <StopWatch_incMilisec+0xac>
		
		min = (min+1) % 60;
 18c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <min>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	6c e3       	ldi	r22, 0x3C	; 60
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	90 d2       	rcall	.+1312   	; 0x6ba <__divmodhi4>
 19a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <min>
		if(min) return;
 19e:	81 11       	cpse	r24, r1
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <StopWatch_incMilisec+0xac>
		
		hour = (hour+1) % 24;
 1a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour>
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	68 e1       	ldi	r22, 0x18	; 24
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	85 d2       	rcall	.+1290   	; 0x6ba <__divmodhi4>
 1b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <hour>
 1b4:	08 95       	ret

000001b6 <StopWatch_eventCheck>:
	}
}

void StopWatch_eventCheck()
{
	switch(state)
 1b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	a1 f0       	breq	.+40     	; 0x1e6 <StopWatch_eventCheck+0x30>
 1be:	18 f0       	brcs	.+6      	; 0x1c6 <StopWatch_eventCheck+0x10>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	01 f1       	breq	.+64     	; 0x204 <StopWatch_eventCheck+0x4e>
 1c4:	08 95       	ret
	{
		case STOP:
		if (BUTTON_GETSTATE(&btnRunStop) == ACT_REALESED)
 1c6:	8b e1       	ldi	r24, 0x1B	; 27
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	9a d0       	rcall	.+308    	; 0x300 <BUTTON_GETSTATE>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <StopWatch_eventCheck+0x20>
		{
			state = RUN;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
		}
		if( BUTTON_GETSTATE(&btnReset) == ACT_REALESED)
 1d6:	82 e1       	ldi	r24, 0x12	; 18
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	92 d0       	rcall	.+292    	; 0x300 <BUTTON_GETSTATE>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	a1 f4       	brne	.+40     	; 0x208 <StopWatch_eventCheck+0x52>
		{
			state = RESET;
 1e0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
 1e4:	08 95       	ret
		}
		break;
		case RUN:
		if (BUTTON_GETSTATE(&btnRunStop) == ACT_REALESED)
 1e6:	8b e1       	ldi	r24, 0x1B	; 27
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	8a d0       	rcall	.+276    	; 0x300 <BUTTON_GETSTATE>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <StopWatch_eventCheck+0x3e>
		{
			state = STOP;
 1f0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
		}
		if( BUTTON_GETSTATE(&btnReset) == ACT_REALESED)
 1f4:	82 e1       	ldi	r24, 0x12	; 18
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	83 d0       	rcall	.+262    	; 0x300 <BUTTON_GETSTATE>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	29 f4       	brne	.+10     	; 0x208 <StopWatch_eventCheck+0x52>
		{
			state = RESET;
 1fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <state>
 202:	08 95       	ret
		}
		break;
		case RESET:
		state = STOP;
 204:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state>
 208:	08 95       	ret

0000020a <StopWatch_execute>:
}

void StopWatch_execute()
{
	uint16_t stopWatchData;
	switch(state)
 20a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	21 f0       	breq	.+8      	; 0x21a <StopWatch_execute+0x10>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	09 f4       	brne	.+2      	; 0x218 <StopWatch_execute+0xe>
 216:	56 c0       	rjmp	.+172    	; 0x2c4 <StopWatch_execute+0xba>
 218:	08 95       	ret
	{
		case STOP:
		break;
		case RUN:
		if (min<10 && hour<1)
 21a:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <min>
 21e:	2a 30       	cpi	r18, 0x0A	; 10
 220:	d0 f5       	brcc	.+116    	; 0x296 <StopWatch_execute+0x8c>
 222:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <hour>
 226:	81 11       	cpse	r24, r1
 228:	36 c0       	rjmp	.+108    	; 0x296 <StopWatch_execute+0x8c>
		{
			stopWatchData = (min%10 *1000) + (sec * 10) + (milisec/100);	
 22a:	8d ec       	ldi	r24, 0xCD	; 205
 22c:	28 9f       	mul	r18, r24
 22e:	81 2d       	mov	r24, r1
 230:	11 24       	eor	r1, r1
 232:	86 95       	lsr	r24
 234:	86 95       	lsr	r24
 236:	86 95       	lsr	r24
 238:	88 0f       	add	r24, r24
 23a:	98 2f       	mov	r25, r24
 23c:	99 0f       	add	r25, r25
 23e:	99 0f       	add	r25, r25
 240:	89 0f       	add	r24, r25
 242:	28 1b       	sub	r18, r24
 244:	82 2f       	mov	r24, r18
 246:	28 ee       	ldi	r18, 0xE8	; 232
 248:	33 e0       	ldi	r19, 0x03	; 3
 24a:	82 9f       	mul	r24, r18
 24c:	b0 01       	movw	r22, r0
 24e:	83 9f       	mul	r24, r19
 250:	70 0d       	add	r23, r0
 252:	11 24       	eor	r1, r1
 254:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <sec>
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	a9 01       	movw	r20, r18
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	24 0f       	add	r18, r20
 26e:	35 1f       	adc	r19, r21
 270:	ab 01       	movw	r20, r22
 272:	42 0f       	add	r20, r18
 274:	53 1f       	adc	r21, r19
 276:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <milisec>
 27a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <milisec+0x1>
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	ab e7       	ldi	r26, 0x7B	; 123
 288:	b4 e1       	ldi	r27, 0x14	; 20
 28a:	2a d2       	rcall	.+1108   	; 0x6e0 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	84 0f       	add	r24, r20
 292:	95 1f       	adc	r25, r21
 294:	15 c0       	rjmp	.+42     	; 0x2c0 <StopWatch_execute+0xb6>
		}
		else if (hour<10)
 296:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <hour>
 29a:	3a 30       	cpi	r19, 0x0A	; 10
 29c:	50 f4       	brcc	.+20     	; 0x2b2 <StopWatch_execute+0xa8>
		{
			stopWatchData =  min*100 + sec;
 29e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <sec>
 2a2:	89 2f       	mov	r24, r25
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	34 e6       	ldi	r19, 0x64	; 100
 2a8:	23 9f       	mul	r18, r19
 2aa:	80 0d       	add	r24, r0
 2ac:	91 1d       	adc	r25, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <StopWatch_execute+0xb6>
		}
		else
		{
			stopWatchData =  hour*100 + min;
 2b2:	82 2f       	mov	r24, r18
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	24 e6       	ldi	r18, 0x64	; 100
 2b8:	32 9f       	mul	r19, r18
 2ba:	80 0d       	add	r24, r0
 2bc:	91 1d       	adc	r25, r1
		}
		FND_setfndData(stopWatchData);
 2be:	11 24       	eor	r1, r1
 2c0:	5a c1       	rjmp	.+692    	; 0x576 <FND_setfndData>
		break;
 2c2:	08 95       	ret
		case RESET:
		milisec = 0;
 2c4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <milisec+0x1>
 2c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <milisec>
		sec = 0;
 2cc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec>
		min = 0;
 2d0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <min>
		hour = 0;
 2d4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <hour>
		stopWatchData = 0;
		FND_setfndData(stopWatchData);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	4c c1       	rjmp	.+664    	; 0x576 <FND_setfndData>
 2de:	08 95       	ret

000002e0 <StopWatch_run>:
	}
}

void StopWatch_run()
{
	StopWatch_eventCheck();
 2e0:	6a df       	rcall	.-300    	; 0x1b6 <StopWatch_eventCheck>
	StopWatch_execute();
 2e2:	93 cf       	rjmp	.-218    	; 0x20a <StopWatch_execute>
 2e4:	08 95       	ret

000002e6 <BUTTON_init>:
 2e6:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 2e8:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 2ea:	71 83       	std	Z+1, r23	; 0x01
 2ec:	60 83       	st	Z, r22
	btn ->PIN = pin;
 2ee:	53 83       	std	Z+3, r21	; 0x03
 2f0:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 2f2:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 2f4:	31 e0       	ldi	r19, 0x01	; 1
 2f6:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
 2f8:	42 2f       	mov	r20, r18
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	a2 c1       	rjmp	.+836    	; 0x642 <Gpio_initPin>
 2fe:	08 95       	ret

00000300 <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
 306:	6c 81       	ldd	r22, Y+4	; 0x04
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	9b 81       	ldd	r25, Y+3	; 0x03
 30c:	b7 d1       	rcall	.+878    	; 0x67c <Gpio_ReadPin>
 30e:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 310:	81 11       	cpse	r24, r1
 312:	0b c0       	rjmp	.+22     	; 0x32a <BUTTON_GETSTATE+0x2a>
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	41 f4       	brne	.+16     	; 0x32a <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	ef e3       	ldi	r30, 0x3F	; 63
 31c:	fc e9       	ldi	r31, 0x9C	; 156
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <BUTTON_GETSTATE+0x1e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <BUTTON_GETSTATE+0x24>
 324:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 326:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
 328:	12 c0       	rjmp	.+36     	; 0x34e <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 32a:	99 23       	and	r25, r25
 32c:	69 f0       	breq	.+26     	; 0x348 <BUTTON_GETSTATE+0x48>
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	81 11       	cpse	r24, r1
 332:	0c c0       	rjmp	.+24     	; 0x34c <BUTTON_GETSTATE+0x4c>
 334:	8f e3       	ldi	r24, 0x3F	; 63
 336:	9c e9       	ldi	r25, 0x9C	; 156
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <BUTTON_GETSTATE+0x38>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <BUTTON_GETSTATE+0x3e>
 33e:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	03 c0       	rjmp	.+6      	; 0x34e <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	01 c0       	rjmp	.+2      	; 0x34e <BUTTON_GETSTATE+0x4e>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <FND_init>:
uint16_t fndData  = 0;
uint8_t fndColonFlag;

void FND_init()
{
	DDRE |= (1<<FND_DIGIT_4) |(1<<FND_DIGIT_3) |(1<<FND_DIGIT_2) |(1<<FND_DIGIT_1) ;
 354:	82 b1       	in	r24, 0x02	; 2
 356:	80 6f       	ori	r24, 0xF0	; 240
 358:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 360:	08 95       	ret

00000362 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	2b 97       	sbiw	r28, 0x0b	; 11
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	8c 01       	movw	r16, r24
	uint8_t Number[11] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80}; //0 -> 0x3f 1->0x06 2-> 0x5b 3->0x4f 4->0x66 5->0x6d 6->0x7d 7-> 0x07 8->0x7f 9->0x6f
 37c:	8b e0       	ldi	r24, 0x0B	; 11
 37e:	e0 e0       	ldi	r30, 0x00	; 0
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	de 01       	movw	r26, r28
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	01 90       	ld	r0, Z+
 388:	0d 92       	st	X+, r0
 38a:	8a 95       	dec	r24
 38c:	e1 f7       	brne	.-8      	; 0x386 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 5;
 38e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8f d1       	rcall	.+798    	; 0x6ba <__divmodhi4>
 39c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	FND_DIGIT_PORT |= (1<<7) | (1<<6) | (1<<5) | (1<<4);
 3a0:	83 b1       	in	r24, 0x03	; 3
 3a2:	80 6f       	ori	r24, 0xF0	; 240
 3a4:	83 b9       	out	0x03, r24	; 3
	switch(fndDigitState)
 3a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <FND_dispNum+0x4e>
 3ae:	74 c0       	rjmp	.+232    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 3b0:	30 f4       	brcc	.+12     	; 0x3be <FND_dispNum+0x5c>
 3b2:	88 23       	and	r24, r24
 3b4:	59 f0       	breq	.+22     	; 0x3cc <FND_dispNum+0x6a>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	09 f4       	brne	.+2      	; 0x3bc <FND_dispNum+0x5a>
 3ba:	3e c0       	rjmp	.+124    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3bc:	d1 c0       	rjmp	.+418    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <FND_dispNum+0x62>
 3c2:	98 c0       	rjmp	.+304    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 3c4:	84 30       	cpi	r24, 0x04	; 4
 3c6:	09 f4       	brne	.+2      	; 0x3ca <FND_dispNum+0x68>
 3c8:	ba c0       	rjmp	.+372    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 3ca:	ca c0       	rjmp	.+404    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	{
		case 0:
		
		FND_NUM_PORT = Number[fndNum/1000%10];
 3cc:	98 01       	movw	r18, r16
 3ce:	36 95       	lsr	r19
 3d0:	27 95       	ror	r18
 3d2:	36 95       	lsr	r19
 3d4:	27 95       	ror	r18
 3d6:	36 95       	lsr	r19
 3d8:	27 95       	ror	r18
 3da:	a5 ec       	ldi	r26, 0xC5	; 197
 3dc:	b0 e2       	ldi	r27, 0x20	; 32
 3de:	80 d1       	rcall	.+768    	; 0x6e0 <__umulhisi3>
 3e0:	ac 01       	movw	r20, r24
 3e2:	52 95       	swap	r21
 3e4:	42 95       	swap	r20
 3e6:	4f 70       	andi	r20, 0x0F	; 15
 3e8:	45 27       	eor	r20, r21
 3ea:	5f 70       	andi	r21, 0x0F	; 15
 3ec:	45 27       	eor	r20, r21
 3ee:	9a 01       	movw	r18, r20
 3f0:	ad ec       	ldi	r26, 0xCD	; 205
 3f2:	bc ec       	ldi	r27, 0xCC	; 204
 3f4:	75 d1       	rcall	.+746    	; 0x6e0 <__umulhisi3>
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	9c 01       	movw	r18, r24
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	9a 01       	movw	r18, r20
 41a:	28 1b       	sub	r18, r24
 41c:	39 0b       	sbc	r19, r25
 41e:	e1 e0       	ldi	r30, 0x01	; 1
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ec 0f       	add	r30, r28
 424:	fd 1f       	adc	r31, r29
 426:	e2 0f       	add	r30, r18
 428:	f3 1f       	adc	r31, r19
 42a:	80 81       	ld	r24, Z
 42c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<4);
 430:	83 b1       	in	r24, 0x03	; 3
 432:	8f 7e       	andi	r24, 0xEF	; 239
 434:	83 b9       	out	0x03, r24	; 3
		break;
 436:	94 c0       	rjmp	.+296    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		case 1:
		
		FND_NUM_PORT = Number[fndNum/100%10];
 438:	98 01       	movw	r18, r16
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	ab e7       	ldi	r26, 0x7B	; 123
 444:	b4 e1       	ldi	r27, 0x14	; 20
 446:	4c d1       	rcall	.+664    	; 0x6e0 <__umulhisi3>
 448:	ac 01       	movw	r20, r24
 44a:	56 95       	lsr	r21
 44c:	47 95       	ror	r20
 44e:	9a 01       	movw	r18, r20
 450:	ad ec       	ldi	r26, 0xCD	; 205
 452:	bc ec       	ldi	r27, 0xCC	; 204
 454:	45 d1       	rcall	.+650    	; 0x6e0 <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	9c 01       	movw	r18, r24
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	82 0f       	add	r24, r18
 476:	93 1f       	adc	r25, r19
 478:	9a 01       	movw	r18, r20
 47a:	28 1b       	sub	r18, r24
 47c:	39 0b       	sbc	r19, r25
 47e:	e1 e0       	ldi	r30, 0x01	; 1
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	ec 0f       	add	r30, r28
 484:	fd 1f       	adc	r31, r29
 486:	e2 0f       	add	r30, r18
 488:	f3 1f       	adc	r31, r19
 48a:	80 81       	ld	r24, Z
 48c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<5);
 490:	83 b1       	in	r24, 0x03	; 3
 492:	8f 7d       	andi	r24, 0xDF	; 223
		break;
 494:	83 b9       	out	0x03, r24	; 3
		case 2:
		
		FND_NUM_PORT = Number[fndNum/10%10];
 496:	64 c0       	rjmp	.+200    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 498:	98 01       	movw	r18, r16
 49a:	ad ec       	ldi	r26, 0xCD	; 205
 49c:	bc ec       	ldi	r27, 0xCC	; 204
 49e:	20 d1       	rcall	.+576    	; 0x6e0 <__umulhisi3>
 4a0:	ac 01       	movw	r20, r24
 4a2:	56 95       	lsr	r21
 4a4:	47 95       	ror	r20
 4a6:	56 95       	lsr	r21
 4a8:	47 95       	ror	r20
 4aa:	56 95       	lsr	r21
 4ac:	47 95       	ror	r20
 4ae:	9a 01       	movw	r18, r20
 4b0:	17 d1       	rcall	.+558    	; 0x6e0 <__umulhisi3>
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	9c 01       	movw	r18, r24
 4c0:	22 0f       	add	r18, r18
 4c2:	33 1f       	adc	r19, r19
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	82 0f       	add	r24, r18
 4d2:	93 1f       	adc	r25, r19
 4d4:	9a 01       	movw	r18, r20
 4d6:	28 1b       	sub	r18, r24
 4d8:	39 0b       	sbc	r19, r25
 4da:	e1 e0       	ldi	r30, 0x01	; 1
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ec 0f       	add	r30, r28
 4e0:	fd 1f       	adc	r31, r29
 4e2:	e2 0f       	add	r30, r18
 4e4:	f3 1f       	adc	r31, r19
 4e6:	80 81       	ld	r24, Z
 4e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<6);
 4ec:	83 b1       	in	r24, 0x03	; 3
 4ee:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 4f0:	83 b9       	out	0x03, r24	; 3
		case 3:
		
		FND_NUM_PORT = Number[fndNum%10];
 4f2:	36 c0       	rjmp	.+108    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4f4:	98 01       	movw	r18, r16
 4f6:	ad ec       	ldi	r26, 0xCD	; 205
 4f8:	bc ec       	ldi	r27, 0xCC	; 204
 4fa:	f2 d0       	rcall	.+484    	; 0x6e0 <__umulhisi3>
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	9c 01       	movw	r18, r24
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	82 0f       	add	r24, r18
 51c:	93 1f       	adc	r25, r19
 51e:	98 01       	movw	r18, r16
 520:	28 1b       	sub	r18, r24
 522:	39 0b       	sbc	r19, r25
 524:	e1 e0       	ldi	r30, 0x01	; 1
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ec 0f       	add	r30, r28
 52a:	fd 1f       	adc	r31, r29
 52c:	e2 0f       	add	r30, r18
 52e:	f3 1f       	adc	r31, r19
 530:	80 81       	ld	r24, Z
 532:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<7);
 536:	83 b1       	in	r24, 0x03	; 3
 538:	8f 77       	andi	r24, 0x7F	; 127
 53a:	83 b9       	out	0x03, r24	; 3
		break;
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		case 4:
		if (fndColonFlag)
 53e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <fndColonFlag>
 542:	88 23       	and	r24, r24
 544:	39 f0       	breq	.+14     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		{
			FND_NUM_PORT = Number[FND_COLON];
 546:	8b 85       	ldd	r24, Y+11	; 0x0b
 548:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT &= ~(1<<5);			
 54c:	83 b1       	in	r24, 0x03	; 3
 54e:	8f 7d       	andi	r24, 0xDF	; 223
 550:	83 b9       	out	0x03, r24	; 3
 552:	06 c0       	rjmp	.+12     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		}
		else
		{
			FND_NUM_PORT = Number[FND_COLON];
 554:	8b 85       	ldd	r24, Y+11	; 0x0b
 556:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT |= (1<<5);
 55a:	83 b1       	in	r24, 0x03	; 3
 55c:	80 62       	ori	r24, 0x20	; 32
 55e:	83 b9       	out	0x03, r24	; 3
		}

		break;
	}
}
 560:	2b 96       	adiw	r28, 0x0b	; 11
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <FND_setfndData>:

void FND_setfndData(uint16_t data)
{
	fndData= data;
 576:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <fndData+0x1>
 57a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <fndData>
 57e:	08 95       	ret

00000580 <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
 580:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <fndData>
 584:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <fndData+0x1>
 588:	ec ce       	rjmp	.-552    	; 0x362 <FND_dispNum>
 58a:	08 95       	ret

0000058c <FND_colonOn>:
}

void FND_colonOn()
{
	fndColonFlag = 1;	
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <fndColonFlag>
 592:	08 95       	ret

00000594 <FND_colonOff>:
}

void FND_colonOff()
{
	fndColonFlag = 0;
 594:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <fndColonFlag>
 598:	08 95       	ret

0000059a <__vector_16>:
#include <avr/interrupt.h>
#include "ap/StopWatch/StopWatch.h"
#include "driver/fnd/fnd.h"

ISR(TIMER0_OVF_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	0b b6       	in	r0, 0x3b	; 59
 5a6:	0f 92       	push	r0
 5a8:	2f 93       	push	r18
 5aa:	3f 93       	push	r19
 5ac:	4f 93       	push	r20
 5ae:	5f 93       	push	r21
 5b0:	6f 93       	push	r22
 5b2:	7f 93       	push	r23
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
 5b8:	af 93       	push	r26
 5ba:	bf 93       	push	r27
 5bc:	ef 93       	push	r30
 5be:	ff 93       	push	r31
	FND_ISR_Process();
 5c0:	df df       	rcall	.-66     	; 0x580 <FND_ISR_Process>
	TCNT0 = 131;
 5c2:	83 e8       	ldi	r24, 0x83	; 131
 5c4:	82 bf       	out	0x32, r24	; 50
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0b be       	out	0x3b, r0	; 59
 5e2:	0f 90       	pop	r0
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	0f 90       	pop	r0
 5e8:	1f 90       	pop	r1
 5ea:	18 95       	reti

000005ec <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	0b b6       	in	r0, 0x3b	; 59
 5f8:	0f 92       	push	r0
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
	StopWatch_incMilisec();
 612:	7a dd       	rcall	.-1292   	; 0x108 <StopWatch_incMilisec>
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0b be       	out	0x3b, r0	; 59
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <main>:

int main(void)
{
	StopWatch_init();
 63a:	46 dd       	rcall	.-1396   	; 0xc8 <StopWatch_init>
	//Global Interrupt Enable
	sei();
	
	while (1)
	{
		StopWatch_run();
 63c:	78 94       	sei
 63e:	50 de       	rcall	.-864    	; 0x2e0 <StopWatch_run>
 640:	fe cf       	rjmp	.-4      	; 0x63e <main+0x4>

00000642 <Gpio_initPin>:
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 642:	61 30       	cpi	r22, 0x01	; 1
 644:	61 f4       	brne	.+24     	; 0x65e <Gpio_initPin+0x1c>
 646:	fc 01       	movw	r30, r24
 648:	50 81       	ld	r21, Z
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	04 2e       	mov	r0, r20
 650:	02 c0       	rjmp	.+4      	; 0x656 <Gpio_initPin+0x14>
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <Gpio_initPin+0x10>
 65a:	25 2b       	or	r18, r21
 65c:	20 83       	st	Z, r18
 65e:	61 11       	cpse	r22, r1
 660:	0c c0       	rjmp	.+24     	; 0x67a <Gpio_initPin+0x38>
 662:	fc 01       	movw	r30, r24
 664:	50 81       	ld	r21, Z
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <Gpio_initPin+0x2e>
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19
 670:	4a 95       	dec	r20
 672:	e2 f7       	brpl	.-8      	; 0x66c <Gpio_initPin+0x2a>
 674:	20 95       	com	r18
 676:	25 23       	and	r18, r21
 678:	20 83       	st	Z, r18
 67a:	08 95       	ret

0000067c <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
 67c:	fc 01       	movw	r30, r24
 67e:	80 81       	ld	r24, Z
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <Gpio_ReadPin+0xc>
 684:	95 95       	asr	r25
 686:	87 95       	ror	r24
 688:	6a 95       	dec	r22
 68a:	e2 f7       	brpl	.-8      	; 0x684 <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
 68c:	81 70       	andi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <TIM0_OVF_init>:
﻿#include "TIM.h"

void TIM0_OVF_init()   // 1ms interrupt Enable
{
	// prescaler /128
	TCCR0 |= (1<<CS02) |(0<<CS01) | (1<<CS00);
 690:	83 b7       	in	r24, 0x33	; 51
 692:	85 60       	ori	r24, 0x05	; 5
 694:	83 bf       	out	0x33, r24	; 51
	//TIMSK Timer Overflow Interrupt Enable
	TIMSK |= (1<<TOIE0);
 696:	87 b7       	in	r24, 0x37	; 55
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;
 69c:	83 e8       	ldi	r24, 0x83	; 131
 69e:	82 bf       	out	0x32, r24	; 50
 6a0:	08 95       	ret

000006a2 <TIM2_CTC_init>:
}

void TIM2_CTC_init()
{
	TCCR2 |= (0<<CS02) | (1<<CS01) | (1<<CS00); //prescaler /64
 6a2:	85 b5       	in	r24, 0x25	; 37
 6a4:	83 60       	ori	r24, 0x03	; 3
 6a6:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) |(0<<WGM20); //CTC 모드
 6a8:	85 b5       	in	r24, 0x25	; 37
 6aa:	88 60       	ori	r24, 0x08	; 8
 6ac:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //Output Compare Match Interrupt Enable
 6ae:	87 b7       	in	r24, 0x37	; 55
 6b0:	80 68       	ori	r24, 0x80	; 128
 6b2:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249;
 6b4:	89 ef       	ldi	r24, 0xF9	; 249
 6b6:	83 bd       	out	0x23, r24	; 35
 6b8:	08 95       	ret

000006ba <__divmodhi4>:
 6ba:	97 fb       	bst	r25, 7
 6bc:	07 2e       	mov	r0, r23
 6be:	16 f4       	brtc	.+4      	; 0x6c4 <__divmodhi4+0xa>
 6c0:	00 94       	com	r0
 6c2:	06 d0       	rcall	.+12     	; 0x6d0 <__divmodhi4_neg1>
 6c4:	77 fd       	sbrc	r23, 7
 6c6:	08 d0       	rcall	.+16     	; 0x6d8 <__divmodhi4_neg2>
 6c8:	1a d0       	rcall	.+52     	; 0x6fe <__udivmodhi4>
 6ca:	07 fc       	sbrc	r0, 7
 6cc:	05 d0       	rcall	.+10     	; 0x6d8 <__divmodhi4_neg2>
 6ce:	3e f4       	brtc	.+14     	; 0x6de <__divmodhi4_exit>

000006d0 <__divmodhi4_neg1>:
 6d0:	90 95       	com	r25
 6d2:	81 95       	neg	r24
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	08 95       	ret

000006d8 <__divmodhi4_neg2>:
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255

000006de <__divmodhi4_exit>:
 6de:	08 95       	ret

000006e0 <__umulhisi3>:
 6e0:	a2 9f       	mul	r26, r18
 6e2:	b0 01       	movw	r22, r0
 6e4:	b3 9f       	mul	r27, r19
 6e6:	c0 01       	movw	r24, r0
 6e8:	a3 9f       	mul	r26, r19
 6ea:	70 0d       	add	r23, r0
 6ec:	81 1d       	adc	r24, r1
 6ee:	11 24       	eor	r1, r1
 6f0:	91 1d       	adc	r25, r1
 6f2:	b2 9f       	mul	r27, r18
 6f4:	70 0d       	add	r23, r0
 6f6:	81 1d       	adc	r24, r1
 6f8:	11 24       	eor	r1, r1
 6fa:	91 1d       	adc	r25, r1
 6fc:	08 95       	ret

000006fe <__udivmodhi4>:
 6fe:	aa 1b       	sub	r26, r26
 700:	bb 1b       	sub	r27, r27
 702:	51 e1       	ldi	r21, 0x11	; 17
 704:	07 c0       	rjmp	.+14     	; 0x714 <__udivmodhi4_ep>

00000706 <__udivmodhi4_loop>:
 706:	aa 1f       	adc	r26, r26
 708:	bb 1f       	adc	r27, r27
 70a:	a6 17       	cp	r26, r22
 70c:	b7 07       	cpc	r27, r23
 70e:	10 f0       	brcs	.+4      	; 0x714 <__udivmodhi4_ep>
 710:	a6 1b       	sub	r26, r22
 712:	b7 0b       	sbc	r27, r23

00000714 <__udivmodhi4_ep>:
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	5a 95       	dec	r21
 71a:	a9 f7       	brne	.-22     	; 0x706 <__udivmodhi4_loop>
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	bc 01       	movw	r22, r24
 722:	cd 01       	movw	r24, r26
 724:	08 95       	ret

00000726 <_exit>:
 726:	f8 94       	cli

00000728 <__stop_program>:
 728:	ff cf       	rjmp	.-2      	; 0x728 <__stop_program>
