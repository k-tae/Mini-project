
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000987  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086c  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000379  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000450  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	43 d0       	rcall	.+134    	; 0x14a <main>
  c4:	6b c0       	rjmp	.+214    	; 0x19c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ledLeftShift>:
uint8_t ledData;
uint8_t stateLast = 0x01;

void ledLeftShift(void)
{
	LED_PORT = ledData;
  c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ledData>
  cc:	82 bb       	out	0x12, r24	; 18
	ledData = (ledData>>7) | (ledData<<1);
  ce:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ledData>
  d2:	82 2f       	mov	r24, r18
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	22 1f       	adc	r18, r18
  dc:	22 27       	eor	r18, r18
  de:	22 1f       	adc	r18, r18
  e0:	82 2b       	or	r24, r18
  e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ledData>
	stateLast = (ledData<<7) | (ledData>>1);	
  e6:	90 e8       	ldi	r25, 0x80	; 128
  e8:	89 9f       	mul	r24, r25
  ea:	90 01       	movw	r18, r0
  ec:	11 24       	eor	r1, r1
  ee:	86 95       	lsr	r24
  f0:	82 2b       	or	r24, r18
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	08 95       	ret

000000f8 <ledRightShift>:
}
void ledRightShift(void)
{
	LED_PORT = ledData;
  f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ledData>
  fc:	82 bb       	out	0x12, r24	; 18
	ledData = (ledData<<7) | (ledData>>1);	
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ledData>
 102:	30 e8       	ldi	r19, 0x80	; 128
 104:	23 9f       	mul	r18, r19
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	26 95       	lsr	r18
 10c:	82 2b       	or	r24, r18
 10e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ledData>
	stateLast = (ledData>>7) | (ledData<<1);
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	88 1f       	adc	r24, r24
 11c:	88 27       	eor	r24, r24
 11e:	88 1f       	adc	r24, r24
 120:	82 2b       	or	r24, r18
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	08 95       	ret

00000128 <ledAllBlink>:
	//_delay_ms(200);
	//PORTD = 0xff;
	//ledData = stateLast;
	
	static uint8_t ledBlinkData = 0x00;
	ledBlinkData ^= 0xff;
 128:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12c:	80 95       	com	r24
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	LED_PORT = ledBlinkData;
 132:	82 bb       	out	0x12, r24	; 18
	ledData = stateLast;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ledData>
 13c:	08 95       	ret

0000013e <ledAllOff>:

}
void ledAllOff(void)
{
	LED_PORT = 0x00;
 13e:	12 ba       	out	0x12, r1	; 18
	ledData = stateLast;
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ledData>
 148:	08 95       	ret

0000014a <main>:
}

int main()
{
	LED_DDR = 0xff;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	81 bb       	out	0x11, r24	; 17
	BUTTON_DDR = 0x00;
 14e:	1a ba       	out	0x1a, r1	; 26
	BUTTON_PORT = 0xff;
 150:	8b bb       	out	0x1b, r24	; 27
	
	uint8_t state = OFF;
	ledData = 0x01;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ledData>
{
	LED_DDR = 0xff;
	BUTTON_DDR = 0x00;
	BUTTON_PORT = 0xff;
	
	uint8_t state = OFF;
 158:	c3 e0       	ldi	r28, 0x03	; 3
	ledData = 0x01;
		
	while(1)
	{
		if(!(BUTTON_PIN & (1<<LEFT)))
 15a:	c8 9b       	sbis	0x19, 0	; 25
		{
			state = LEFT;
 15c:	c0 e0       	ldi	r28, 0x00	; 0
		}
		if(!(BUTTON_PIN & (1<<RIGHT)))
 15e:	c9 9b       	sbis	0x19, 1	; 25
		{
			state = RIGHT;
 160:	c1 e0       	ldi	r28, 0x01	; 1
		}
		if(!(BUTTON_PIN & (1<<BLINK)))
 162:	ca 9b       	sbis	0x19, 2	; 25
		{
			state = BLINK;
 164:	c2 e0       	ldi	r28, 0x02	; 2
		}
		if(!(BUTTON_PIN & (1<<OFF)))
 166:	cb 9b       	sbis	0x19, 3	; 25
		{
			state = OFF;
 168:	c3 e0       	ldi	r28, 0x03	; 3
		}
		
		switch(state)
 16a:	c1 30       	cpi	r28, 0x01	; 1
 16c:	41 f0       	breq	.+16     	; 0x17e <main+0x34>
 16e:	28 f0       	brcs	.+10     	; 0x17a <main+0x30>
 170:	c2 30       	cpi	r28, 0x02	; 2
 172:	39 f0       	breq	.+14     	; 0x182 <main+0x38>
 174:	c3 30       	cpi	r28, 0x03	; 3
 176:	39 f0       	breq	.+14     	; 0x186 <main+0x3c>
 178:	07 c0       	rjmp	.+14     	; 0x188 <main+0x3e>
		{
			case LEFT:
			ledLeftShift();
 17a:	a6 df       	rcall	.-180    	; 0xc8 <ledLeftShift>
			break;
			case RIGHT:
			ledRightShift();
 17c:	05 c0       	rjmp	.+10     	; 0x188 <main+0x3e>
			break;
 17e:	bc df       	rcall	.-136    	; 0xf8 <ledRightShift>
			case BLINK:
			ledAllBlink();
 180:	03 c0       	rjmp	.+6      	; 0x188 <main+0x3e>
			break;
 182:	d2 df       	rcall	.-92     	; 0x128 <ledAllBlink>
			case OFF:
			ledAllOff();
 184:	01 c0       	rjmp	.+2      	; 0x188 <main+0x3e>
 186:	db df       	rcall	.-74     	; 0x13e <ledAllOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	83 ec       	ldi	r24, 0xC3	; 195
 18c:	99 e0       	ldi	r25, 0x09	; 9
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x44>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x4e>
 198:	00 00       	nop
 19a:	df cf       	rjmp	.-66     	; 0x15a <main+0x10>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
