
StandLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800100  00800100  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157b  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1d  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fd  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000164  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 33       	cpi	r26, 0x35	; 53
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6a d1       	rcall	.+724    	; 0x37e <main>
  aa:	6c c1       	rjmp	.+728    	; 0x384 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <StandLight_init>:

uint8_t state;

void StandLight_init()
{
	state = level_0;
  ae:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
	BUTTON_init(&buttonMode,&DDRA,&PINA,0);
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	49 e3       	ldi	r20, 0x39	; 57
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	6a e3       	ldi	r22, 0x3A	; 58
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	8b e1       	ldi	r24, 0x1B	; 27
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	e3 d0       	rcall	.+454    	; 0x288 <BUTTON_init>
	BUTTON_init(&buttonOff,&DDRA,&PINA,1);
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	49 e3       	ldi	r20, 0x39	; 57
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	6a e3       	ldi	r22, 0x3A	; 58
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	db d0       	rcall	.+438    	; 0x288 <BUTTON_init>
	LED_init(&led_0,&DDRD,&PORTD,0);
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	42 e3       	ldi	r20, 0x32	; 50
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	61 e3       	ldi	r22, 0x31	; 49
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	81 e2       	ldi	r24, 0x21	; 33
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	14 d1       	rcall	.+552    	; 0x30a <LED_init>
	LED_init(&led_1,&DDRD,&PORTD,1);
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	42 e3       	ldi	r20, 0x32	; 50
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	61 e3       	ldi	r22, 0x31	; 49
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	8b e2       	ldi	r24, 0x2B	; 43
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0c d1       	rcall	.+536    	; 0x30a <LED_init>
	LED_init(&led_2,&DDRD,&PORTD,2);
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	42 e3       	ldi	r20, 0x32	; 50
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	61 e3       	ldi	r22, 0x31	; 49
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	04 d1       	rcall	.+520    	; 0x30a <LED_init>
	LED_init(&led_3,&DDRD,&PORTD,3);
 102:	23 e0       	ldi	r18, 0x03	; 3
 104:	42 e3       	ldi	r20, 0x32	; 50
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	61 e3       	ldi	r22, 0x31	; 49
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	86 e2       	ldi	r24, 0x26	; 38
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	fc d0       	rcall	.+504    	; 0x30a <LED_init>
	LED_init(&led_4,&DDRD,&PORTD,4);
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	42 e3       	ldi	r20, 0x32	; 50
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	61 e3       	ldi	r22, 0x31	; 49
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	81 e1       	ldi	r24, 0x11	; 17
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	f4 d0       	rcall	.+488    	; 0x30a <LED_init>
	LED_init(&led_5,&DDRD,&PORTD,5);
 122:	25 e0       	ldi	r18, 0x05	; 5
 124:	42 e3       	ldi	r20, 0x32	; 50
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	61 e3       	ldi	r22, 0x31	; 49
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	ec d0       	rcall	.+472    	; 0x30a <LED_init>
	LED_init(&led_6,&DDRD,&PORTD,6);
 132:	26 e0       	ldi	r18, 0x06	; 6
 134:	42 e3       	ldi	r20, 0x32	; 50
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	61 e3       	ldi	r22, 0x31	; 49
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	e4 d0       	rcall	.+456    	; 0x30a <LED_init>
	LED_init(&led_7,&DDRD,&PORTD,7);
 142:	27 e0       	ldi	r18, 0x07	; 7
 144:	42 e3       	ldi	r20, 0x32	; 50
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	61 e3       	ldi	r22, 0x31	; 49
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	86 e1       	ldi	r24, 0x16	; 22
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	dc c0       	rjmp	.+440    	; 0x30a <LED_init>
 152:	08 95       	ret

00000154 <led0>:
 154:	81 e2       	ldi	r24, 0x21	; 33
	}
}

void led0()
{
	LED_OFF(&led_0);
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	ea d0       	rcall	.+468    	; 0x32e <LED_OFF>
	LED_OFF(&led_1);
 15a:	8b e2       	ldi	r24, 0x2B	; 43
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	e7 d0       	rcall	.+462    	; 0x32e <LED_OFF>
	LED_OFF(&led_2);
 160:	8b e0       	ldi	r24, 0x0B	; 11
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	e4 d0       	rcall	.+456    	; 0x32e <LED_OFF>
	LED_OFF(&led_3);
 166:	86 e2       	ldi	r24, 0x26	; 38
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	e1 d0       	rcall	.+450    	; 0x32e <LED_OFF>
	LED_OFF(&led_4);
 16c:	81 e1       	ldi	r24, 0x11	; 17
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	de d0       	rcall	.+444    	; 0x32e <LED_OFF>
	LED_OFF(&led_5);
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	db d0       	rcall	.+438    	; 0x32e <LED_OFF>
	LED_OFF(&led_6);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	d8 d0       	rcall	.+432    	; 0x32e <LED_OFF>
 17e:	86 e1       	ldi	r24, 0x16	; 22
	LED_OFF(&led_7);
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	d5 c0       	rjmp	.+426    	; 0x32e <LED_OFF>
 184:	08 95       	ret

00000186 <led1>:
 186:	81 e2       	ldi	r24, 0x21	; 33
 188:	91 e0       	ldi	r25, 0x01	; 1
}

void led1()
{
	LED_ON(&led_0);
 18a:	e6 d0       	rcall	.+460    	; 0x358 <LED_ON>
	LED_ON(&led_1);
 18c:	8b e2       	ldi	r24, 0x2B	; 43
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	e3 c0       	rjmp	.+454    	; 0x358 <LED_ON>
 192:	08 95       	ret

00000194 <led2>:
}

void led2()
{
	LED_ON(&led_2);
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	df d0       	rcall	.+446    	; 0x358 <LED_ON>
	LED_ON(&led_3);
 19a:	86 e2       	ldi	r24, 0x26	; 38
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	dc c0       	rjmp	.+440    	; 0x358 <LED_ON>
 1a0:	08 95       	ret

000001a2 <led3>:
}

void led3()
{
	LED_ON(&led_4);
 1a2:	81 e1       	ldi	r24, 0x11	; 17
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	d8 d0       	rcall	.+432    	; 0x358 <LED_ON>
	LED_ON(&led_5);
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	d5 c0       	rjmp	.+426    	; 0x358 <LED_ON>
 1ae:	08 95       	ret

000001b0 <led4>:
}

void led4()
{
	LED_ON(&led_6);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	d1 d0       	rcall	.+418    	; 0x358 <LED_ON>
	LED_ON(&led_7);
 1b6:	86 e1       	ldi	r24, 0x16	; 22
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	ce c0       	rjmp	.+412    	; 0x358 <LED_ON>
 1bc:	08 95       	ret

000001be <StandLight_execute>:
	LED_init(&led_7,&DDRD,&PORTD,7);
}

void StandLight_execute()
{
	switch(state)
 1be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	61 f1       	breq	.+88     	; 0x21e <StandLight_execute+0x60>
 1c6:	28 f4       	brcc	.+10     	; 0x1d2 <StandLight_execute+0x14>
 1c8:	88 23       	and	r24, r24
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <StandLight_execute+0x22>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	a1 f0       	breq	.+40     	; 0x1f8 <StandLight_execute+0x3a>
 1d0:	08 95       	ret
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <StandLight_execute+0x1a>
 1d6:	35 c0       	rjmp	.+106    	; 0x242 <StandLight_execute+0x84>
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	09 f4       	brne	.+2      	; 0x1de <StandLight_execute+0x20>
 1dc:	44 c0       	rjmp	.+136    	; 0x266 <StandLight_execute+0xa8>
 1de:	08 95       	ret
	{
		case level_0:
		led0();
 1e0:	b9 df       	rcall	.-142    	; 0x154 <led0>
		if (BUTTON_GETSTATE(&buttonMode) == ACT_REALESED)
 1e2:	8b e1       	ldi	r24, 0x1B	; 27
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	65 d0       	rcall	.+202    	; 0x2b2 <BUTTON_GETSTATE>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	09 f0       	breq	.+2      	; 0x1ee <StandLight_execute+0x30>
		{
			led1();
 1ec:	4c c0       	rjmp	.+152    	; 0x286 <StandLight_execute+0xc8>
 1ee:	cb df       	rcall	.-106    	; 0x186 <led1>
			state = level_1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
		}
		break;
		case level_1:
		if (BUTTON_GETSTATE(&buttonMode) == ACT_REALESED)
 1f6:	08 95       	ret
 1f8:	8b e1       	ldi	r24, 0x1B	; 27
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	5a d0       	rcall	.+180    	; 0x2b2 <BUTTON_GETSTATE>
 1fe:	82 30       	cpi	r24, 0x02	; 2
		{
			led2();
 200:	21 f4       	brne	.+8      	; 0x20a <StandLight_execute+0x4c>
 202:	c8 df       	rcall	.-112    	; 0x194 <led2>
			state = level_2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
		}
		if (BUTTON_GETSTATE(&buttonOff) == ACT_REALESED)
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	51 d0       	rcall	.+162    	; 0x2b2 <BUTTON_GETSTATE>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f0       	breq	.+2      	; 0x216 <StandLight_execute+0x58>
		{
			led0();
 214:	38 c0       	rjmp	.+112    	; 0x286 <StandLight_execute+0xc8>
			state = level_0;
 216:	9e df       	rcall	.-196    	; 0x154 <led0>
 218:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		break;
		case level_2:
		if (BUTTON_GETSTATE(&buttonMode) == ACT_REALESED)
 21c:	08 95       	ret
 21e:	8b e1       	ldi	r24, 0x1B	; 27
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	47 d0       	rcall	.+142    	; 0x2b2 <BUTTON_GETSTATE>
		{
			led3();
 224:	82 30       	cpi	r24, 0x02	; 2
			state = level_3;
 226:	21 f4       	brne	.+8      	; 0x230 <StandLight_execute+0x72>
 228:	bc df       	rcall	.-136    	; 0x1a2 <led3>
 22a:	83 e0       	ldi	r24, 0x03	; 3
		}
		if (BUTTON_GETSTATE(&buttonOff) == ACT_REALESED)
 22c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	3e d0       	rcall	.+124    	; 0x2b2 <BUTTON_GETSTATE>
		{
			led0();
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	31 f5       	brne	.+76     	; 0x286 <StandLight_execute+0xc8>
			state = level_0;
 23a:	8c df       	rcall	.-232    	; 0x154 <led0>
 23c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		break;
		case level_3:
		if (BUTTON_GETSTATE(&buttonMode) == ACT_REALESED)
 240:	08 95       	ret
 242:	8b e1       	ldi	r24, 0x1B	; 27
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	35 d0       	rcall	.+106    	; 0x2b2 <BUTTON_GETSTATE>
		{
			led4();
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	21 f4       	brne	.+8      	; 0x254 <StandLight_execute+0x96>
			state = level_4;
 24c:	b1 df       	rcall	.-158    	; 0x1b0 <led4>
 24e:	84 e0       	ldi	r24, 0x04	; 4
		}
		if (BUTTON_GETSTATE(&buttonOff) == ACT_REALESED)
 250:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	2c d0       	rcall	.+88     	; 0x2b2 <BUTTON_GETSTATE>
		{
			led0();
 25a:	82 30       	cpi	r24, 0x02	; 2
			state = level_0;
 25c:	a1 f4       	brne	.+40     	; 0x286 <StandLight_execute+0xc8>
 25e:	7a df       	rcall	.-268    	; 0x154 <led0>
		}
		break;
		case level_4:
		if (BUTTON_GETSTATE(&buttonMode) == ACT_REALESED)
 260:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 264:	08 95       	ret
 266:	8b e1       	ldi	r24, 0x1B	; 27
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	23 d0       	rcall	.+70     	; 0x2b2 <BUTTON_GETSTATE>
		{
			led0();
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	19 f4       	brne	.+6      	; 0x276 <StandLight_execute+0xb8>
			state = level_0;
 270:	71 df       	rcall	.-286    	; 0x154 <led0>
 272:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		if (BUTTON_GETSTATE(&buttonOff) == ACT_REALESED)
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	1b d0       	rcall	.+54     	; 0x2b2 <BUTTON_GETSTATE>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	19 f4       	brne	.+6      	; 0x286 <StandLight_execute+0xc8>
		{
			led0();
 280:	69 df       	rcall	.-302    	; 0x154 <led0>
 282:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
			state = level_0;
 286:	08 95       	ret

00000288 <BUTTON_init>:
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 288:	fc 01       	movw	r30, r24
	btn ->DDR = ddr;
 28a:	71 83       	std	Z+1, r23	; 0x01
 28c:	60 83       	st	Z, r22
	btn ->PIN = pin;
 28e:	53 83       	std	Z+3, r21	; 0x03
 290:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 292:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	85 83       	std	Z+5, r24	; 0x05
	*(btn->DDR) &= ~(1<<btn->PinNum);
 298:	fb 01       	movw	r30, r22
 29a:	30 81       	ld	r19, Z
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <BUTTON_init+0x1e>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	2a 95       	dec	r18
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <BUTTON_init+0x1a>
 2aa:	80 95       	com	r24
 2ac:	83 23       	and	r24, r19
 2ae:	80 83       	st	Z, r24
 2b0:	08 95       	ret

000002b2 <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{
 2b2:	fc 01       	movw	r30, r24
	uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
 2b4:	a2 81       	ldd	r26, Z+2	; 0x02
 2b6:	b3 81       	ldd	r27, Z+3	; 0x03
 2b8:	8c 91       	ld	r24, X
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	04 80       	ldd	r0, Z+4	; 0x04
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <BUTTON_GETSTATE+0x14>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <BUTTON_GETSTATE+0x10>
 2ca:	28 23       	and	r18, r24
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <BUTTON_GETSTATE+0x32>
 2ce:	85 81       	ldd	r24, Z+5	; 0x05
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <BUTTON_GETSTATE+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	af e3       	ldi	r26, 0x3F	; 63
 2d6:	bc e9       	ldi	r27, 0x9C	; 156
 2d8:	11 97       	sbiw	r26, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <BUTTON_GETSTATE+0x26>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <BUTTON_GETSTATE+0x2c>
 2de:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 2e0:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED; 
 2e2:	08 95       	ret
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 2e4:	22 23       	and	r18, r18
 2e6:	69 f0       	breq	.+26     	; 0x302 <BUTTON_GETSTATE+0x50>
 2e8:	85 81       	ldd	r24, Z+5	; 0x05
 2ea:	81 11       	cpse	r24, r1
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <BUTTON_GETSTATE+0x54>
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	9c e9       	ldi	r25, 0x9C	; 156
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <BUTTON_GETSTATE+0x40>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <BUTTON_GETSTATE+0x46>
 2f8:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	85 83       	std	Z+5, r24	; 0x05
		return ACT_REALESED;
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	08 95       	ret
	}
	return ACT_NONE;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret

0000030a <LED_init>:
﻿#include "Led.h"

void LED_init(led_t *led, volatile uint8_t *ddr, volatile uint8_t *port, uint8_t pinNum)
{
 30a:	fc 01       	movw	r30, r24
	led -> DDR = ddr;
 30c:	71 83       	std	Z+1, r23	; 0x01
 30e:	60 83       	st	Z, r22
	led -> PORT = port;
 310:	53 83       	std	Z+3, r21	; 0x03
 312:	42 83       	std	Z+2, r20	; 0x02
	led -> PinNum = pinNum;
 314:	24 83       	std	Z+4, r18	; 0x04
	*(led -> DDR) |= (1<<led ->PinNum);
 316:	fb 01       	movw	r30, r22
 318:	30 81       	ld	r19, Z
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <LED_init+0x1a>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	2a 95       	dec	r18
 326:	e2 f7       	brpl	.-8      	; 0x320 <LED_init+0x16>
 328:	83 2b       	or	r24, r19
 32a:	80 83       	st	Z, r24
 32c:	08 95       	ret

0000032e <LED_OFF>:
}

void LED_OFF(led_t *led)
{
	*(led -> PORT) &= ~(1<< led -> PinNum);
 32e:	dc 01       	movw	r26, r24
 330:	12 96       	adiw	r26, 0x02	; 2
 332:	ed 91       	ld	r30, X+
 334:	fc 91       	ld	r31, X
 336:	13 97       	sbiw	r26, 0x03	; 3
 338:	40 81       	ld	r20, Z
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	14 96       	adiw	r26, 0x04	; 4
 342:	0c 90       	ld	r0, X
 344:	02 c0       	rjmp	.+4      	; 0x34a <LED_OFF+0x1c>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <LED_OFF+0x18>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	80 83       	st	Z, r24
 356:	08 95       	ret

00000358 <LED_ON>:
}

void LED_ON(led_t *led)
{
 358:	dc 01       	movw	r26, r24
	*(led -> PORT) |= 1<< led -> PinNum;
 35a:	12 96       	adiw	r26, 0x02	; 2
 35c:	ed 91       	ld	r30, X+
 35e:	fc 91       	ld	r31, X
 360:	13 97       	sbiw	r26, 0x03	; 3
 362:	40 81       	ld	r20, Z
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	c9 01       	movw	r24, r18
 36a:	14 96       	adiw	r26, 0x04	; 4
 36c:	0c 90       	ld	r0, X
 36e:	02 c0       	rjmp	.+4      	; 0x374 <LED_ON+0x1c>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <LED_ON+0x18>
 378:	84 2b       	or	r24, r20
 37a:	80 83       	st	Z, r24
 37c:	08 95       	ret

0000037e <main>:
#include <util/delay.h>
#include "ap/Standlight/StandLight.h"

int main(void)
{
    StandLight_init();
 37e:	97 de       	rcall	.-722    	; 0xae <StandLight_init>
    while (1) 
    {
		StandLight_execute();
 380:	1e df       	rcall	.-452    	; 0x1be <StandLight_execute>
 382:	fe cf       	rjmp	.-4      	; 0x380 <main+0x2>

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
