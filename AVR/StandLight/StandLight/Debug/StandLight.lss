
StandLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800100  00800100  0000042a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ba  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3c  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f8  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000034c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000401  00000000  00000000  00003d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 33       	cpi	r26, 0x35	; 53
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3a d1       	rcall	.+628    	; 0x31e <main>
  aa:	83 c1       	rjmp	.+774    	; 0x3b2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <StandLight_init>:

uint8_t state;

void StandLight_init()
{
	state = level_0;
  ae:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
	BUTTON_init(&buttonMode,&BUTTON_DDR,&BUTTON_PIN,0);
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	49 e3       	ldi	r20, 0x39	; 57
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	6a e3       	ldi	r22, 0x3A	; 58
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	8b e1       	ldi	r24, 0x1B	; 27
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	e2 d0       	rcall	.+452    	; 0x286 <BUTTON_init>
	BUTTON_init(&buttonOff,&BUTTON_DDR,&BUTTON_PIN,1);
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	49 e3       	ldi	r20, 0x39	; 57
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	6a e3       	ldi	r22, 0x3A	; 58
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	da d0       	rcall	.+436    	; 0x286 <BUTTON_init>
	LED_init(&led_0,&LED_DDR,&LED_PORT,0);
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	42 e3       	ldi	r20, 0x32	; 50
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	61 e3       	ldi	r22, 0x31	; 49
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	81 e2       	ldi	r24, 0x21	; 33
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	09 d1       	rcall	.+530    	; 0x2f4 <LED_init>
	LED_init(&led_1,&LED_DDR,&LED_PORT,1);
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	42 e3       	ldi	r20, 0x32	; 50
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	61 e3       	ldi	r22, 0x31	; 49
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	8b e2       	ldi	r24, 0x2B	; 43
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 d1       	rcall	.+514    	; 0x2f4 <LED_init>
	LED_init(&led_2,&LED_DDR,&LED_PORT,2);
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	42 e3       	ldi	r20, 0x32	; 50
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	61 e3       	ldi	r22, 0x31	; 49
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	f9 d0       	rcall	.+498    	; 0x2f4 <LED_init>
	LED_init(&led_3,&LED_DDR,&LED_PORT,3);
 102:	23 e0       	ldi	r18, 0x03	; 3
 104:	42 e3       	ldi	r20, 0x32	; 50
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	61 e3       	ldi	r22, 0x31	; 49
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	86 e2       	ldi	r24, 0x26	; 38
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	f1 d0       	rcall	.+482    	; 0x2f4 <LED_init>
	LED_init(&led_4,&LED_DDR,&LED_PORT,4);
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	42 e3       	ldi	r20, 0x32	; 50
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	61 e3       	ldi	r22, 0x31	; 49
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	81 e1       	ldi	r24, 0x11	; 17
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	e9 d0       	rcall	.+466    	; 0x2f4 <LED_init>
	LED_init(&led_5,&LED_DDR,&LED_PORT,5);
 122:	25 e0       	ldi	r18, 0x05	; 5
 124:	42 e3       	ldi	r20, 0x32	; 50
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	61 e3       	ldi	r22, 0x31	; 49
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	e1 d0       	rcall	.+450    	; 0x2f4 <LED_init>
	LED_init(&led_6,&LED_DDR,&LED_PORT,6);
 132:	26 e0       	ldi	r18, 0x06	; 6
 134:	42 e3       	ldi	r20, 0x32	; 50
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	61 e3       	ldi	r22, 0x31	; 49
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	d9 d0       	rcall	.+434    	; 0x2f4 <LED_init>
	LED_init(&led_7,&LED_DDR,&LED_PORT,7);
 142:	27 e0       	ldi	r18, 0x07	; 7
 144:	42 e3       	ldi	r20, 0x32	; 50
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	61 e3       	ldi	r22, 0x31	; 49
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	86 e1       	ldi	r24, 0x16	; 22
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	d1 c0       	rjmp	.+418    	; 0x2f4 <LED_init>
 152:	08 95       	ret

00000154 <StandLight_eventCheck>:
 154:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
	
	StandLight_execute();
}
void StandLight_eventCheck()
{
	switch(state)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	31 f1       	breq	.+76     	; 0x1a8 <StandLight_eventCheck+0x54>
 15c:	28 f4       	brcc	.+10     	; 0x168 <StandLight_eventCheck+0x14>
 15e:	88 23       	and	r24, r24
 160:	49 f0       	breq	.+18     	; 0x174 <StandLight_eventCheck+0x20>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	89 f0       	breq	.+34     	; 0x188 <StandLight_eventCheck+0x34>
 166:	08 95       	ret
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	79 f1       	breq	.+94     	; 0x1ca <StandLight_eventCheck+0x76>
 16c:	84 30       	cpi	r24, 0x04	; 4
 16e:	09 f4       	brne	.+2      	; 0x172 <StandLight_eventCheck+0x1e>
 170:	3d c0       	rjmp	.+122    	; 0x1ec <StandLight_eventCheck+0x98>
 172:	08 95       	ret
	{
		case level_0:
		if (BUTTON_GETSTATE(&buttonMode) ==ACT_REALESED)
 174:	8b e1       	ldi	r24, 0x1B	; 27
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	93 d0       	rcall	.+294    	; 0x2a0 <BUTTON_GETSTATE>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	09 f0       	breq	.+2      	; 0x180 <StandLight_eventCheck+0x2c>
 17e:	45 c0       	rjmp	.+138    	; 0x20a <StandLight_eventCheck+0xb6>
		{
			state = level_1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 186:	08 95       	ret
		}
		break;
		case level_1:
		if (BUTTON_GETSTATE(&buttonMode) ==ACT_REALESED)
 188:	8b e1       	ldi	r24, 0x1B	; 27
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	89 d0       	rcall	.+274    	; 0x2a0 <BUTTON_GETSTATE>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	19 f4       	brne	.+6      	; 0x198 <StandLight_eventCheck+0x44>
		{
			state = level_2;
 192:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 196:	08 95       	ret
		}
		else if (BUTTON_GETSTATE(&buttonOff) ==ACT_REALESED)
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	81 d0       	rcall	.+258    	; 0x2a0 <BUTTON_GETSTATE>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	a1 f5       	brne	.+104    	; 0x20a <StandLight_eventCheck+0xb6>
		{
			state = level_0;
 1a2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		break;
		case level_2:
		if (BUTTON_GETSTATE(&buttonMode) ==ACT_REALESED)
 1a6:	08 95       	ret
 1a8:	8b e1       	ldi	r24, 0x1B	; 27
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	79 d0       	rcall	.+242    	; 0x2a0 <BUTTON_GETSTATE>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	21 f4       	brne	.+8      	; 0x1ba <StandLight_eventCheck+0x66>
		{
			state = level_3;
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
		}
		else if (BUTTON_GETSTATE(&buttonOff) ==ACT_REALESED)
 1b8:	08 95       	ret
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	70 d0       	rcall	.+224    	; 0x2a0 <BUTTON_GETSTATE>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	19 f5       	brne	.+70     	; 0x20a <StandLight_eventCheck+0xb6>
		{
			state = level_0;
 1c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		break;
		case level_3:
		if (BUTTON_GETSTATE(&buttonMode) ==ACT_REALESED)
 1c8:	08 95       	ret
 1ca:	8b e1       	ldi	r24, 0x1B	; 27
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	68 d0       	rcall	.+208    	; 0x2a0 <BUTTON_GETSTATE>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	21 f4       	brne	.+8      	; 0x1dc <StandLight_eventCheck+0x88>
		{
			state = level_4;
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
		}
		else if (BUTTON_GETSTATE(&buttonOff) ==ACT_REALESED)
 1da:	08 95       	ret
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	5f d0       	rcall	.+190    	; 0x2a0 <BUTTON_GETSTATE>
 1e2:	82 30       	cpi	r24, 0x02	; 2
		{
			state = level_0;
 1e4:	91 f4       	brne	.+36     	; 0x20a <StandLight_eventCheck+0xb6>
 1e6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		break;
		case level_4:
		if (BUTTON_GETSTATE(&buttonMode) ==ACT_REALESED)
 1ea:	08 95       	ret
 1ec:	8b e1       	ldi	r24, 0x1B	; 27
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	57 d0       	rcall	.+174    	; 0x2a0 <BUTTON_GETSTATE>
 1f2:	82 30       	cpi	r24, 0x02	; 2
		{
			state = level_0;
 1f4:	19 f4       	brne	.+6      	; 0x1fc <StandLight_eventCheck+0xa8>
 1f6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
		}
		else if (BUTTON_GETSTATE(&buttonOff) ==ACT_REALESED)
 1fa:	08 95       	ret
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	4f d0       	rcall	.+158    	; 0x2a0 <BUTTON_GETSTATE>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	11 f4       	brne	.+4      	; 0x20a <StandLight_eventCheck+0xb6>
		{
			state = level_0;
 206:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 20a:	08 95       	ret

0000020c <led0>:
	}
}

void led0()
{
	LED_ALLOFF(&LED_PORT);
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	83 c0       	rjmp	.+262    	; 0x318 <LED_ALLOFF>
 212:	08 95       	ret

00000214 <led1>:
}

void led1()
{
	LED_ON(&led_0);
 214:	81 e2       	ldi	r24, 0x21	; 33
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	78 d0       	rcall	.+240    	; 0x30a <LED_ON>
	LED_ON(&led_1);
 21a:	8b e2       	ldi	r24, 0x2B	; 43
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	75 c0       	rjmp	.+234    	; 0x30a <LED_ON>
 220:	08 95       	ret

00000222 <led2>:
}

void led2()
{
	LED_ON(&led_2);
 222:	8b e0       	ldi	r24, 0x0B	; 11
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	71 d0       	rcall	.+226    	; 0x30a <LED_ON>
	LED_ON(&led_3);
 228:	86 e2       	ldi	r24, 0x26	; 38
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	6e c0       	rjmp	.+220    	; 0x30a <LED_ON>
 22e:	08 95       	ret

00000230 <led3>:
}

void led3()
{
	LED_ON(&led_4);
 230:	81 e1       	ldi	r24, 0x11	; 17
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	6a d0       	rcall	.+212    	; 0x30a <LED_ON>
	LED_ON(&led_5);
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	67 c0       	rjmp	.+206    	; 0x30a <LED_ON>
 23c:	08 95       	ret

0000023e <led4>:
}

void led4()
{
	LED_ON(&led_6);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	63 d0       	rcall	.+198    	; 0x30a <LED_ON>
	LED_ON(&led_7);
 244:	86 e1       	ldi	r24, 0x16	; 22
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	60 c0       	rjmp	.+192    	; 0x30a <LED_ON>
 24a:	08 95       	ret

0000024c <StandLight_execute>:
	}
}

void StandLight_execute()
{
	if (state == level_0)
 24c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 250:	81 11       	cpse	r24, r1
 252:	01 c0       	rjmp	.+2      	; 0x256 <StandLight_execute+0xa>
	{
		led0();
 254:	db df       	rcall	.-74     	; 0x20c <led0>
	}
	if (state == level_1)
 256:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 25a:	81 30       	cpi	r24, 0x01	; 1
	{
		led1();
 25c:	09 f4       	brne	.+2      	; 0x260 <StandLight_execute+0x14>
 25e:	da df       	rcall	.-76     	; 0x214 <led1>
	}
	if (state == level_2)
 260:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 264:	82 30       	cpi	r24, 0x02	; 2
	{
		led2();
 266:	09 f4       	brne	.+2      	; 0x26a <StandLight_execute+0x1e>
 268:	dc df       	rcall	.-72     	; 0x222 <led2>
	}
	if (state == level_3)
 26a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 26e:	83 30       	cpi	r24, 0x03	; 3
	{
		led3();
 270:	09 f4       	brne	.+2      	; 0x274 <StandLight_execute+0x28>
 272:	de df       	rcall	.-68     	; 0x230 <led3>
	}
	if (state == level_4)
 274:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 278:	84 30       	cpi	r24, 0x04	; 4
	{
		led4();
 27a:	09 f4       	brne	.+2      	; 0x27e <StandLight_execute+0x32>
 27c:	e0 cf       	rjmp	.-64     	; 0x23e <led4>
 27e:	08 95       	ret

00000280 <StandLight_run>:
	//}
//}

void StandLight_run()
{
	StandLight_eventCheck();
 280:	69 df       	rcall	.-302    	; 0x154 <StandLight_eventCheck>
	
	StandLight_execute();
 282:	e4 cf       	rjmp	.-56     	; 0x24c <StandLight_execute>
 284:	08 95       	ret

00000286 <BUTTON_init>:
 286:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 288:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 28a:	71 83       	std	Z+1, r23	; 0x01
 28c:	60 83       	st	Z, r22
	btn ->PIN = pin;
 28e:	53 83       	std	Z+3, r21	; 0x03
 290:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 292:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 294:	31 e0       	ldi	r19, 0x01	; 1
 296:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
 298:	42 2f       	mov	r20, r18
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	43 c0       	rjmp	.+134    	; 0x324 <Gpio_initPin>
 29e:	08 95       	ret

000002a0 <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
 2a6:	6c 81       	ldd	r22, Y+4	; 0x04
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	78 d0       	rcall	.+240    	; 0x39e <Gpio_ReadPin>
 2ae:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 2b0:	81 11       	cpse	r24, r1
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <BUTTON_GETSTATE+0x2a>
 2b4:	8d 81       	ldd	r24, Y+5	; 0x05
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	41 f4       	brne	.+16     	; 0x2ca <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	ef e3       	ldi	r30, 0x3F	; 63
 2bc:	fc e9       	ldi	r31, 0x9C	; 156
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <BUTTON_GETSTATE+0x1e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <BUTTON_GETSTATE+0x24>
 2c4:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 2c6:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
 2c8:	12 c0       	rjmp	.+36     	; 0x2ee <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 2ca:	99 23       	and	r25, r25
 2cc:	69 f0       	breq	.+26     	; 0x2e8 <BUTTON_GETSTATE+0x48>
 2ce:	8d 81       	ldd	r24, Y+5	; 0x05
 2d0:	81 11       	cpse	r24, r1
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <BUTTON_GETSTATE+0x4c>
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9c e9       	ldi	r25, 0x9C	; 156
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <BUTTON_GETSTATE+0x38>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <BUTTON_GETSTATE+0x3e>
 2de:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <BUTTON_GETSTATE+0x4e>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <LED_init>:
	Gpio_initPin(led->DDR, OUTPUT, led ->PinNum);
}

void LED_OFF(led_t *led)
{
	Gpio_WritePin(led->PORT,led->PinNum,GPIO_RESET);
 2f4:	fc 01       	movw	r30, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	71 83       	std	Z+1, r23	; 0x01
 2fa:	60 83       	st	Z, r22
 2fc:	53 83       	std	Z+3, r21	; 0x03
 2fe:	42 83       	std	Z+2, r20	; 0x02
 300:	24 83       	std	Z+4, r18	; 0x04
 302:	42 2f       	mov	r20, r18
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	0e c0       	rjmp	.+28     	; 0x324 <Gpio_initPin>
 308:	08 95       	ret

0000030a <LED_ON>:
}

void LED_ON(led_t *led)
{
	Gpio_WritePin(led->PORT,led->PinNum,GPIO_SET);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	fc 01       	movw	r30, r24
 30e:	64 81       	ldd	r22, Z+4	; 0x04
 310:	82 81       	ldd	r24, Z+2	; 0x02
 312:	93 81       	ldd	r25, Z+3	; 0x03
 314:	27 c0       	rjmp	.+78     	; 0x364 <Gpio_WritePin>
 316:	08 95       	ret

00000318 <LED_ALLOFF>:
}

void LED_ALLOFF(volatile uint8_t *PORT)
{
	Gpio_WritePort(PORT,0x00);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	21 c0       	rjmp	.+66     	; 0x35e <Gpio_WritePort>
 31c:	08 95       	ret

0000031e <main>:
#include "ap/Standlight/StandLight.h"
#include "periph/GPIO/GPIO.h"

int main(void)
{
    StandLight_init();
 31e:	c7 de       	rcall	.-626    	; 0xae <StandLight_init>
	
    while (1) 
    {
		//StandLight_execute();
		StandLight_run();
 320:	af df       	rcall	.-162    	; 0x280 <StandLight_run>
 322:	fe cf       	rjmp	.-4      	; 0x320 <main+0x2>

00000324 <Gpio_initPin>:
 324:	61 30       	cpi	r22, 0x01	; 1
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 326:	61 f4       	brne	.+24     	; 0x340 <Gpio_initPin+0x1c>
 328:	fc 01       	movw	r30, r24
 32a:	50 81       	ld	r21, Z
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	04 2e       	mov	r0, r20
 332:	02 c0       	rjmp	.+4      	; 0x338 <Gpio_initPin+0x14>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <Gpio_initPin+0x10>
 33c:	25 2b       	or	r18, r21
 33e:	20 83       	st	Z, r18
 340:	61 11       	cpse	r22, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <Gpio_initPin+0x38>
 344:	fc 01       	movw	r30, r24
 346:	50 81       	ld	r21, Z
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <Gpio_initPin+0x2e>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	4a 95       	dec	r20
 354:	e2 f7       	brpl	.-8      	; 0x34e <Gpio_initPin+0x2a>
 356:	20 95       	com	r18
 358:	25 23       	and	r18, r21
 35a:	20 83       	st	Z, r18
 35c:	08 95       	ret

0000035e <Gpio_WritePort>:
 35e:	fc 01       	movw	r30, r24
 360:	60 83       	st	Z, r22
 362:	08 95       	ret

00000364 <Gpio_WritePin>:
 364:	41 11       	cpse	r20, r1
 366:	0d c0       	rjmp	.+26     	; 0x382 <Gpio_WritePin+0x1e>
 368:	fc 01       	movw	r30, r24
 36a:	50 81       	ld	r21, Z
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	06 2e       	mov	r0, r22
 372:	02 c0       	rjmp	.+4      	; 0x378 <Gpio_WritePin+0x14>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <Gpio_WritePin+0x10>
 37c:	20 95       	com	r18
 37e:	25 23       	and	r18, r21
 380:	20 83       	st	Z, r18
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	59 f4       	brne	.+22     	; 0x39c <Gpio_WritePin+0x38>
 386:	fc 01       	movw	r30, r24
 388:	40 81       	ld	r20, Z
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <Gpio_WritePin+0x30>
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <Gpio_WritePin+0x2c>
 398:	24 2b       	or	r18, r20
 39a:	20 83       	st	Z, r18
 39c:	08 95       	ret

0000039e <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <Gpio_ReadPin+0xc>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
 3ae:	81 70       	andi	r24, 0x01	; 1
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
