
ClockMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001252  000012e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800140  00800140  00001326  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002585  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6f  00000000  00000000  00003b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e8  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00005ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092a  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008be  00000000  00000000  000069be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000727c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
       2:	00 00       	nop
       4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
       6:	00 00       	nop
       8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
       a:	00 00       	nop
       c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
       e:	00 00       	nop
      10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
      12:	00 00       	nop
      14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
      16:	00 00       	nop
      18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
      1a:	00 00       	nop
      1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
      1e:	00 00       	nop
      20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c5       	rjmp	.+2842   	; 0xb40 <__vector_9>
      26:	00 00       	nop
      28:	62 c0       	rjmp	.+196    	; 0xee <__bad_interrupt>
      2a:	00 00       	nop
      2c:	60 c0       	rjmp	.+192    	; 0xee <__bad_interrupt>
      2e:	00 00       	nop
      30:	5e c0       	rjmp	.+188    	; 0xee <__bad_interrupt>
      32:	00 00       	nop
      34:	5c c0       	rjmp	.+184    	; 0xee <__bad_interrupt>
      36:	00 00       	nop
      38:	5a c0       	rjmp	.+180    	; 0xee <__bad_interrupt>
      3a:	00 00       	nop
      3c:	58 c0       	rjmp	.+176    	; 0xee <__bad_interrupt>
      3e:	00 00       	nop
      40:	56 c0       	rjmp	.+172    	; 0xee <__bad_interrupt>
      42:	00 00       	nop
      44:	54 c0       	rjmp	.+168    	; 0xee <__bad_interrupt>
      46:	00 00       	nop
      48:	52 c0       	rjmp	.+164    	; 0xee <__bad_interrupt>
      4a:	00 00       	nop
      4c:	50 c0       	rjmp	.+160    	; 0xee <__bad_interrupt>
      4e:	00 00       	nop
      50:	4e c0       	rjmp	.+156    	; 0xee <__bad_interrupt>
      52:	00 00       	nop
      54:	4c c0       	rjmp	.+152    	; 0xee <__bad_interrupt>
      56:	00 00       	nop
      58:	4a c0       	rjmp	.+148    	; 0xee <__bad_interrupt>
      5a:	00 00       	nop
      5c:	48 c0       	rjmp	.+144    	; 0xee <__bad_interrupt>
      5e:	00 00       	nop
      60:	46 c0       	rjmp	.+140    	; 0xee <__bad_interrupt>
      62:	00 00       	nop
      64:	44 c0       	rjmp	.+136    	; 0xee <__bad_interrupt>
      66:	00 00       	nop
      68:	42 c0       	rjmp	.+132    	; 0xee <__bad_interrupt>
      6a:	00 00       	nop
      6c:	40 c0       	rjmp	.+128    	; 0xee <__bad_interrupt>
      6e:	00 00       	nop
      70:	3e c0       	rjmp	.+124    	; 0xee <__bad_interrupt>
      72:	00 00       	nop
      74:	3c c0       	rjmp	.+120    	; 0xee <__bad_interrupt>
      76:	00 00       	nop
      78:	3a c0       	rjmp	.+116    	; 0xee <__bad_interrupt>
      7a:	00 00       	nop
      7c:	38 c0       	rjmp	.+112    	; 0xee <__bad_interrupt>
      7e:	00 00       	nop
      80:	36 c0       	rjmp	.+108    	; 0xee <__bad_interrupt>
      82:	00 00       	nop
      84:	34 c0       	rjmp	.+104    	; 0xee <__bad_interrupt>
      86:	00 00       	nop
      88:	32 c0       	rjmp	.+100    	; 0xee <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ff 01       	movw	r30, r30
      8e:	10 02       	muls	r17, r16
      90:	35 02       	muls	r19, r21
      92:	51 02       	muls	r21, r17
      94:	62 02       	muls	r22, r18
      96:	66 02       	muls	r22, r22
      98:	6a 02       	muls	r22, r26
      9a:	92 02       	muls	r25, r18
      9c:	e6 02       	muls	r30, r22
      9e:	c6 02       	muls	r28, r22
      a0:	ff 02       	muls	r31, r31
      a2:	2f 03       	fmul	r18, r23
      a4:	5c 03       	fmul	r21, r20
      a6:	8c 03       	fmulsu	r16, r20
      a8:	b7 03       	fmuls	r19, r23
      aa:	68 04       	cpc	r6, r8
      ac:	c2 03       	fmuls	r20, r18
      ae:	e7 03       	fmuls	r22, r23
      b0:	0c 04       	cpc	r0, r12

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf ef       	ldi	r28, 0xFF	; 255
      b8:	d0 e1       	ldi	r29, 0x10	; 16
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e2 e5       	ldi	r30, 0x52	; 82
      c6:	f2 e1       	ldi	r31, 0x12	; 18
      c8:	00 e0       	ldi	r16, 0x00	; 0
      ca:	0b bf       	out	0x3b, r16	; 59
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x14>
      ce:	07 90       	elpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	a0 34       	cpi	r26, 0x40	; 64
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0x10>

000000d8 <__do_clear_bss>:
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	a0 e4       	ldi	r26, 0x40	; 64
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a6 39       	cpi	r26, 0x96	; 150
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	55 d5       	rcall	.+2730   	; 0xb94 <main>
      ea:	0c 94 27 09 	jmp	0x124e	; 0x124e <_exit>

000000ee <__bad_interrupt>:
      ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <ClockMachine_init>:
led_t led0,led1,led2,led3,led4,led5,led6,led7;
btn_t btnMode, btn2, btn3, btn4;

void ClockMachine_init()
{
	milisec = 0;
      f0:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <milisec+0x1>
      f4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <milisec>
	sec = 0;
      f8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <sec>
	min = 0;
      fc:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <min>
	hour = 0;
     100:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <hour>
	stopWatchmilisec = 0;
     104:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <stopWatchmilisec+0x1>
     108:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <stopWatchmilisec>
	stopWatchsec = 0;
     10c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <stopWatchsec>
	stopWatchmin = 0;
     110:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stopWatchmin>
	stopWatchhour = 0;
     114:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <stopWatchhour>
	timerhour = 0;
     118:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timerhour>
	timermin = 0;
     11c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <timermin>
	timersec = 0;
     120:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
	timermilisec = 0;
     124:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <timermilisec+0x1>
     128:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <timermilisec>
	state = CLOCK_NORMAL;
     12c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <state>
	FND_init();
     130:	14 d4       	rcall	.+2088   	; 0x95a <FND_init>
	LCD_init();
     132:	62 d4       	rcall	.+2244   	; 0x9f8 <LCD_init>
	//TIM0_OVF_init();
	TIM2_CTC_init();
     134:	66 d5       	rcall	.+2764   	; 0xc02 <TIM2_CTC_init>
     136:	20 e0       	ldi	r18, 0x00	; 0
	Led_init(&led0,&DDRD,&PORTD,0);
     138:	42 e3       	ldi	r20, 0x32	; 50
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	61 e3       	ldi	r22, 0x31	; 49
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	8e e6       	ldi	r24, 0x6E	; 110
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	c3 d4       	rcall	.+2438   	; 0xacc <Led_init>
     146:	21 e0       	ldi	r18, 0x01	; 1
	Led_init(&led1,&DDRD,&PORTD,1);
     148:	42 e3       	ldi	r20, 0x32	; 50
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	61 e3       	ldi	r22, 0x31	; 49
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	80 e5       	ldi	r24, 0x50	; 80
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	bb d4       	rcall	.+2422   	; 0xacc <Led_init>
     156:	22 e0       	ldi	r18, 0x02	; 2
	Led_init(&led2,&DDRD,&PORTD,2);
     158:	42 e3       	ldi	r20, 0x32	; 50
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	61 e3       	ldi	r22, 0x31	; 49
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	80 e9       	ldi	r24, 0x90	; 144
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	b3 d4       	rcall	.+2406   	; 0xacc <Led_init>
     166:	23 e0       	ldi	r18, 0x03	; 3
	Led_init(&led3,&DDRD,&PORTD,3);
     168:	42 e3       	ldi	r20, 0x32	; 50
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	61 e3       	ldi	r22, 0x31	; 49
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	89 e6       	ldi	r24, 0x69	; 105
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	ab d4       	rcall	.+2390   	; 0xacc <Led_init>
     176:	24 e0       	ldi	r18, 0x04	; 4
	Led_init(&led4,&DDRD,&PORTD,4);
     178:	42 e3       	ldi	r20, 0x32	; 50
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	61 e3       	ldi	r22, 0x31	; 49
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	89 e4       	ldi	r24, 0x49	; 73
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	a3 d4       	rcall	.+2374   	; 0xacc <Led_init>
     186:	25 e0       	ldi	r18, 0x05	; 5
	Led_init(&led5,&DDRD,&PORTD,5);
     188:	42 e3       	ldi	r20, 0x32	; 50
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	61 e3       	ldi	r22, 0x31	; 49
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	83 e6       	ldi	r24, 0x63	; 99
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	9b d4       	rcall	.+2358   	; 0xacc <Led_init>
     196:	26 e0       	ldi	r18, 0x06	; 6
	Led_init(&led6,&DDRD,&PORTD,6);
     198:	42 e3       	ldi	r20, 0x32	; 50
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	61 e3       	ldi	r22, 0x31	; 49
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	8e e5       	ldi	r24, 0x5E	; 94
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	93 d4       	rcall	.+2342   	; 0xacc <Led_init>
     1a6:	27 e0       	ldi	r18, 0x07	; 7
	Led_init(&led7,&DDRD,&PORTD,7);
     1a8:	42 e3       	ldi	r20, 0x32	; 50
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	61 e3       	ldi	r22, 0x31	; 49
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	84 e8       	ldi	r24, 0x84	; 132
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	8b d4       	rcall	.+2326   	; 0xacc <Led_init>
     1b6:	20 e0       	ldi	r18, 0x00	; 0
	BUTTON_init(&btnMode,&DDRA,&PINA,0);
     1b8:	49 e3       	ldi	r20, 0x39	; 57
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	6a e3       	ldi	r22, 0x3A	; 58
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	8a e8       	ldi	r24, 0x8A	; 138
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	93 d3       	rcall	.+1830   	; 0x8ec <BUTTON_init>
     1c6:	21 e0       	ldi	r18, 0x01	; 1
	BUTTON_init(&btn2,&DDRA,&PINA,1);
     1c8:	49 e3       	ldi	r20, 0x39	; 57
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	6a e3       	ldi	r22, 0x3A	; 58
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	88 e5       	ldi	r24, 0x58	; 88
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	8b d3       	rcall	.+1814   	; 0x8ec <BUTTON_init>
     1d6:	22 e0       	ldi	r18, 0x02	; 2
	BUTTON_init(&btn3,&DDRA,&PINA,2);
     1d8:	49 e3       	ldi	r20, 0x39	; 57
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	6a e3       	ldi	r22, 0x3A	; 58
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	81 e4       	ldi	r24, 0x41	; 65
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	83 d3       	rcall	.+1798   	; 0x8ec <BUTTON_init>
     1e6:	23 e0       	ldi	r18, 0x03	; 3
	BUTTON_init(&btn4,&DDRA,&PINA,3);
     1e8:	49 e3       	ldi	r20, 0x39	; 57
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	6a e3       	ldi	r22, 0x3A	; 58
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	85 e7       	ldi	r24, 0x75	; 117
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	7b c3       	rjmp	.+1782   	; 0x8ec <BUTTON_init>
     1f6:	08 95       	ret

000001f8 <TimeClock_incMilisec>:
     1f8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <state>
}

void TimeClock_incMilisec()
{
	
	if(state != CLOCK_MODIFY)
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	09 f4       	brne	.+2      	; 0x202 <TimeClock_incMilisec+0xa>
     200:	47 c0       	rjmp	.+142    	; 0x290 <TimeClock_incMilisec+0x98>
	{
		milisec = (milisec+1) % 1000;
     202:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <milisec>
     206:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <milisec+0x1>
     20a:	4f 5f       	subi	r20, 0xFF	; 255
     20c:	5f 4f       	sbci	r21, 0xFF	; 255
     20e:	9a 01       	movw	r18, r20
     210:	36 95       	lsr	r19
     212:	27 95       	ror	r18
     214:	36 95       	lsr	r19
     216:	27 95       	ror	r18
     218:	36 95       	lsr	r19
     21a:	27 95       	ror	r18
     21c:	a5 ec       	ldi	r26, 0xC5	; 197
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	18 d5       	rcall	.+2608   	; 0xc52 <__umulhisi3>
     222:	92 95       	swap	r25
     224:	82 95       	swap	r24
     226:	8f 70       	andi	r24, 0x0F	; 15
     228:	89 27       	eor	r24, r25
     22a:	9f 70       	andi	r25, 0x0F	; 15
     22c:	89 27       	eor	r24, r25
     22e:	68 ee       	ldi	r22, 0xE8	; 232
     230:	73 e0       	ldi	r23, 0x03	; 3
     232:	86 9f       	mul	r24, r22
     234:	90 01       	movw	r18, r0
     236:	87 9f       	mul	r24, r23
     238:	30 0d       	add	r19, r0
     23a:	96 9f       	mul	r25, r22
     23c:	30 0d       	add	r19, r0
     23e:	11 24       	eor	r1, r1
     240:	ca 01       	movw	r24, r20
     242:	82 1b       	sub	r24, r18
     244:	93 0b       	sbc	r25, r19
     246:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <milisec+0x1>
     24a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <milisec>
		if(milisec) return;
     24e:	89 2b       	or	r24, r25
     250:	f9 f4       	brne	.+62     	; 0x290 <TimeClock_incMilisec+0x98>
		
		sec = (sec+1) % 60;
     252:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sec>
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	6c e3       	ldi	r22, 0x3C	; 60
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	dd d4       	rcall	.+2490   	; 0xc1a <__divmodhi4>
     260:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <sec>
		if(sec) return;
     264:	81 11       	cpse	r24, r1
     266:	14 c0       	rjmp	.+40     	; 0x290 <TimeClock_incMilisec+0x98>
		
		min = (min+1) % 60;
     268:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <min>
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	6c e3       	ldi	r22, 0x3C	; 60
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	d2 d4       	rcall	.+2468   	; 0xc1a <__divmodhi4>
     276:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <min>
		if(min) return;
     27a:	81 11       	cpse	r24, r1
     27c:	09 c0       	rjmp	.+18     	; 0x290 <TimeClock_incMilisec+0x98>
		
		hour = (hour+1) % 24;
     27e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <hour>
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	68 e1       	ldi	r22, 0x18	; 24
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	c7 d4       	rcall	.+2446   	; 0xc1a <__divmodhi4>
     28c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <hour>
     290:	08 95       	ret

00000292 <Modify_Blink>:
	}
	
}
void Modify_Blink()
{
	if(state == CLOCK_MODIFY)
     292:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <state>
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	31 f5       	brne	.+76     	; 0x2e6 <Modify_Blink+0x54>
	{
		modifymilisec = (modifymilisec+1) % 1000;
     29a:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <modifymilisec>
     29e:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <modifymilisec+0x1>
     2a2:	4f 5f       	subi	r20, 0xFF	; 255
     2a4:	5f 4f       	sbci	r21, 0xFF	; 255
     2a6:	9a 01       	movw	r18, r20
     2a8:	36 95       	lsr	r19
     2aa:	27 95       	ror	r18
     2ac:	36 95       	lsr	r19
     2ae:	27 95       	ror	r18
     2b0:	36 95       	lsr	r19
     2b2:	27 95       	ror	r18
     2b4:	a5 ec       	ldi	r26, 0xC5	; 197
     2b6:	b0 e2       	ldi	r27, 0x20	; 32
     2b8:	cc d4       	rcall	.+2456   	; 0xc52 <__umulhisi3>
     2ba:	92 95       	swap	r25
     2bc:	82 95       	swap	r24
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	89 27       	eor	r24, r25
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	89 27       	eor	r24, r25
     2c6:	68 ee       	ldi	r22, 0xE8	; 232
     2c8:	73 e0       	ldi	r23, 0x03	; 3
     2ca:	86 9f       	mul	r24, r22
     2cc:	90 01       	movw	r18, r0
     2ce:	87 9f       	mul	r24, r23
     2d0:	30 0d       	add	r19, r0
     2d2:	96 9f       	mul	r25, r22
     2d4:	30 0d       	add	r19, r0
     2d6:	11 24       	eor	r1, r1
     2d8:	ca 01       	movw	r24, r20
     2da:	82 1b       	sub	r24, r18
     2dc:	93 0b       	sbc	r25, r19
     2de:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <modifymilisec+0x1>
     2e2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <modifymilisec>
     2e6:	08 95       	ret

000002e8 <StopWatch_incMilisec>:
}


void StopWatch_incMilisec()
{
	if(state == STOPWATCH_RUN)
     2e8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <state>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <StopWatch_incMilisec+0xa>
     2f0:	47 c0       	rjmp	.+142    	; 0x380 <StopWatch_incMilisec+0x98>
	{
		stopWatchmilisec = (stopWatchmilisec+1) % 1000;
     2f2:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <stopWatchmilisec>
     2f6:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <stopWatchmilisec+0x1>
     2fa:	4f 5f       	subi	r20, 0xFF	; 255
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	9a 01       	movw	r18, r20
     300:	36 95       	lsr	r19
     302:	27 95       	ror	r18
     304:	36 95       	lsr	r19
     306:	27 95       	ror	r18
     308:	36 95       	lsr	r19
     30a:	27 95       	ror	r18
     30c:	a5 ec       	ldi	r26, 0xC5	; 197
     30e:	b0 e2       	ldi	r27, 0x20	; 32
     310:	a0 d4       	rcall	.+2368   	; 0xc52 <__umulhisi3>
     312:	92 95       	swap	r25
     314:	82 95       	swap	r24
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	89 27       	eor	r24, r25
     31a:	9f 70       	andi	r25, 0x0F	; 15
     31c:	89 27       	eor	r24, r25
     31e:	68 ee       	ldi	r22, 0xE8	; 232
     320:	73 e0       	ldi	r23, 0x03	; 3
     322:	86 9f       	mul	r24, r22
     324:	90 01       	movw	r18, r0
     326:	87 9f       	mul	r24, r23
     328:	30 0d       	add	r19, r0
     32a:	96 9f       	mul	r25, r22
     32c:	30 0d       	add	r19, r0
     32e:	11 24       	eor	r1, r1
     330:	ca 01       	movw	r24, r20
     332:	82 1b       	sub	r24, r18
     334:	93 0b       	sbc	r25, r19
     336:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <stopWatchmilisec+0x1>
     33a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <stopWatchmilisec>
		if(stopWatchmilisec) return;
     33e:	89 2b       	or	r24, r25
     340:	f9 f4       	brne	.+62     	; 0x380 <StopWatch_incMilisec+0x98>
		
		stopWatchsec = (stopWatchsec+1) % 60;
     342:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <stopWatchsec>
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	6c e3       	ldi	r22, 0x3C	; 60
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	65 d4       	rcall	.+2250   	; 0xc1a <__divmodhi4>
     350:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <stopWatchsec>
		if(stopWatchsec) return;
     354:	81 11       	cpse	r24, r1
     356:	14 c0       	rjmp	.+40     	; 0x380 <StopWatch_incMilisec+0x98>
		
		stopWatchmin = (stopWatchmin+1) % 60;
     358:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stopWatchmin>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	6c e3       	ldi	r22, 0x3C	; 60
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	5a d4       	rcall	.+2228   	; 0xc1a <__divmodhi4>
     366:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <stopWatchmin>
		if(stopWatchmin) return;
     36a:	81 11       	cpse	r24, r1
     36c:	09 c0       	rjmp	.+18     	; 0x380 <StopWatch_incMilisec+0x98>
		
		stopWatchhour = (stopWatchhour+1) % 24;
     36e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <stopWatchhour>
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	68 e1       	ldi	r22, 0x18	; 24
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	4f d4       	rcall	.+2206   	; 0xc1a <__divmodhi4>
     37c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <stopWatchhour>
     380:	08 95       	ret

00000382 <Timer_decMilisec>:
	}
}

void Timer_decMilisec()
{
	if(state == TIMER_RUN)
     382:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <state>
     386:	88 30       	cpi	r24, 0x08	; 8
     388:	69 f5       	brne	.+90     	; 0x3e4 <Timer_decMilisec+0x62>
	{
		
		if(timermilisec==0)
     38a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <timermilisec>
     38e:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <timermilisec+0x1>
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	11 f5       	brne	.+68     	; 0x3da <Timer_decMilisec+0x58>
		{
			timermilisec = 999;
     396:	87 ee       	ldi	r24, 0xE7	; 231
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <timermilisec+0x1>
     39e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <timermilisec>
			if (timersec == 0)
     3a2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     3a6:	81 11       	cpse	r24, r1
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <Timer_decMilisec+0x50>
			{
				timersec = 59;
     3aa:	8b e3       	ldi	r24, 0x3B	; 59
     3ac:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
				if(timermin == 0)
     3b0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timermin>
     3b4:	81 11       	cpse	r24, r1
     3b6:	09 c0       	rjmp	.+18     	; 0x3ca <Timer_decMilisec+0x48>
				{
					timermin = 59;
     3b8:	8b e3       	ldi	r24, 0x3B	; 59
     3ba:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timermin>
					timerhour = timerhour-1;
     3be:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
     3c2:	81 50       	subi	r24, 0x01	; 1
     3c4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timerhour>
     3c8:	08 95       	ret
				}
				else
				timermin=timermin-1;
     3ca:	81 50       	subi	r24, 0x01	; 1
     3cc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timermin>
     3d0:	08 95       	ret
			}
			else
			timersec=timersec-1;
     3d2:	81 50       	subi	r24, 0x01	; 1
     3d4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
     3d8:	08 95       	ret
		}
		else
		timermilisec = timermilisec -1;
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <timermilisec+0x1>
     3e0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <timermilisec>
     3e4:	08 95       	ret

000003e6 <ClockMachine_eventCheck>:
	}
}

void ClockMachine_eventCheck()
{
	switch(state)
     3e6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <state>
     3ea:	8e 2f       	mov	r24, r30
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	8a 30       	cpi	r24, 0x0A	; 10
     3f0:	91 05       	cpc	r25, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <ClockMachine_eventCheck+0x10>
     3f4:	eb c0       	rjmp	.+470    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     3f6:	fc 01       	movw	r30, r24
     3f8:	ea 5b       	subi	r30, 0xBA	; 186
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	21 c4       	rjmp	.+2114   	; 0xc40 <__tablejump2__>
	{
		case CLOCK_NORMAL:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
     3fe:	8a e8       	ldi	r24, 0x8A	; 138
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	81 d2       	rcall	.+1282   	; 0x906 <BUTTON_GETSTATE>
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	11 f4       	brne	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{
			state = STOPWATCH_STOP;
     408:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
     40c:	88 e5       	ldi	r24, 0x58	; 88
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	7a d2       	rcall	.+1268   	; 0x906 <BUTTON_GETSTATE>
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	09 f0       	breq	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	da c0       	rjmp	.+436    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
		{
			state = CLOCK_MODIFY;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		break;
		case CLOCK_MODIFY:
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
     41e:	08 95       	ret
     420:	88 e5       	ldi	r24, 0x58	; 88
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	70 d2       	rcall	.+1248   	; 0x906 <BUTTON_GETSTATE>
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	11 f4       	brne	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			state = CLOCK_NORMAL;
     42a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnModifyHour) == ACT_REALESED)
     42e:	81 e4       	ldi	r24, 0x41	; 65
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	69 d2       	rcall	.+1234   	; 0x906 <BUTTON_GETSTATE>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	49 f4       	brne	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			hour=(hour+1)%24;
     438:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <hour>
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	68 e1       	ldi	r22, 0x18	; 24
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	ea d3       	rcall	.+2004   	; 0xc1a <__divmodhi4>
     446:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <hour>
		}
		if (BUTTON_GETSTATE(&btnModifyMin) == ACT_REALESED)
     44a:	85 e7       	ldi	r24, 0x75	; 117
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	5b d2       	rcall	.+1206   	; 0x906 <BUTTON_GETSTATE>
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		{
			min=(min+1)%60;
     454:	bb c0       	rjmp	.+374    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     456:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <min>
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	6c e3       	ldi	r22, 0x3C	; 60
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	db d3       	rcall	.+1974   	; 0xc1a <__divmodhi4>
     464:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <min>
		}
		break;
		case STOPWATCH_STOP:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
     468:	08 95       	ret
     46a:	8a e8       	ldi	r24, 0x8A	; 138
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	4b d2       	rcall	.+1174   	; 0x906 <BUTTON_GETSTATE>
		{
			LCD_writeCmdData(LCD_DISPLAY_CLEAR);
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	29 f4       	brne	.+10     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     474:	81 e0       	ldi	r24, 0x01	; 1
			state = TIMER_STOP;
     476:	b6 d2       	rcall	.+1388   	; 0x9e4 <LCD_writeCmdData>
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnStartStop) == ACT_REALESED)
     47e:	88 e5       	ldi	r24, 0x58	; 88
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	41 d2       	rcall	.+1154   	; 0x906 <BUTTON_GETSTATE>
     484:	82 30       	cpi	r24, 0x02	; 2
		{
			state = STOPWATCH_RUN;
     486:	19 f4       	brne	.+6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnStomWatchReset) == ACT_REALESED)
     48e:	81 e4       	ldi	r24, 0x41	; 65
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	39 d2       	rcall	.+1138   	; 0x906 <BUTTON_GETSTATE>
     494:	82 30       	cpi	r24, 0x02	; 2
     496:	09 f0       	breq	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		{
			state = STOPWATCH_RESET;
     498:	99 c0       	rjmp	.+306    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     49a:	84 e0       	ldi	r24, 0x04	; 4
     49c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		break;
		case STOPWATCH_RUN:
		if (BUTTON_GETSTATE(&btnStartStop) == ACT_REALESED)
     4a0:	08 95       	ret
     4a2:	88 e5       	ldi	r24, 0x58	; 88
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	2f d2       	rcall	.+1118   	; 0x906 <BUTTON_GETSTATE>
     4a8:	82 30       	cpi	r24, 0x02	; 2
		{
			state = STOPWATCH_STOP;
     4aa:	11 f4       	brne	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnStomWatchRecord) == ACT_REALESED)
     4b0:	85 e7       	ldi	r24, 0x75	; 117
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	28 d2       	rcall	.+1104   	; 0x906 <BUTTON_GETSTATE>
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	88 c0       	rjmp	.+272    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
		{
			state = STOPWATCH_RECORD;
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		break;
		case STOPWATCH_RESET:
		state = STOPWATCH_STOP;
     4c2:	08 95       	ret
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		break;
		case STOPWATCH_RECORD:
		state = STOPWATCH_RUN;
     4ca:	08 95       	ret
     4cc:	83 e0       	ldi	r24, 0x03	; 3
		break;
     4ce:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		case TIMER_STOP:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
     4d2:	08 95       	ret
     4d4:	8a e8       	ldi	r24, 0x8A	; 138
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	16 d2       	rcall	.+1068   	; 0x906 <BUTTON_GETSTATE>
		{
			state = CLOCK_NORMAL;
     4da:	82 30       	cpi	r24, 0x02	; 2
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		}
		if (BUTTON_GETSTATE(&btnStartStop) == ACT_REALESED)
     4de:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <state>
     4e2:	88 e5       	ldi	r24, 0x58	; 88
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0f d2       	rcall	.+1054   	; 0x906 <BUTTON_GETSTATE>
		{
			state = TIMER_RUN;
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4ec:	88 e0       	ldi	r24, 0x08	; 8
		}
		if (BUTTON_GETSTATE(&btnSet) == ACT_REALESED)
     4ee:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
     4f2:	81 e4       	ldi	r24, 0x41	; 65
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	07 d2       	rcall	.+1038   	; 0x906 <BUTTON_GETSTATE>
     4f8:	82 30       	cpi	r24, 0x02	; 2
		{
			state = TIMER_SET;
     4fa:	19 f4       	brne	.+6      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4fc:	87 e0       	ldi	r24, 0x07	; 7
     4fe:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
		}
		if (BUTTON_GETSTATE(&btnReset) == ACT_REALESED)
     502:	85 e7       	ldi	r24, 0x75	; 117
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	ff d1       	rcall	.+1022   	; 0x906 <BUTTON_GETSTATE>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	09 f0       	breq	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
		{
			timerhour = 0;
     50c:	5f c0       	rjmp	.+190    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     50e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timerhour>
			timermin = 0;
     512:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <timermin>
			timersec = 0;
			timermilisec = 0;
     516:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
     51a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <timermilisec+0x1>
     51e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <timermilisec>
		}
		break;
		case TIMER_SET:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
     522:	08 95       	ret
     524:	8a e8       	ldi	r24, 0x8A	; 138
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	ee d1       	rcall	.+988    	; 0x906 <BUTTON_GETSTATE>
		{
			LCD_writeCmdData(LCD_DISPLAY_CLEAR);
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	29 f4       	brne	.+10     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			state = TIMER_STOP;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	59 d2       	rcall	.+1202   	; 0x9e4 <LCD_writeCmdData>
     532:	86 e0       	ldi	r24, 0x06	; 6
		}
		if (BUTTON_GETSTATE(&btnTimverHour) == ACT_REALESED)
     534:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
     538:	88 e5       	ldi	r24, 0x58	; 88
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	e4 d1       	rcall	.+968    	; 0x906 <BUTTON_GETSTATE>
		{
			timerhour = (timerhour+1)%100;
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	49 f4       	brne	.+18     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     542:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	64 e6       	ldi	r22, 0x64	; 100
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	65 d3       	rcall	.+1738   	; 0xc1a <__divmodhi4>
		}
		if (BUTTON_GETSTATE(&btnTimverMin) == ACT_REALESED)
     550:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <timerhour>
     554:	81 e4       	ldi	r24, 0x41	; 65
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	d6 d1       	rcall	.+940    	; 0x906 <BUTTON_GETSTATE>
		{
			timermin = (timermin+1)%60;
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	49 f4       	brne	.+18     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     55e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timermin>
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	6c e3       	ldi	r22, 0x3C	; 60
     568:	70 e0       	ldi	r23, 0x00	; 0
		}
		if (BUTTON_GETSTATE(&btnTimverSec) == ACT_REALESED)
     56a:	57 d3       	rcall	.+1710   	; 0xc1a <__divmodhi4>
     56c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timermin>
     570:	85 e7       	ldi	r24, 0x75	; 117
		{
			timersec = (timersec+1)%60;
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	c8 d1       	rcall	.+912    	; 0x906 <BUTTON_GETSTATE>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	49 f4       	brne	.+18     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     57a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     57e:	90 e0       	ldi	r25, 0x00	; 0
		}
		case TIMER_OVER:
		if (BUTTON_GETSTATE(&btnStartStop) == ACT_REALESED)
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	6c e3       	ldi	r22, 0x3C	; 60
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	49 d3       	rcall	.+1682   	; 0xc1a <__divmodhi4>
     588:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
		{
			Led_Off(&led0);
     58c:	88 e5       	ldi	r24, 0x58	; 88
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	ba d1       	rcall	.+884    	; 0x906 <BUTTON_GETSTATE>
			Led_Off(&led1);
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	d9 f4       	brne	.+54     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     596:	8e e6       	ldi	r24, 0x6E	; 110
     598:	91 e0       	ldi	r25, 0x01	; 1
			Led_Off(&led2);
     59a:	aa d2       	rcall	.+1364   	; 0xaf0 <Led_Off>
     59c:	80 e5       	ldi	r24, 0x50	; 80
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	a7 d2       	rcall	.+1358   	; 0xaf0 <Led_Off>
			Led_Off(&led3);
     5a2:	80 e9       	ldi	r24, 0x90	; 144
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	a4 d2       	rcall	.+1352   	; 0xaf0 <Led_Off>
     5a8:	89 e6       	ldi	r24, 0x69	; 105
			Led_Off(&led4);
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	a1 d2       	rcall	.+1346   	; 0xaf0 <Led_Off>
     5ae:	89 e4       	ldi	r24, 0x49	; 73
     5b0:	91 e0       	ldi	r25, 0x01	; 1
			Led_Off(&led5);
     5b2:	9e d2       	rcall	.+1340   	; 0xaf0 <Led_Off>
     5b4:	83 e6       	ldi	r24, 0x63	; 99
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	9b d2       	rcall	.+1334   	; 0xaf0 <Led_Off>
			Led_Off(&led6);
     5ba:	8e e5       	ldi	r24, 0x5E	; 94
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	98 d2       	rcall	.+1328   	; 0xaf0 <Led_Off>
     5c0:	84 e8       	ldi	r24, 0x84	; 132
			Led_Off(&led7);
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	95 d2       	rcall	.+1322   	; 0xaf0 <Led_Off>
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
			state = TIMER_STOP;
     5cc:	08 95       	ret

000005ce <ClockMachine_execute>:
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
		break;
	}
}

void ClockMachine_execute()
{
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	2a 97       	sbiw	r28, 0x0a	; 10
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
	char Time[10];
	switch(state)
     5e6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <state>
     5ea:	8e 2f       	mov	r24, r30
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	89 30       	cpi	r24, 0x09	; 9
     5f0:	91 05       	cpc	r25, r1
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <ClockMachine_execute+0x28>
     5f4:	6d c1       	rjmp	.+730    	; 0x8d0 <ClockMachine_execute+0x302>
     5f6:	fc 01       	movw	r30, r24
     5f8:	e0 5b       	subi	r30, 0xB0	; 176
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	21 c3       	rjmp	.+1602   	; 0xc40 <__tablejump2__>
	{
		case CLOCK_NORMAL:
		{
			static uint8_t prevSec = 0xff;
			if(sec!=prevSec)
     5fe:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <sec>
     602:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     606:	98 17       	cp	r25, r24
     608:	09 f4       	brne	.+2      	; 0x60c <ClockMachine_execute+0x3e>
     60a:	62 c1       	rjmp	.+708    	; 0x8d0 <ClockMachine_execute+0x302>
			{
				LCD_writeStringXY("Time Clock",0,3);
     60c:	43 e0       	ldi	r20, 0x03	; 3
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	50 d2       	rcall	.+1184   	; 0xab6 <LCD_writeStringXY>
				sprintf(Time,"%02d:%02d:%02d",hour,min,sec);
     616:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sec>
     61a:	1f 92       	push	r1
     61c:	8f 93       	push	r24
     61e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <min>
     622:	1f 92       	push	r1
     624:	8f 93       	push	r24
     626:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <hour>
     62a:	1f 92       	push	r1
     62c:	8f 93       	push	r24
     62e:	8c e0       	ldi	r24, 0x0C	; 12
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	8e 01       	movw	r16, r28
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	1f 93       	push	r17
     63e:	0f 93       	push	r16
     640:	2b d3       	rcall	.+1622   	; 0xc98 <sprintf>
				LCD_writeStringXY(Time,1,4);
     642:	44 e0       	ldi	r20, 0x04	; 4
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	c8 01       	movw	r24, r16
     648:	36 d2       	rcall	.+1132   	; 0xab6 <LCD_writeStringXY>
				prevSec=sec;
     64a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sec>
     64e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	39 c1       	rjmp	.+626    	; 0x8d0 <ClockMachine_execute+0x302>
			}
		}
		break;
		case CLOCK_MODIFY:
		{
			if (modifymilisec<700)
     65e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <modifymilisec>
     662:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <modifymilisec+0x1>
     666:	8c 3b       	cpi	r24, 0xBC	; 188
     668:	92 40       	sbci	r25, 0x02	; 2
     66a:	00 f5       	brcc	.+64     	; 0x6ac <ClockMachine_execute+0xde>
			{
				sprintf(Time,"%02d:%02d:%02d",hour,min,sec);
     66c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <sec>
     670:	1f 92       	push	r1
     672:	8f 93       	push	r24
     674:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <min>
     678:	1f 92       	push	r1
     67a:	8f 93       	push	r24
     67c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <hour>
     680:	1f 92       	push	r1
     682:	8f 93       	push	r24
     684:	8c e0       	ldi	r24, 0x0C	; 12
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	8e 01       	movw	r16, r28
     68e:	0f 5f       	subi	r16, 0xFF	; 255
     690:	1f 4f       	sbci	r17, 0xFF	; 255
     692:	1f 93       	push	r17
     694:	0f 93       	push	r16
				LCD_writeStringXY(Time,1,4);
     696:	00 d3       	rcall	.+1536   	; 0xc98 <sprintf>
     698:	44 e0       	ldi	r20, 0x04	; 4
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	c8 01       	movw	r24, r16
     69e:	0b d2       	rcall	.+1046   	; 0xab6 <LCD_writeStringXY>
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
			}
			else
			{
				LCD_writeStringXY("  :  :  ",1,4);
     6aa:	12 c1       	rjmp	.+548    	; 0x8d0 <ClockMachine_execute+0x302>
     6ac:	44 e0       	ldi	r20, 0x04	; 4
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	8b e1       	ldi	r24, 0x1B	; 27
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	00 d2       	rcall	.+1024   	; 0xab6 <LCD_writeStringXY>
			}
		}
		break;
		case STOPWATCH_STOP:
		LCD_writeStringXY("Stop Watch",0,3);
     6b6:	0c c1       	rjmp	.+536    	; 0x8d0 <ClockMachine_execute+0x302>
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	84 e2       	ldi	r24, 0x24	; 36
     6be:	91 e0       	ldi	r25, 0x01	; 1
		sprintf(Time,"%02d:%02d:%02d",stopWatchmin,stopWatchsec,stopWatchmilisec/10);
     6c0:	fa d1       	rcall	.+1012   	; 0xab6 <LCD_writeStringXY>
     6c2:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <stopWatchmilisec>
     6c6:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <stopWatchmilisec+0x1>
     6ca:	ad ec       	ldi	r26, 0xCD	; 205
     6cc:	bc ec       	ldi	r27, 0xCC	; 204
     6ce:	c1 d2       	rcall	.+1410   	; 0xc52 <__umulhisi3>
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <stopWatchsec>
     6e4:	1f 92       	push	r1
     6e6:	8f 93       	push	r24
     6e8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stopWatchmin>
     6ec:	1f 92       	push	r1
     6ee:	8f 93       	push	r24
     6f0:	8c e0       	ldi	r24, 0x0C	; 12
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	1f 93       	push	r17
     700:	0f 93       	push	r16
		LCD_writeStringXY(Time,1,4);
     702:	ca d2       	rcall	.+1428   	; 0xc98 <sprintf>
     704:	44 e0       	ldi	r20, 0x04	; 4
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	c8 01       	movw	r24, r16
     70a:	d5 d1       	rcall	.+938    	; 0xab6 <LCD_writeStringXY>
		break;
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
		case STOPWATCH_RUN:
		sprintf(Time,"%02d:%02d:%02d",stopWatchmin,stopWatchsec,stopWatchmilisec/10);
     716:	dc c0       	rjmp	.+440    	; 0x8d0 <ClockMachine_execute+0x302>
     718:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <stopWatchmilisec>
     71c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <stopWatchmilisec+0x1>
     720:	ad ec       	ldi	r26, 0xCD	; 205
     722:	bc ec       	ldi	r27, 0xCC	; 204
     724:	96 d2       	rcall	.+1324   	; 0xc52 <__umulhisi3>
     726:	96 95       	lsr	r25
     728:	87 95       	ror	r24
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	96 95       	lsr	r25
     730:	87 95       	ror	r24
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <stopWatchsec>
     73a:	1f 92       	push	r1
     73c:	8f 93       	push	r24
     73e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <stopWatchmin>
     742:	1f 92       	push	r1
     744:	8f 93       	push	r24
     746:	8c e0       	ldi	r24, 0x0C	; 12
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	8e 01       	movw	r16, r28
     750:	0f 5f       	subi	r16, 0xFF	; 255
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	1f 93       	push	r17
     756:	0f 93       	push	r16
		LCD_writeStringXY(Time,1,4);
     758:	9f d2       	rcall	.+1342   	; 0xc98 <sprintf>
     75a:	44 e0       	ldi	r20, 0x04	; 4
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	c8 01       	movw	r24, r16
     760:	aa d1       	rcall	.+852    	; 0xab6 <LCD_writeStringXY>
		break;
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	b1 c0       	rjmp	.+354    	; 0x8d0 <ClockMachine_execute+0x302>
		case STOPWATCH_RESET:
		stopWatchmilisec = 0;
     76e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <stopWatchmilisec+0x1>
     772:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <stopWatchmilisec>
		stopWatchsec = 0;
     776:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <stopWatchsec>
		stopWatchmin = 0;
     77a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <stopWatchmin>
		stopWatchhour = 0;
     77e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <stopWatchhour>
		break;
		case STOPWATCH_RECORD:
		
		break;
		case TIMER_STOP:
		LCD_writeStringXY("Timer",0,5);
     782:	a6 c0       	rjmp	.+332    	; 0x8d0 <ClockMachine_execute+0x302>
     784:	45 e0       	ldi	r20, 0x05	; 5
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	8f e2       	ldi	r24, 0x2F	; 47
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	94 d1       	rcall	.+808    	; 0xab6 <LCD_writeStringXY>
		sprintf(Time,"%02d:%02d:%02d",timerhour,timermin,timersec);
     78e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     792:	1f 92       	push	r1
     794:	8f 93       	push	r24
     796:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timermin>
     79a:	1f 92       	push	r1
     79c:	8f 93       	push	r24
     79e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
     7a2:	1f 92       	push	r1
     7a4:	8f 93       	push	r24
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5f       	subi	r16, 0xFF	; 255
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	1f 93       	push	r17
     7b6:	0f 93       	push	r16
		LCD_writeStringXY(Time,1,4);
     7b8:	6f d2       	rcall	.+1246   	; 0xc98 <sprintf>
     7ba:	44 e0       	ldi	r20, 0x04	; 4
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	c8 01       	movw	r24, r16
     7c0:	7a d1       	rcall	.+756    	; 0xab6 <LCD_writeStringXY>
		break;
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	81 c0       	rjmp	.+258    	; 0x8d0 <ClockMachine_execute+0x302>
		case TIMER_SET:
		LCD_writeStringXY("Timer Set",0,3);
     7ce:	43 e0       	ldi	r20, 0x03	; 3
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	85 e3       	ldi	r24, 0x35	; 53
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	6f d1       	rcall	.+734    	; 0xab6 <LCD_writeStringXY>
     7d8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
		sprintf(Time,"%02d:%02d:%02d",timerhour,timermin,timersec);
     7dc:	1f 92       	push	r1
     7de:	8f 93       	push	r24
     7e0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timermin>
     7e4:	1f 92       	push	r1
     7e6:	8f 93       	push	r24
     7e8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
     7ec:	1f 92       	push	r1
     7ee:	8f 93       	push	r24
     7f0:	8c e0       	ldi	r24, 0x0C	; 12
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	8e 01       	movw	r16, r28
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	1f 93       	push	r17
     800:	0f 93       	push	r16
     802:	4a d2       	rcall	.+1172   	; 0xc98 <sprintf>
		LCD_writeStringXY(Time,1,4);
     804:	44 e0       	ldi	r20, 0x04	; 4
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	c8 01       	movw	r24, r16
     80a:	55 d1       	rcall	.+682    	; 0xab6 <LCD_writeStringXY>
     80c:	0f b6       	in	r0, 0x3f	; 63
		break;
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	5c c0       	rjmp	.+184    	; 0x8d0 <ClockMachine_execute+0x302>
     818:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
		case TIMER_RUN:
		sprintf(Time,"%02d:%02d:%02d",timerhour,timermin,timersec);
     81c:	1f 92       	push	r1
     81e:	8f 93       	push	r24
     820:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <timermin>
     824:	1f 92       	push	r1
     826:	8f 93       	push	r24
     828:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
     82c:	1f 92       	push	r1
     82e:	8f 93       	push	r24
     830:	8c e0       	ldi	r24, 0x0C	; 12
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	8e 01       	movw	r16, r28
     83a:	0f 5f       	subi	r16, 0xFF	; 255
     83c:	1f 4f       	sbci	r17, 0xFF	; 255
     83e:	1f 93       	push	r17
     840:	0f 93       	push	r16
     842:	2a d2       	rcall	.+1108   	; 0xc98 <sprintf>
		LCD_writeStringXY(Time,1,4);
     844:	44 e0       	ldi	r20, 0x04	; 4
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	c8 01       	movw	r24, r16
     84a:	35 d1       	rcall	.+618    	; 0xab6 <LCD_writeStringXY>
     84c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <timerhour>
		if (timerhour==0 && timermin==0 && timersec==0)
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	81 11       	cpse	r24, r1
     85c:	39 c0       	rjmp	.+114    	; 0x8d0 <ClockMachine_execute+0x302>
     85e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <timermin>
     862:	91 11       	cpse	r25, r1
     864:	35 c0       	rjmp	.+106    	; 0x8d0 <ClockMachine_execute+0x302>
     866:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__data_end>
		{
			sprintf(Time,"%02d:%02d:%02d",timerhour,timermin,timersec);
     86a:	21 11       	cpse	r18, r1
     86c:	31 c0       	rjmp	.+98     	; 0x8d0 <ClockMachine_execute+0x302>
     86e:	1f 92       	push	r1
     870:	2f 93       	push	r18
     872:	1f 92       	push	r1
     874:	9f 93       	push	r25
     876:	1f 92       	push	r1
     878:	8f 93       	push	r24
     87a:	8c e0       	ldi	r24, 0x0C	; 12
     87c:	91 e0       	ldi	r25, 0x01	; 1
			LCD_writeStringXY(Time,1,4);
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	1f 93       	push	r17
     884:	0f 93       	push	r16
			Led_On(&led0);
     886:	08 d2       	rcall	.+1040   	; 0xc98 <sprintf>
     888:	44 e0       	ldi	r20, 0x04	; 4
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	c8 01       	movw	r24, r16
			Led_On(&led1);
     88e:	13 d1       	rcall	.+550    	; 0xab6 <LCD_writeStringXY>
     890:	8e e6       	ldi	r24, 0x6E	; 110
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	42 d1       	rcall	.+644    	; 0xb1a <Led_On>
			Led_On(&led2);
     896:	80 e5       	ldi	r24, 0x50	; 80
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	3f d1       	rcall	.+638    	; 0xb1a <Led_On>
     89c:	80 e9       	ldi	r24, 0x90	; 144
			Led_On(&led3);
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	3c d1       	rcall	.+632    	; 0xb1a <Led_On>
     8a2:	89 e6       	ldi	r24, 0x69	; 105
     8a4:	91 e0       	ldi	r25, 0x01	; 1
			Led_On(&led4);
     8a6:	39 d1       	rcall	.+626    	; 0xb1a <Led_On>
     8a8:	89 e4       	ldi	r24, 0x49	; 73
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	36 d1       	rcall	.+620    	; 0xb1a <Led_On>
			Led_On(&led5);
     8ae:	83 e6       	ldi	r24, 0x63	; 99
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	33 d1       	rcall	.+614    	; 0xb1a <Led_On>
     8b4:	8e e5       	ldi	r24, 0x5E	; 94
			Led_On(&led6);
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	30 d1       	rcall	.+608    	; 0xb1a <Led_On>
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	91 e0       	ldi	r25, 0x01	; 1
			Led_On(&led7);
     8be:	2d d1       	rcall	.+602    	; 0xb1a <Led_On>
     8c0:	89 e0       	ldi	r24, 0x09	; 9
     8c2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <state>
			state = TIMER_OVER;
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	2a 96       	adiw	r28, 0x0a	; 10
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
		}
		break;
	}
}
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <ClockMachine_run>:
     8e6:	7f dd       	rcall	.-1282   	; 0x3e6 <ClockMachine_eventCheck>
     8e8:	72 ce       	rjmp	.-796    	; 0x5ce <ClockMachine_execute>
     8ea:	08 95       	ret

000008ec <BUTTON_init>:

void ClockMachine_run()
{
	ClockMachine_eventCheck();
	ClockMachine_execute();
     8ec:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
     8ee:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
     8f0:	71 83       	std	Z+1, r23	; 0x01
     8f2:	60 83       	st	Z, r22
	btn ->PIN = pin;
     8f4:	53 83       	std	Z+3, r21	; 0x03
     8f6:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
     8f8:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
     8fa:	31 e0       	ldi	r19, 0x01	; 1
     8fc:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
     8fe:	42 2f       	mov	r20, r18
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	55 c1       	rjmp	.+682    	; 0xbae <Gpio_initPin>
     904:	08 95       	ret

00000906 <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
     90c:	6c 81       	ldd	r22, Y+4	; 0x04
     90e:	8a 81       	ldd	r24, Y+2	; 0x02
     910:	9b 81       	ldd	r25, Y+3	; 0x03
     912:	6d d1       	rcall	.+730    	; 0xbee <Gpio_ReadPin>
     914:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
     916:	81 11       	cpse	r24, r1
     918:	0b c0       	rjmp	.+22     	; 0x930 <BUTTON_GETSTATE+0x2a>
     91a:	8d 81       	ldd	r24, Y+5	; 0x05
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	41 f4       	brne	.+16     	; 0x930 <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	ef e3       	ldi	r30, 0x3F	; 63
     922:	fc e9       	ldi	r31, 0x9C	; 156
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <BUTTON_GETSTATE+0x1e>
     928:	00 c0       	rjmp	.+0      	; 0x92a <BUTTON_GETSTATE+0x24>
     92a:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
     92c:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
     92e:	12 c0       	rjmp	.+36     	; 0x954 <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
     930:	99 23       	and	r25, r25
     932:	69 f0       	breq	.+26     	; 0x94e <BUTTON_GETSTATE+0x48>
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	81 11       	cpse	r24, r1
     938:	0c c0       	rjmp	.+24     	; 0x952 <BUTTON_GETSTATE+0x4c>
     93a:	8f e3       	ldi	r24, 0x3F	; 63
     93c:	9c e9       	ldi	r25, 0x9C	; 156
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <BUTTON_GETSTATE+0x38>
     942:	00 c0       	rjmp	.+0      	; 0x944 <BUTTON_GETSTATE+0x3e>
     944:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	03 c0       	rjmp	.+6      	; 0x954 <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	01 c0       	rjmp	.+2      	; 0x954 <BUTTON_GETSTATE+0x4e>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <FND_init>:
uint16_t fndData  = 0;
uint8_t fndColonFlag;

void FND_init()
{
	DDRE |= (1<<FND_DIGIT_4) |(1<<FND_DIGIT_3) |(1<<FND_DIGIT_2) |(1<<FND_DIGIT_1) ;
     95a:	82 b1       	in	r24, 0x02	; 2
     95c:	80 6f       	ori	r24, 0xF0	; 240
     95e:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     966:	08 95       	ret

00000968 <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS -> Low
	lcdControlData &= ~(1<<LCD_RS);
     968:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lcdControlData>
     96c:	6f 7d       	andi	r22, 0xDF	; 223
     96e:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
     972:	88 e3       	ldi	r24, 0x38	; 56
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	38 c1       	rjmp	.+624    	; 0xbe8 <Gpio_WritePort>
     978:	08 95       	ret

0000097a <LCD_charMode>:
}

void LCD_charMode()
{
	//RS -> High
	lcdControlData |= (1<<LCD_RS);
     97a:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lcdControlData>
     97e:	60 62       	ori	r22, 0x20	; 32
     980:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
     984:	88 e3       	ldi	r24, 0x38	; 56
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2f c1       	rjmp	.+606    	; 0xbe8 <Gpio_WritePort>
     98a:	08 95       	ret

0000098c <LCD_writeMode>:
}

void LCD_writeMode()
{
	//Rw -> Low
	lcdControlData &= ~(1<<LCD_RW);
     98c:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lcdControlData>
     990:	6f 7b       	andi	r22, 0xBF	; 191
     992:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
     996:	88 e3       	ldi	r24, 0x38	; 56
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	26 c1       	rjmp	.+588    	; 0xbe8 <Gpio_WritePort>
     99c:	08 95       	ret

0000099e <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	lcdControlData |= (1<<LCD_E);
     99e:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lcdControlData>
     9a2:	60 68       	ori	r22, 0x80	; 128
     9a4:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
     9a8:	88 e3       	ldi	r24, 0x38	; 56
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	1d d1       	rcall	.+570    	; 0xbe8 <Gpio_WritePort>
     9ae:	8f e9       	ldi	r24, 0x9F	; 159
     9b0:	9f e0       	ldi	r25, 0x0F	; 15
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <LCD_enableHigh+0x14>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LCD_enableHigh+0x1a>
     9b8:	00 00       	nop
     9ba:	08 95       	ret

000009bc <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
	Gpio_WritePort(&LCD_DATA_PORT,data);
     9bc:	68 2f       	mov	r22, r24
     9be:	85 e3       	ldi	r24, 0x35	; 53
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	12 c1       	rjmp	.+548    	; 0xbe8 <Gpio_WritePort>
     9c4:	08 95       	ret

000009c6 <LCD_enableLow>:
}

void LCD_enableLow()
{
	lcdControlData &= ~(1<<LCD_E);
     9c6:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lcdControlData>
     9ca:	6f 77       	andi	r22, 0x7F	; 127
     9cc:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
     9d0:	88 e3       	ldi	r24, 0x38	; 56
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	09 d1       	rcall	.+530    	; 0xbe8 <Gpio_WritePort>
     9d6:	8f e9       	ldi	r24, 0x9F	; 159
     9d8:	9f e0       	ldi	r25, 0x0F	; 15
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <LCD_enableLow+0x14>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <LCD_enableLow+0x1a>
     9e0:	00 00       	nop
     9e2:	08 95       	ret

000009e4 <LCD_writeCmdData>:
	_delay_ms(1);
}

void LCD_writeCmdData(uint8_t data) // 명령을 내리는 함수
{
     9e4:	cf 93       	push	r28
     9e6:	c8 2f       	mov	r28, r24
	// LCD 내부 명령어 동작
	LCD_cmdMode();
     9e8:	bf df       	rcall	.-130    	; 0x968 <LCD_cmdMode>
	LCD_writeMode();
     9ea:	d0 df       	rcall	.-96     	; 0x98c <LCD_writeMode>
	LCD_enableHigh();
     9ec:	d8 df       	rcall	.-80     	; 0x99e <LCD_enableHigh>
	LCD_writeByte(data);
     9ee:	8c 2f       	mov	r24, r28
     9f0:	e5 df       	rcall	.-54     	; 0x9bc <LCD_writeByte>
     9f2:	e9 df       	rcall	.-46     	; 0x9c6 <LCD_enableLow>
	LCD_enableLow();
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <LCD_init>:
}
     9f8:	45 e0       	ldi	r20, 0x05	; 5
     9fa:	61 e0       	ldi	r22, 0x01	; 1

uint8_t lcdControlData;

void LCD_init()
{
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RS);
     9fc:	87 e3       	ldi	r24, 0x37	; 55
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	d6 d0       	rcall	.+428    	; 0xbae <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RW);
     a02:	46 e0       	ldi	r20, 0x06	; 6
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	87 e3       	ldi	r24, 0x37	; 55
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	d1 d0       	rcall	.+418    	; 0xbae <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_E);
     a0c:	47 e0       	ldi	r20, 0x07	; 7
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	87 e3       	ldi	r24, 0x37	; 55
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	cc d0       	rcall	.+408    	; 0xbae <Gpio_initPin>
	Gpio_initPort(&LCD_DATA_DDR,OUTPUT);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	84 e3       	ldi	r24, 0x34	; 52
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	bf d0       	rcall	.+382    	; 0xb9c <Gpio_initPort>
     a1e:	8f e5       	ldi	r24, 0x5F	; 95
     a20:	9a ee       	ldi	r25, 0xEA	; 234
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_init+0x2a>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCD_init+0x30>
	_delay_ms(15);
	LCD_writeCmdData(LCD_FUNCTON_SET);   //
     a28:	00 00       	nop
     a2a:	88 e3       	ldi	r24, 0x38	; 56
     a2c:	db df       	rcall	.-74     	; 0x9e4 <LCD_writeCmdData>
     a2e:	8f e1       	ldi	r24, 0x1F	; 31
     a30:	9e e4       	ldi	r25, 0x4E	; 78
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_init+0x3a>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_init+0x40>
	_delay_ms(5);
	LCD_writeCmdData(LCD_FUNCTON_SET);
     a38:	00 00       	nop
     a3a:	88 e3       	ldi	r24, 0x38	; 56
     a3c:	d3 df       	rcall	.-90     	; 0x9e4 <LCD_writeCmdData>
     a3e:	8f e9       	ldi	r24, 0x9F	; 159
     a40:	9f e0       	ldi	r25, 0x0F	; 15
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_init+0x4a>
	_delay_ms(1);
	LCD_writeCmdData(LCD_FUNCTON_SET);
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <LCD_init+0x50>
     a48:	00 00       	nop
	LCD_writeCmdData(LCD_FUNCTON_SET);
     a4a:	88 e3       	ldi	r24, 0x38	; 56
     a4c:	cb df       	rcall	.-106    	; 0x9e4 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_DISPLAY_OFF);
     a4e:	88 e3       	ldi	r24, 0x38	; 56
     a50:	c9 df       	rcall	.-110    	; 0x9e4 <LCD_writeCmdData>
     a52:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
     a54:	c7 df       	rcall	.-114    	; 0x9e4 <LCD_writeCmdData>
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	c5 df       	rcall	.-118    	; 0x9e4 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	c3 df       	rcall	.-122    	; 0x9e4 <LCD_writeCmdData>
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);
     a60:	c1 cf       	rjmp	.-126    	; 0x9e4 <LCD_writeCmdData>
     a62:	08 95       	ret

00000a64 <LCD_writeCharData>:
     a64:	cf 93       	push	r28
     a66:	c8 2f       	mov	r28, r24
}

void LCD_writeCharData(uint8_t data) // 문자를 찍는 함수
{
	// LCD char 쓰는 동작
	LCD_charMode();
     a68:	88 df       	rcall	.-240    	; 0x97a <LCD_charMode>
	LCD_writeMode();
     a6a:	90 df       	rcall	.-224    	; 0x98c <LCD_writeMode>
	LCD_enableHigh();
     a6c:	98 df       	rcall	.-208    	; 0x99e <LCD_enableHigh>
	LCD_writeByte(data);
     a6e:	8c 2f       	mov	r24, r28
     a70:	a5 df       	rcall	.-182    	; 0x9bc <LCD_writeByte>
     a72:	a9 df       	rcall	.-174    	; 0x9c6 <LCD_enableLow>
	LCD_enableLow();
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <LCD_writeString>:
}
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17

void LCD_writeString(char *str)
{
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	8c 01       	movw	r16, r24
	for(int i=0;str[i];i++)
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
     a88:	ed df       	rcall	.-38     	; 0xa64 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0;str[i];i++)
     a8a:	21 96       	adiw	r28, 0x01	; 1
     a8c:	f8 01       	movw	r30, r16
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	80 81       	ld	r24, Z
     a94:	81 11       	cpse	r24, r1
     a96:	f8 cf       	rjmp	.-16     	; 0xa88 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col %= 16, row %=2;
     aa2:	6f 70       	andi	r22, 0x0F	; 15
     aa4:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) +col;
     aa6:	90 e4       	ldi	r25, 0x40	; 64
     aa8:	89 9f       	mul	r24, r25
     aaa:	60 0d       	add	r22, r0
     aac:	11 24       	eor	r1, r1
     aae:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
     ab0:	80 58       	subi	r24, 0x80	; 128
     ab2:	98 cf       	rjmp	.-208    	; 0x9e4 <LCD_writeCmdData>
     ab4:	08 95       	ret

00000ab6 <LCD_writeStringXY>:
}

void LCD_writeStringXY(char *str, uint8_t row, uint8_t col)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	86 2f       	mov	r24, r22
	LCD_gotoXY(row, col);
     abe:	64 2f       	mov	r22, r20
     ac0:	f0 df       	rcall	.-32     	; 0xaa2 <LCD_gotoXY>
	LCD_writeString(str);
     ac2:	ce 01       	movw	r24, r28
     ac4:	d9 df       	rcall	.-78     	; 0xa78 <LCD_writeString>
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <Led_init>:
﻿#include "Led.h"

void Led_init(led_t *led, volatile uint8_t *ddr,volatile uint8_t *port,uint8_t pinNum)
{
     acc:	fc 01       	movw	r30, r24
	led -> DDR = ddr;
     ace:	71 83       	std	Z+1, r23	; 0x01
     ad0:	60 83       	st	Z, r22
	led -> PORT = port;
     ad2:	53 83       	std	Z+3, r21	; 0x03
     ad4:	42 83       	std	Z+2, r20	; 0x02
	led -> pinNum = pinNum;
     ad6:	24 83       	std	Z+4, r18	; 0x04
	*led -> DDR |= (1<<led->pinNum);
     ad8:	fb 01       	movw	r30, r22
     ada:	30 81       	ld	r19, Z
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <Led_init+0x1a>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	2a 95       	dec	r18
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <Led_init+0x16>
     aea:	83 2b       	or	r24, r19
     aec:	80 83       	st	Z, r24
     aee:	08 95       	ret

00000af0 <Led_Off>:
}

void Led_Off(led_t *led) 
{
	*(led->PORT) = (*(led->PORT) & ~(ON<< led -> pinNum));
     af0:	dc 01       	movw	r26, r24
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	ed 91       	ld	r30, X+
     af6:	fc 91       	ld	r31, X
     af8:	13 97       	sbiw	r26, 0x03	; 3
     afa:	40 81       	ld	r20, Z
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	b9 01       	movw	r22, r18
     b02:	14 96       	adiw	r26, 0x04	; 4
     b04:	0c 90       	ld	r0, X
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <Led_Off+0x1c>
     b08:	66 0f       	add	r22, r22
     b0a:	77 1f       	adc	r23, r23
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <Led_Off+0x18>
     b10:	cb 01       	movw	r24, r22
     b12:	80 95       	com	r24
     b14:	84 23       	and	r24, r20
     b16:	80 83       	st	Z, r24
     b18:	08 95       	ret

00000b1a <Led_On>:
}

void Led_On(led_t *led)
{
     b1a:	dc 01       	movw	r26, r24
	*(led->PORT) = (*(led->PORT) | (ON<< led -> pinNum));
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	ed 91       	ld	r30, X+
     b20:	fc 91       	ld	r31, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	40 81       	ld	r20, Z
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	c9 01       	movw	r24, r18
     b2c:	14 96       	adiw	r26, 0x04	; 4
     b2e:	0c 90       	ld	r0, X
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <Led_On+0x1c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <Led_On+0x18>
     b3a:	84 2b       	or	r24, r20
     b3c:	80 83       	st	Z, r24
     b3e:	08 95       	ret

00000b40 <__vector_9>:
	//FND_ISR_Process();
	//TCNT0 = 131;
//}

ISR(TIMER2_COMP_vect)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	0b b6       	in	r0, 0x3b	; 59
     b4c:	0f 92       	push	r0
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
	TimeClock_incMilisec();
     b66:	48 db       	rcall	.-2416   	; 0x1f8 <TimeClock_incMilisec>
	StopWatch_incMilisec();
     b68:	bf db       	rcall	.-2178   	; 0x2e8 <StopWatch_incMilisec>
    Modify_Blink();
     b6a:	93 db       	rcall	.-2266   	; 0x292 <Modify_Blink>
     b6c:	0a dc       	rcall	.-2028   	; 0x382 <Timer_decMilisec>
	Timer_decMilisec();
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
}
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0b be       	out	0x3b, r0	; 59
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <main>:
     b94:	ad da       	rcall	.-2726   	; 0xf0 <ClockMachine_init>
     b96:	78 94       	sei
    ClockMachine_init();
	sei();
	
    while (1) 
    {
		ClockMachine_run();
     b98:	a6 de       	rcall	.-692    	; 0x8e6 <ClockMachine_run>
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <main+0x4>

00000b9c <Gpio_initPort>:
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
     b9c:	61 30       	cpi	r22, 0x01	; 1
     b9e:	21 f4       	brne	.+8      	; 0xba8 <Gpio_initPort+0xc>
     ba0:	2f ef       	ldi	r18, 0xFF	; 255
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	08 95       	ret
     ba8:	fc 01       	movw	r30, r24
     baa:	10 82       	st	Z, r1
     bac:	08 95       	ret

00000bae <Gpio_initPin>:
     bae:	61 30       	cpi	r22, 0x01	; 1
     bb0:	61 f4       	brne	.+24     	; 0xbca <Gpio_initPin+0x1c>
     bb2:	fc 01       	movw	r30, r24
     bb4:	50 81       	ld	r21, Z
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	04 2e       	mov	r0, r20
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <Gpio_initPin+0x14>
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <Gpio_initPin+0x10>
     bc6:	25 2b       	or	r18, r21
     bc8:	20 83       	st	Z, r18
     bca:	61 11       	cpse	r22, r1
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <Gpio_initPin+0x38>
     bce:	fc 01       	movw	r30, r24
     bd0:	50 81       	ld	r21, Z
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <Gpio_initPin+0x2e>
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	4a 95       	dec	r20
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <Gpio_initPin+0x2a>
     be0:	20 95       	com	r18
     be2:	25 23       	and	r18, r21
     be4:	20 83       	st	Z, r18
     be6:	08 95       	ret

00000be8 <Gpio_WritePort>:
     be8:	fc 01       	movw	r30, r24
     bea:	60 83       	st	Z, r22
     bec:	08 95       	ret

00000bee <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <Gpio_ReadPin+0xc>
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	08 95       	ret

00000c02 <TIM2_CTC_init>:
	TCNT0 = 131;
}

void TIM2_CTC_init()
{
	TCCR2 |= (0<<CS02) | (1<<CS01) | (1<<CS00); //prescaler /64
     c02:	85 b5       	in	r24, 0x25	; 37
     c04:	83 60       	ori	r24, 0x03	; 3
     c06:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) |(0<<WGM20); //CTC 모드
     c08:	85 b5       	in	r24, 0x25	; 37
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //Output Compare Match Interrupt Enable
     c0e:	87 b7       	in	r24, 0x37	; 55
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249;
     c14:	89 ef       	ldi	r24, 0xF9	; 249
     c16:	83 bd       	out	0x23, r24	; 35
     c18:	08 95       	ret

00000c1a <__divmodhi4>:
     c1a:	97 fb       	bst	r25, 7
     c1c:	07 2e       	mov	r0, r23
     c1e:	16 f4       	brtc	.+4      	; 0xc24 <__divmodhi4+0xa>
     c20:	00 94       	com	r0
     c22:	06 d0       	rcall	.+12     	; 0xc30 <__divmodhi4_neg1>
     c24:	77 fd       	sbrc	r23, 7
     c26:	08 d0       	rcall	.+16     	; 0xc38 <__divmodhi4_neg2>
     c28:	23 d0       	rcall	.+70     	; 0xc70 <__udivmodhi4>
     c2a:	07 fc       	sbrc	r0, 7
     c2c:	05 d0       	rcall	.+10     	; 0xc38 <__divmodhi4_neg2>
     c2e:	3e f4       	brtc	.+14     	; 0xc3e <__divmodhi4_exit>

00000c30 <__divmodhi4_neg1>:
     c30:	90 95       	com	r25
     c32:	81 95       	neg	r24
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	08 95       	ret

00000c38 <__divmodhi4_neg2>:
     c38:	70 95       	com	r23
     c3a:	61 95       	neg	r22
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c3e <__divmodhi4_exit>:
     c3e:	08 95       	ret

00000c40 <__tablejump2__>:
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	00 24       	eor	r0, r0
     c46:	00 1c       	adc	r0, r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	07 90       	elpm	r0, Z+
     c4c:	f6 91       	elpm	r31, Z
     c4e:	e0 2d       	mov	r30, r0
     c50:	09 94       	ijmp

00000c52 <__umulhisi3>:
     c52:	a2 9f       	mul	r26, r18
     c54:	b0 01       	movw	r22, r0
     c56:	b3 9f       	mul	r27, r19
     c58:	c0 01       	movw	r24, r0
     c5a:	a3 9f       	mul	r26, r19
     c5c:	70 0d       	add	r23, r0
     c5e:	81 1d       	adc	r24, r1
     c60:	11 24       	eor	r1, r1
     c62:	91 1d       	adc	r25, r1
     c64:	b2 9f       	mul	r27, r18
     c66:	70 0d       	add	r23, r0
     c68:	81 1d       	adc	r24, r1
     c6a:	11 24       	eor	r1, r1
     c6c:	91 1d       	adc	r25, r1
     c6e:	08 95       	ret

00000c70 <__udivmodhi4>:
     c70:	aa 1b       	sub	r26, r26
     c72:	bb 1b       	sub	r27, r27
     c74:	51 e1       	ldi	r21, 0x11	; 17
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <__udivmodhi4_ep>

00000c78 <__udivmodhi4_loop>:
     c78:	aa 1f       	adc	r26, r26
     c7a:	bb 1f       	adc	r27, r27
     c7c:	a6 17       	cp	r26, r22
     c7e:	b7 07       	cpc	r27, r23
     c80:	10 f0       	brcs	.+4      	; 0xc86 <__udivmodhi4_ep>
     c82:	a6 1b       	sub	r26, r22
     c84:	b7 0b       	sbc	r27, r23

00000c86 <__udivmodhi4_ep>:
     c86:	88 1f       	adc	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	5a 95       	dec	r21
     c8c:	a9 f7       	brne	.-22     	; 0xc78 <__udivmodhi4_loop>
     c8e:	80 95       	com	r24
     c90:	90 95       	com	r25
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	08 95       	ret

00000c98 <sprintf>:
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2e 97       	sbiw	r28, 0x0e	; 14
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	0d 89       	ldd	r16, Y+21	; 0x15
     cb2:	1e 89       	ldd	r17, Y+22	; 0x16
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	8c 83       	std	Y+4, r24	; 0x04
     cb8:	1a 83       	std	Y+2, r17	; 0x02
     cba:	09 83       	std	Y+1, r16	; 0x01
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	9f e7       	ldi	r25, 0x7F	; 127
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	ae 01       	movw	r20, r28
     cc6:	47 5e       	subi	r20, 0xE7	; 231
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	6f 89       	ldd	r22, Y+23	; 0x17
     ccc:	78 8d       	ldd	r23, Y+24	; 0x18
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	10 d0       	rcall	.+32     	; 0xcf4 <vfprintf>
     cd4:	ef 81       	ldd	r30, Y+7	; 0x07
     cd6:	f8 85       	ldd	r31, Y+8	; 0x08
     cd8:	e0 0f       	add	r30, r16
     cda:	f1 1f       	adc	r31, r17
     cdc:	10 82       	st	Z, r1
     cde:	2e 96       	adiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <vfprintf>:
     cf4:	2f 92       	push	r2
     cf6:	3f 92       	push	r3
     cf8:	4f 92       	push	r4
     cfa:	5f 92       	push	r5
     cfc:	6f 92       	push	r6
     cfe:	7f 92       	push	r7
     d00:	8f 92       	push	r8
     d02:	9f 92       	push	r9
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	2b 97       	sbiw	r28, 0x0b	; 11
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	6c 01       	movw	r12, r24
     d2a:	7b 01       	movw	r14, r22
     d2c:	8a 01       	movw	r16, r20
     d2e:	fc 01       	movw	r30, r24
     d30:	17 82       	std	Z+7, r1	; 0x07
     d32:	16 82       	std	Z+6, r1	; 0x06
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	81 ff       	sbrs	r24, 1
     d38:	bf c1       	rjmp	.+894    	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	3c 01       	movw	r6, r24
     d40:	f6 01       	movw	r30, r12
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	f7 01       	movw	r30, r14
     d46:	93 fd       	sbrc	r25, 3
     d48:	85 91       	lpm	r24, Z+
     d4a:	93 ff       	sbrs	r25, 3
     d4c:	81 91       	ld	r24, Z+
     d4e:	7f 01       	movw	r14, r30
     d50:	88 23       	and	r24, r24
     d52:	09 f4       	brne	.+2      	; 0xd56 <vfprintf+0x62>
     d54:	ad c1       	rjmp	.+858    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     d56:	85 32       	cpi	r24, 0x25	; 37
     d58:	39 f4       	brne	.+14     	; 0xd68 <vfprintf+0x74>
     d5a:	93 fd       	sbrc	r25, 3
     d5c:	85 91       	lpm	r24, Z+
     d5e:	93 ff       	sbrs	r25, 3
     d60:	81 91       	ld	r24, Z+
     d62:	7f 01       	movw	r14, r30
     d64:	85 32       	cpi	r24, 0x25	; 37
     d66:	21 f4       	brne	.+8      	; 0xd70 <vfprintf+0x7c>
     d68:	b6 01       	movw	r22, r12
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	d6 d1       	rcall	.+940    	; 0x111a <fputc>
     d6e:	e8 cf       	rjmp	.-48     	; 0xd40 <vfprintf+0x4c>
     d70:	91 2c       	mov	r9, r1
     d72:	21 2c       	mov	r2, r1
     d74:	31 2c       	mov	r3, r1
     d76:	ff e1       	ldi	r31, 0x1F	; 31
     d78:	f3 15       	cp	r31, r3
     d7a:	d8 f0       	brcs	.+54     	; 0xdb2 <vfprintf+0xbe>
     d7c:	8b 32       	cpi	r24, 0x2B	; 43
     d7e:	79 f0       	breq	.+30     	; 0xd9e <vfprintf+0xaa>
     d80:	38 f4       	brcc	.+14     	; 0xd90 <vfprintf+0x9c>
     d82:	80 32       	cpi	r24, 0x20	; 32
     d84:	79 f0       	breq	.+30     	; 0xda4 <vfprintf+0xb0>
     d86:	83 32       	cpi	r24, 0x23	; 35
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <vfprintf+0xbe>
     d8a:	23 2d       	mov	r18, r3
     d8c:	20 61       	ori	r18, 0x10	; 16
     d8e:	1d c0       	rjmp	.+58     	; 0xdca <vfprintf+0xd6>
     d90:	8d 32       	cpi	r24, 0x2D	; 45
     d92:	61 f0       	breq	.+24     	; 0xdac <vfprintf+0xb8>
     d94:	80 33       	cpi	r24, 0x30	; 48
     d96:	69 f4       	brne	.+26     	; 0xdb2 <vfprintf+0xbe>
     d98:	23 2d       	mov	r18, r3
     d9a:	21 60       	ori	r18, 0x01	; 1
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <vfprintf+0xd6>
     d9e:	83 2d       	mov	r24, r3
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	38 2e       	mov	r3, r24
     da4:	e3 2d       	mov	r30, r3
     da6:	e4 60       	ori	r30, 0x04	; 4
     da8:	3e 2e       	mov	r3, r30
     daa:	2a c0       	rjmp	.+84     	; 0xe00 <vfprintf+0x10c>
     dac:	f3 2d       	mov	r31, r3
     dae:	f8 60       	ori	r31, 0x08	; 8
     db0:	1d c0       	rjmp	.+58     	; 0xdec <vfprintf+0xf8>
     db2:	37 fc       	sbrc	r3, 7
     db4:	2d c0       	rjmp	.+90     	; 0xe10 <vfprintf+0x11c>
     db6:	20 ed       	ldi	r18, 0xD0	; 208
     db8:	28 0f       	add	r18, r24
     dba:	2a 30       	cpi	r18, 0x0A	; 10
     dbc:	40 f0       	brcs	.+16     	; 0xdce <vfprintf+0xda>
     dbe:	8e 32       	cpi	r24, 0x2E	; 46
     dc0:	b9 f4       	brne	.+46     	; 0xdf0 <vfprintf+0xfc>
     dc2:	36 fc       	sbrc	r3, 6
     dc4:	75 c1       	rjmp	.+746    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     dc6:	23 2d       	mov	r18, r3
     dc8:	20 64       	ori	r18, 0x40	; 64
     dca:	32 2e       	mov	r3, r18
     dcc:	19 c0       	rjmp	.+50     	; 0xe00 <vfprintf+0x10c>
     dce:	36 fe       	sbrs	r3, 6
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0xea>
     dd2:	8a e0       	ldi	r24, 0x0A	; 10
     dd4:	98 9e       	mul	r9, r24
     dd6:	20 0d       	add	r18, r0
     dd8:	11 24       	eor	r1, r1
     dda:	92 2e       	mov	r9, r18
     ddc:	11 c0       	rjmp	.+34     	; 0xe00 <vfprintf+0x10c>
     dde:	ea e0       	ldi	r30, 0x0A	; 10
     de0:	2e 9e       	mul	r2, r30
     de2:	20 0d       	add	r18, r0
     de4:	11 24       	eor	r1, r1
     de6:	22 2e       	mov	r2, r18
     de8:	f3 2d       	mov	r31, r3
     dea:	f0 62       	ori	r31, 0x20	; 32
     dec:	3f 2e       	mov	r3, r31
     dee:	08 c0       	rjmp	.+16     	; 0xe00 <vfprintf+0x10c>
     df0:	8c 36       	cpi	r24, 0x6C	; 108
     df2:	21 f4       	brne	.+8      	; 0xdfc <vfprintf+0x108>
     df4:	83 2d       	mov	r24, r3
     df6:	80 68       	ori	r24, 0x80	; 128
     df8:	38 2e       	mov	r3, r24
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x10c>
     dfc:	88 36       	cpi	r24, 0x68	; 104
     dfe:	41 f4       	brne	.+16     	; 0xe10 <vfprintf+0x11c>
     e00:	f7 01       	movw	r30, r14
     e02:	93 fd       	sbrc	r25, 3
     e04:	85 91       	lpm	r24, Z+
     e06:	93 ff       	sbrs	r25, 3
     e08:	81 91       	ld	r24, Z+
     e0a:	7f 01       	movw	r14, r30
     e0c:	81 11       	cpse	r24, r1
     e0e:	b3 cf       	rjmp	.-154    	; 0xd76 <vfprintf+0x82>
     e10:	98 2f       	mov	r25, r24
     e12:	9f 7d       	andi	r25, 0xDF	; 223
     e14:	95 54       	subi	r25, 0x45	; 69
     e16:	93 30       	cpi	r25, 0x03	; 3
     e18:	28 f4       	brcc	.+10     	; 0xe24 <vfprintf+0x130>
     e1a:	0c 5f       	subi	r16, 0xFC	; 252
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	9f e3       	ldi	r25, 0x3F	; 63
     e20:	99 83       	std	Y+1, r25	; 0x01
     e22:	0d c0       	rjmp	.+26     	; 0xe3e <vfprintf+0x14a>
     e24:	83 36       	cpi	r24, 0x63	; 99
     e26:	31 f0       	breq	.+12     	; 0xe34 <vfprintf+0x140>
     e28:	83 37       	cpi	r24, 0x73	; 115
     e2a:	71 f0       	breq	.+28     	; 0xe48 <vfprintf+0x154>
     e2c:	83 35       	cpi	r24, 0x53	; 83
     e2e:	09 f0       	breq	.+2      	; 0xe32 <vfprintf+0x13e>
     e30:	55 c0       	rjmp	.+170    	; 0xedc <vfprintf+0x1e8>
     e32:	20 c0       	rjmp	.+64     	; 0xe74 <vfprintf+0x180>
     e34:	f8 01       	movw	r30, r16
     e36:	80 81       	ld	r24, Z
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	88 24       	eor	r8, r8
     e40:	83 94       	inc	r8
     e42:	91 2c       	mov	r9, r1
     e44:	53 01       	movw	r10, r6
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <vfprintf+0x178>
     e48:	28 01       	movw	r4, r16
     e4a:	f2 e0       	ldi	r31, 0x02	; 2
     e4c:	4f 0e       	add	r4, r31
     e4e:	51 1c       	adc	r5, r1
     e50:	f8 01       	movw	r30, r16
     e52:	a0 80       	ld	r10, Z
     e54:	b1 80       	ldd	r11, Z+1	; 0x01
     e56:	36 fe       	sbrs	r3, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x16c>
     e5a:	69 2d       	mov	r22, r9
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x170>
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	c5 01       	movw	r24, r10
     e66:	4e d1       	rcall	.+668    	; 0x1104 <strnlen>
     e68:	4c 01       	movw	r8, r24
     e6a:	82 01       	movw	r16, r4
     e6c:	f3 2d       	mov	r31, r3
     e6e:	ff 77       	andi	r31, 0x7F	; 127
     e70:	3f 2e       	mov	r3, r31
     e72:	15 c0       	rjmp	.+42     	; 0xe9e <vfprintf+0x1aa>
     e74:	28 01       	movw	r4, r16
     e76:	22 e0       	ldi	r18, 0x02	; 2
     e78:	42 0e       	add	r4, r18
     e7a:	51 1c       	adc	r5, r1
     e7c:	f8 01       	movw	r30, r16
     e7e:	a0 80       	ld	r10, Z
     e80:	b1 80       	ldd	r11, Z+1	; 0x01
     e82:	36 fe       	sbrs	r3, 6
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <vfprintf+0x198>
     e86:	69 2d       	mov	r22, r9
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <vfprintf+0x19c>
     e8c:	6f ef       	ldi	r22, 0xFF	; 255
     e8e:	7f ef       	ldi	r23, 0xFF	; 255
     e90:	c5 01       	movw	r24, r10
     e92:	2d d1       	rcall	.+602    	; 0x10ee <strnlen_P>
     e94:	4c 01       	movw	r8, r24
     e96:	f3 2d       	mov	r31, r3
     e98:	f0 68       	ori	r31, 0x80	; 128
     e9a:	3f 2e       	mov	r3, r31
     e9c:	82 01       	movw	r16, r4
     e9e:	33 fc       	sbrc	r3, 3
     ea0:	19 c0       	rjmp	.+50     	; 0xed4 <vfprintf+0x1e0>
     ea2:	82 2d       	mov	r24, r2
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 16       	cp	r8, r24
     ea8:	99 06       	cpc	r9, r25
     eaa:	a0 f4       	brcc	.+40     	; 0xed4 <vfprintf+0x1e0>
     eac:	b6 01       	movw	r22, r12
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	33 d1       	rcall	.+614    	; 0x111a <fputc>
     eb4:	2a 94       	dec	r2
     eb6:	f5 cf       	rjmp	.-22     	; 0xea2 <vfprintf+0x1ae>
     eb8:	f5 01       	movw	r30, r10
     eba:	37 fc       	sbrc	r3, 7
     ebc:	85 91       	lpm	r24, Z+
     ebe:	37 fe       	sbrs	r3, 7
     ec0:	81 91       	ld	r24, Z+
     ec2:	5f 01       	movw	r10, r30
     ec4:	b6 01       	movw	r22, r12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	28 d1       	rcall	.+592    	; 0x111a <fputc>
     eca:	21 10       	cpse	r2, r1
     ecc:	2a 94       	dec	r2
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	82 1a       	sub	r8, r18
     ed2:	91 08       	sbc	r9, r1
     ed4:	81 14       	cp	r8, r1
     ed6:	91 04       	cpc	r9, r1
     ed8:	79 f7       	brne	.-34     	; 0xeb8 <vfprintf+0x1c4>
     eda:	e1 c0       	rjmp	.+450    	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
     edc:	84 36       	cpi	r24, 0x64	; 100
     ede:	11 f0       	breq	.+4      	; 0xee4 <vfprintf+0x1f0>
     ee0:	89 36       	cpi	r24, 0x69	; 105
     ee2:	39 f5       	brne	.+78     	; 0xf32 <vfprintf+0x23e>
     ee4:	f8 01       	movw	r30, r16
     ee6:	37 fe       	sbrs	r3, 7
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <vfprintf+0x204>
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	0c 5f       	subi	r16, 0xFC	; 252
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	08 c0       	rjmp	.+16     	; 0xf08 <vfprintf+0x214>
     ef8:	60 81       	ld	r22, Z
     efa:	71 81       	ldd	r23, Z+1	; 0x01
     efc:	07 2e       	mov	r0, r23
     efe:	00 0c       	add	r0, r0
     f00:	88 0b       	sbc	r24, r24
     f02:	99 0b       	sbc	r25, r25
     f04:	0e 5f       	subi	r16, 0xFE	; 254
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
     f08:	f3 2d       	mov	r31, r3
     f0a:	ff 76       	andi	r31, 0x6F	; 111
     f0c:	3f 2e       	mov	r3, r31
     f0e:	97 ff       	sbrs	r25, 7
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <vfprintf+0x230>
     f12:	90 95       	com	r25
     f14:	80 95       	com	r24
     f16:	70 95       	com	r23
     f18:	61 95       	neg	r22
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	8f 4f       	sbci	r24, 0xFF	; 255
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	f0 68       	ori	r31, 0x80	; 128
     f22:	3f 2e       	mov	r3, r31
     f24:	2a e0       	ldi	r18, 0x0A	; 10
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	a3 01       	movw	r20, r6
     f2a:	33 d1       	rcall	.+614    	; 0x1192 <__ultoa_invert>
     f2c:	88 2e       	mov	r8, r24
     f2e:	86 18       	sub	r8, r6
     f30:	44 c0       	rjmp	.+136    	; 0xfba <vfprintf+0x2c6>
     f32:	85 37       	cpi	r24, 0x75	; 117
     f34:	31 f4       	brne	.+12     	; 0xf42 <vfprintf+0x24e>
     f36:	23 2d       	mov	r18, r3
     f38:	2f 7e       	andi	r18, 0xEF	; 239
     f3a:	b2 2e       	mov	r11, r18
     f3c:	2a e0       	ldi	r18, 0x0A	; 10
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	25 c0       	rjmp	.+74     	; 0xf8c <vfprintf+0x298>
     f42:	93 2d       	mov	r25, r3
     f44:	99 7f       	andi	r25, 0xF9	; 249
     f46:	b9 2e       	mov	r11, r25
     f48:	8f 36       	cpi	r24, 0x6F	; 111
     f4a:	c1 f0       	breq	.+48     	; 0xf7c <vfprintf+0x288>
     f4c:	18 f4       	brcc	.+6      	; 0xf54 <vfprintf+0x260>
     f4e:	88 35       	cpi	r24, 0x58	; 88
     f50:	79 f0       	breq	.+30     	; 0xf70 <vfprintf+0x27c>
     f52:	ae c0       	rjmp	.+348    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     f54:	80 37       	cpi	r24, 0x70	; 112
     f56:	19 f0       	breq	.+6      	; 0xf5e <vfprintf+0x26a>
     f58:	88 37       	cpi	r24, 0x78	; 120
     f5a:	21 f0       	breq	.+8      	; 0xf64 <vfprintf+0x270>
     f5c:	a9 c0       	rjmp	.+338    	; 0x10b0 <__DATA_REGION_LENGTH__+0xb0>
     f5e:	e9 2f       	mov	r30, r25
     f60:	e0 61       	ori	r30, 0x10	; 16
     f62:	be 2e       	mov	r11, r30
     f64:	b4 fe       	sbrs	r11, 4
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <vfprintf+0x28e>
     f68:	fb 2d       	mov	r31, r11
     f6a:	f4 60       	ori	r31, 0x04	; 4
     f6c:	bf 2e       	mov	r11, r31
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <vfprintf+0x28e>
     f70:	34 fe       	sbrs	r3, 4
     f72:	0a c0       	rjmp	.+20     	; 0xf88 <vfprintf+0x294>
     f74:	29 2f       	mov	r18, r25
     f76:	26 60       	ori	r18, 0x06	; 6
     f78:	b2 2e       	mov	r11, r18
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x294>
     f7c:	28 e0       	ldi	r18, 0x08	; 8
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <vfprintf+0x298>
     f82:	20 e1       	ldi	r18, 0x10	; 16
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x298>
     f88:	20 e1       	ldi	r18, 0x10	; 16
     f8a:	32 e0       	ldi	r19, 0x02	; 2
     f8c:	f8 01       	movw	r30, r16
     f8e:	b7 fe       	sbrs	r11, 7
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <vfprintf+0x2ac>
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	82 81       	ldd	r24, Z+2	; 0x02
     f98:	93 81       	ldd	r25, Z+3	; 0x03
     f9a:	0c 5f       	subi	r16, 0xFC	; 252
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <vfprintf+0x2b8>
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 5f       	subi	r16, 0xFE	; 254
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	a3 01       	movw	r20, r6
     fae:	f1 d0       	rcall	.+482    	; 0x1192 <__ultoa_invert>
     fb0:	88 2e       	mov	r8, r24
     fb2:	86 18       	sub	r8, r6
     fb4:	fb 2d       	mov	r31, r11
     fb6:	ff 77       	andi	r31, 0x7F	; 127
     fb8:	3f 2e       	mov	r3, r31
     fba:	36 fe       	sbrs	r3, 6
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <vfprintf+0x2e4>
     fbe:	23 2d       	mov	r18, r3
     fc0:	2e 7f       	andi	r18, 0xFE	; 254
     fc2:	a2 2e       	mov	r10, r18
     fc4:	89 14       	cp	r8, r9
     fc6:	58 f4       	brcc	.+22     	; 0xfde <vfprintf+0x2ea>
     fc8:	34 fe       	sbrs	r3, 4
     fca:	0b c0       	rjmp	.+22     	; 0xfe2 <vfprintf+0x2ee>
     fcc:	32 fc       	sbrc	r3, 2
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x2ee>
     fd0:	83 2d       	mov	r24, r3
     fd2:	8e 7e       	andi	r24, 0xEE	; 238
     fd4:	a8 2e       	mov	r10, r24
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <vfprintf+0x2ee>
     fd8:	b8 2c       	mov	r11, r8
     fda:	a3 2c       	mov	r10, r3
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <vfprintf+0x2f0>
     fde:	b8 2c       	mov	r11, r8
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <vfprintf+0x2f0>
     fe2:	b9 2c       	mov	r11, r9
     fe4:	a4 fe       	sbrs	r10, 4
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe8:	fe 01       	movw	r30, r28
     fea:	e8 0d       	add	r30, r8
     fec:	f1 1d       	adc	r31, r1
     fee:	80 81       	ld	r24, Z
     ff0:	80 33       	cpi	r24, 0x30	; 48
     ff2:	21 f4       	brne	.+8      	; 0xffc <vfprintf+0x308>
     ff4:	9a 2d       	mov	r25, r10
     ff6:	99 7e       	andi	r25, 0xE9	; 233
     ff8:	a9 2e       	mov	r10, r25
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
     ffc:	a2 fe       	sbrs	r10, 2
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1000:	b3 94       	inc	r11
    1002:	b3 94       	inc	r11
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    1006:	8a 2d       	mov	r24, r10
    1008:	86 78       	andi	r24, 0x86	; 134
    100a:	09 f0       	breq	.+2      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    100c:	b3 94       	inc	r11
    100e:	a3 fc       	sbrc	r10, 3
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
    1012:	a0 fe       	sbrs	r10, 0
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1016:	b2 14       	cp	r11, r2
    1018:	80 f4       	brcc	.+32     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    101a:	28 0c       	add	r2, r8
    101c:	92 2c       	mov	r9, r2
    101e:	9b 18       	sub	r9, r11
    1020:	0d c0       	rjmp	.+26     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1022:	b2 14       	cp	r11, r2
    1024:	58 f4       	brcc	.+22     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1026:	b6 01       	movw	r22, r12
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	76 d0       	rcall	.+236    	; 0x111a <fputc>
    102e:	b3 94       	inc	r11
    1030:	f8 cf       	rjmp	.-16     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1032:	b2 14       	cp	r11, r2
    1034:	18 f4       	brcc	.+6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1036:	2b 18       	sub	r2, r11
    1038:	02 c0       	rjmp	.+4      	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    103a:	98 2c       	mov	r9, r8
    103c:	21 2c       	mov	r2, r1
    103e:	a4 fe       	sbrs	r10, 4
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1042:	b6 01       	movw	r22, r12
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	68 d0       	rcall	.+208    	; 0x111a <fputc>
    104a:	a2 fe       	sbrs	r10, 2
    104c:	16 c0       	rjmp	.+44     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    104e:	a1 fc       	sbrc	r10, 1
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    1052:	88 e7       	ldi	r24, 0x78	; 120
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
    1058:	88 e5       	ldi	r24, 0x58	; 88
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	b6 01       	movw	r22, r12
    105e:	0c c0       	rjmp	.+24     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1060:	8a 2d       	mov	r24, r10
    1062:	86 78       	andi	r24, 0x86	; 134
    1064:	51 f0       	breq	.+20     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1066:	a1 fe       	sbrs	r10, 1
    1068:	02 c0       	rjmp	.+4      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    106a:	8b e2       	ldi	r24, 0x2B	; 43
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	a7 fc       	sbrc	r10, 7
    1072:	8d e2       	ldi	r24, 0x2D	; 45
    1074:	b6 01       	movw	r22, r12
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	50 d0       	rcall	.+160    	; 0x111a <fputc>
    107a:	89 14       	cp	r8, r9
    107c:	30 f4       	brcc	.+12     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    107e:	b6 01       	movw	r22, r12
    1080:	80 e3       	ldi	r24, 0x30	; 48
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	4a d0       	rcall	.+148    	; 0x111a <fputc>
    1086:	9a 94       	dec	r9
    1088:	f8 cf       	rjmp	.-16     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    108a:	8a 94       	dec	r8
    108c:	f3 01       	movw	r30, r6
    108e:	e8 0d       	add	r30, r8
    1090:	f1 1d       	adc	r31, r1
    1092:	80 81       	ld	r24, Z
    1094:	b6 01       	movw	r22, r12
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	40 d0       	rcall	.+128    	; 0x111a <fputc>
    109a:	81 10       	cpse	r8, r1
    109c:	f6 cf       	rjmp	.-20     	; 0x108a <__DATA_REGION_LENGTH__+0x8a>
    109e:	22 20       	and	r2, r2
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    10a2:	4e ce       	rjmp	.-868    	; 0xd40 <vfprintf+0x4c>
    10a4:	b6 01       	movw	r22, r12
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	37 d0       	rcall	.+110    	; 0x111a <fputc>
    10ac:	2a 94       	dec	r2
    10ae:	f7 cf       	rjmp	.-18     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    10b0:	f6 01       	movw	r30, r12
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <__DATA_REGION_LENGTH__+0xbc>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	2b 96       	adiw	r28, 0x0b	; 11
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	cf 90       	pop	r12
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	7f 90       	pop	r7
    10e2:	6f 90       	pop	r6
    10e4:	5f 90       	pop	r5
    10e6:	4f 90       	pop	r4
    10e8:	3f 90       	pop	r3
    10ea:	2f 90       	pop	r2
    10ec:	08 95       	ret

000010ee <strnlen_P>:
    10ee:	fc 01       	movw	r30, r24
    10f0:	05 90       	lpm	r0, Z+
    10f2:	61 50       	subi	r22, 0x01	; 1
    10f4:	70 40       	sbci	r23, 0x00	; 0
    10f6:	01 10       	cpse	r0, r1
    10f8:	d8 f7       	brcc	.-10     	; 0x10f0 <strnlen_P+0x2>
    10fa:	80 95       	com	r24
    10fc:	90 95       	com	r25
    10fe:	8e 0f       	add	r24, r30
    1100:	9f 1f       	adc	r25, r31
    1102:	08 95       	ret

00001104 <strnlen>:
    1104:	fc 01       	movw	r30, r24
    1106:	61 50       	subi	r22, 0x01	; 1
    1108:	70 40       	sbci	r23, 0x00	; 0
    110a:	01 90       	ld	r0, Z+
    110c:	01 10       	cpse	r0, r1
    110e:	d8 f7       	brcc	.-10     	; 0x1106 <strnlen+0x2>
    1110:	80 95       	com	r24
    1112:	90 95       	com	r25
    1114:	8e 0f       	add	r24, r30
    1116:	9f 1f       	adc	r25, r31
    1118:	08 95       	ret

0000111a <fputc>:
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	fb 01       	movw	r30, r22
    1124:	23 81       	ldd	r18, Z+3	; 0x03
    1126:	21 fd       	sbrc	r18, 1
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <fputc+0x16>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	2c c0       	rjmp	.+88     	; 0x1188 <fputc+0x6e>
    1130:	22 ff       	sbrs	r18, 2
    1132:	16 c0       	rjmp	.+44     	; 0x1160 <fputc+0x46>
    1134:	46 81       	ldd	r20, Z+6	; 0x06
    1136:	57 81       	ldd	r21, Z+7	; 0x07
    1138:	24 81       	ldd	r18, Z+4	; 0x04
    113a:	35 81       	ldd	r19, Z+5	; 0x05
    113c:	42 17       	cp	r20, r18
    113e:	53 07       	cpc	r21, r19
    1140:	44 f4       	brge	.+16     	; 0x1152 <fputc+0x38>
    1142:	a0 81       	ld	r26, Z
    1144:	b1 81       	ldd	r27, Z+1	; 0x01
    1146:	9d 01       	movw	r18, r26
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	31 83       	std	Z+1, r19	; 0x01
    114e:	20 83       	st	Z, r18
    1150:	8c 93       	st	X, r24
    1152:	26 81       	ldd	r18, Z+6	; 0x06
    1154:	37 81       	ldd	r19, Z+7	; 0x07
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	37 83       	std	Z+7, r19	; 0x07
    115c:	26 83       	std	Z+6, r18	; 0x06
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <fputc+0x6e>
    1160:	8b 01       	movw	r16, r22
    1162:	ec 01       	movw	r28, r24
    1164:	fb 01       	movw	r30, r22
    1166:	00 84       	ldd	r0, Z+8	; 0x08
    1168:	f1 85       	ldd	r31, Z+9	; 0x09
    116a:	e0 2d       	mov	r30, r0
    116c:	09 95       	icall
    116e:	89 2b       	or	r24, r25
    1170:	e1 f6       	brne	.-72     	; 0x112a <fputc+0x10>
    1172:	d8 01       	movw	r26, r16
    1174:	16 96       	adiw	r26, 0x06	; 6
    1176:	8d 91       	ld	r24, X+
    1178:	9c 91       	ld	r25, X
    117a:	17 97       	sbiw	r26, 0x07	; 7
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	17 96       	adiw	r26, 0x07	; 7
    1180:	9c 93       	st	X, r25
    1182:	8e 93       	st	-X, r24
    1184:	16 97       	sbiw	r26, 0x06	; 6
    1186:	ce 01       	movw	r24, r28
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <__ultoa_invert>:
    1192:	fa 01       	movw	r30, r20
    1194:	aa 27       	eor	r26, r26
    1196:	28 30       	cpi	r18, 0x08	; 8
    1198:	51 f1       	breq	.+84     	; 0x11ee <__ultoa_invert+0x5c>
    119a:	20 31       	cpi	r18, 0x10	; 16
    119c:	81 f1       	breq	.+96     	; 0x11fe <__ultoa_invert+0x6c>
    119e:	e8 94       	clt
    11a0:	6f 93       	push	r22
    11a2:	6e 7f       	andi	r22, 0xFE	; 254
    11a4:	6e 5f       	subi	r22, 0xFE	; 254
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	af 4f       	sbci	r26, 0xFF	; 255
    11ae:	b1 e0       	ldi	r27, 0x01	; 1
    11b0:	3e d0       	rcall	.+124    	; 0x122e <__ultoa_invert+0x9c>
    11b2:	b4 e0       	ldi	r27, 0x04	; 4
    11b4:	3c d0       	rcall	.+120    	; 0x122e <__ultoa_invert+0x9c>
    11b6:	67 0f       	add	r22, r23
    11b8:	78 1f       	adc	r23, r24
    11ba:	89 1f       	adc	r24, r25
    11bc:	9a 1f       	adc	r25, r26
    11be:	a1 1d       	adc	r26, r1
    11c0:	68 0f       	add	r22, r24
    11c2:	79 1f       	adc	r23, r25
    11c4:	8a 1f       	adc	r24, r26
    11c6:	91 1d       	adc	r25, r1
    11c8:	a1 1d       	adc	r26, r1
    11ca:	6a 0f       	add	r22, r26
    11cc:	71 1d       	adc	r23, r1
    11ce:	81 1d       	adc	r24, r1
    11d0:	91 1d       	adc	r25, r1
    11d2:	a1 1d       	adc	r26, r1
    11d4:	20 d0       	rcall	.+64     	; 0x1216 <__ultoa_invert+0x84>
    11d6:	09 f4       	brne	.+2      	; 0x11da <__ultoa_invert+0x48>
    11d8:	68 94       	set
    11da:	3f 91       	pop	r19
    11dc:	2a e0       	ldi	r18, 0x0A	; 10
    11de:	26 9f       	mul	r18, r22
    11e0:	11 24       	eor	r1, r1
    11e2:	30 19       	sub	r19, r0
    11e4:	30 5d       	subi	r19, 0xD0	; 208
    11e6:	31 93       	st	Z+, r19
    11e8:	de f6       	brtc	.-74     	; 0x11a0 <__ultoa_invert+0xe>
    11ea:	cf 01       	movw	r24, r30
    11ec:	08 95       	ret
    11ee:	46 2f       	mov	r20, r22
    11f0:	47 70       	andi	r20, 0x07	; 7
    11f2:	40 5d       	subi	r20, 0xD0	; 208
    11f4:	41 93       	st	Z+, r20
    11f6:	b3 e0       	ldi	r27, 0x03	; 3
    11f8:	0f d0       	rcall	.+30     	; 0x1218 <__ultoa_invert+0x86>
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__ultoa_invert+0x5c>
    11fc:	f6 cf       	rjmp	.-20     	; 0x11ea <__ultoa_invert+0x58>
    11fe:	46 2f       	mov	r20, r22
    1200:	4f 70       	andi	r20, 0x0F	; 15
    1202:	40 5d       	subi	r20, 0xD0	; 208
    1204:	4a 33       	cpi	r20, 0x3A	; 58
    1206:	18 f0       	brcs	.+6      	; 0x120e <__ultoa_invert+0x7c>
    1208:	49 5d       	subi	r20, 0xD9	; 217
    120a:	31 fd       	sbrc	r19, 1
    120c:	40 52       	subi	r20, 0x20	; 32
    120e:	41 93       	st	Z+, r20
    1210:	02 d0       	rcall	.+4      	; 0x1216 <__ultoa_invert+0x84>
    1212:	a9 f7       	brne	.-22     	; 0x11fe <__ultoa_invert+0x6c>
    1214:	ea cf       	rjmp	.-44     	; 0x11ea <__ultoa_invert+0x58>
    1216:	b4 e0       	ldi	r27, 0x04	; 4
    1218:	a6 95       	lsr	r26
    121a:	97 95       	ror	r25
    121c:	87 95       	ror	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	ba 95       	dec	r27
    1224:	c9 f7       	brne	.-14     	; 0x1218 <__ultoa_invert+0x86>
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 05       	cpc	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	08 95       	ret
    122e:	9b 01       	movw	r18, r22
    1230:	ac 01       	movw	r20, r24
    1232:	0a 2e       	mov	r0, r26
    1234:	06 94       	lsr	r0
    1236:	57 95       	ror	r21
    1238:	47 95       	ror	r20
    123a:	37 95       	ror	r19
    123c:	27 95       	ror	r18
    123e:	ba 95       	dec	r27
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__ultoa_invert+0xa2>
    1242:	62 0f       	add	r22, r18
    1244:	73 1f       	adc	r23, r19
    1246:	84 1f       	adc	r24, r20
    1248:	95 1f       	adc	r25, r21
    124a:	a0 1d       	adc	r26, r0
    124c:	08 95       	ret

0000124e <_exit>:
    124e:	f8 94       	cli

00001250 <__stop_program>:
    1250:	ff cf       	rjmp	.-2      	; 0x1250 <__stop_program>
