
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000faa  0000103e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00001064  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf9  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e84  00000000  00000000  00002ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e98  00000000  00000000  00003d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a2  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000970  00000000  00000000  00005752  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000060c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c4       	rjmp	.+2168   	; 0x89e <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	05 c4       	rjmp	.+2058   	; 0x84c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 34       	cpi	r26, 0x49	; 73
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	14 d4       	rcall	.+2088   	; 0x8ec <main>
  c4:	70 c7       	rjmp	.+3808   	; 0xfa6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Clock_init>:

btn_t btnMode, btnModify, btnHour, btnMin;

void Clock_init()
{
	milisec = 0;
  c8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <milisec+0x1>
  cc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <milisec>
	sec = 0;
  d0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <sec>
	min = 0;
  d4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <min>
	hour = 0;
  d8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hour>
	state = SECMIL;
  dc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state>
	FND_init();
  e0:	e0 d1       	rcall	.+960    	; 0x4a2 <FND_init>
	LCD_init();
  e2:	4a d3       	rcall	.+1684   	; 0x778 <LCD_init>
	TIM0_OVF_init();
  e4:	3a d4       	rcall	.+2164   	; 0x95a <TIM0_OVF_init>
  e6:	42 d4       	rcall	.+2180   	; 0x96c <TIM2_CTC_init>
	TIM2_CTC_init();
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnMode,&DDRA,&PINA,0);
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	6a e3       	ldi	r22, 0x3A	; 58
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	9e d1       	rcall	.+828    	; 0x434 <BUTTON_init>
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnModify,&DDRA,&PINA,1);
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	6a e3       	ldi	r22, 0x3A	; 58
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	8b e3       	ldi	r24, 0x3B	; 59
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	96 d1       	rcall	.+812    	; 0x434 <BUTTON_init>
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnHour,&DDRA,&PINA,2);
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	6a e3       	ldi	r22, 0x3A	; 58
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	89 e2       	ldi	r24, 0x29	; 41
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	8e d1       	rcall	.+796    	; 0x434 <BUTTON_init>
 118:	23 e0       	ldi	r18, 0x03	; 3
 11a:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnMin,&DDRA,&PINA,3);
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	6a e3       	ldi	r22, 0x3A	; 58
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	86 c1       	rjmp	.+780    	; 0x434 <BUTTON_init>
 128:	08 95       	ret

0000012a <Clock_incMilisec>:
 12a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
}

void Clock_incMilisec()
{
	if(state == SECMIL || state == HOURMIN)
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	08 f0       	brcs	.+2      	; 0x134 <Clock_incMilisec+0xa>
 132:	47 c0       	rjmp	.+142    	; 0x1c2 <Clock_incMilisec+0x98>
	{
		milisec = (milisec+1) % 1000;
 134:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <milisec>
 138:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <milisec+0x1>
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	9a 01       	movw	r18, r20
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	36 95       	lsr	r19
 148:	27 95       	ror	r18
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	a5 ec       	ldi	r26, 0xC5	; 197
 150:	b0 e2       	ldi	r27, 0x20	; 32
 152:	2b d4       	rcall	.+2134   	; 0x9aa <__umulhisi3>
 154:	92 95       	swap	r25
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 27       	eor	r24, r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	89 27       	eor	r24, r25
 160:	68 ee       	ldi	r22, 0xE8	; 232
 162:	73 e0       	ldi	r23, 0x03	; 3
 164:	86 9f       	mul	r24, r22
 166:	90 01       	movw	r18, r0
 168:	87 9f       	mul	r24, r23
 16a:	30 0d       	add	r19, r0
 16c:	96 9f       	mul	r25, r22
 16e:	30 0d       	add	r19, r0
 170:	11 24       	eor	r1, r1
 172:	ca 01       	movw	r24, r20
 174:	82 1b       	sub	r24, r18
 176:	93 0b       	sbc	r25, r19
 178:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <milisec+0x1>
 17c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <milisec>
		if(milisec) return;
 180:	89 2b       	or	r24, r25
 182:	f9 f4       	brne	.+62     	; 0x1c2 <Clock_incMilisec+0x98>
		
		sec = (sec+1) % 60;
 184:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	6c e3       	ldi	r22, 0x3C	; 60
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	f9 d3       	rcall	.+2034   	; 0x984 <__divmodhi4>
 192:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <sec>
		if(sec) return;
 196:	81 11       	cpse	r24, r1
 198:	14 c0       	rjmp	.+40     	; 0x1c2 <Clock_incMilisec+0x98>
		
		min = (min+1) % 60;
 19a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	6c e3       	ldi	r22, 0x3C	; 60
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	ee d3       	rcall	.+2012   	; 0x984 <__divmodhi4>
 1a8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <min>
		if(min) return;
 1ac:	81 11       	cpse	r24, r1
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <Clock_incMilisec+0x98>
		
		hour = (hour+1) % 24;
 1b0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	68 e1       	ldi	r22, 0x18	; 24
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	e3 d3       	rcall	.+1990   	; 0x984 <__divmodhi4>
 1be:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <hour>
 1c2:	08 95       	ret

000001c4 <Clock_eventCheck>:
	}
}

void Clock_eventCheck()
{
	switch(state)
 1c4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <Clock_eventCheck+0x22>
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <Clock_eventCheck+0x10>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	c9 f0       	breq	.+50     	; 0x204 <Clock_eventCheck+0x40>
 1d2:	08 95       	ret
	{
		case SECMIL:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	3a d1       	rcall	.+628    	; 0x44e <BUTTON_GETSTATE>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	b9 f5       	brne	.+110    	; 0x24c <Clock_eventCheck+0x88>
		{
			state = HOURMIN;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
 1e4:	08 95       	ret
		}
		break;
		case HOURMIN:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	31 d1       	rcall	.+610    	; 0x44e <BUTTON_GETSTATE>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <Clock_eventCheck+0x30>
		{
			state = SECMIL;
 1f0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state>
		}
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	2a d1       	rcall	.+596    	; 0x44e <BUTTON_GETSTATE>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	39 f5       	brne	.+78     	; 0x24c <Clock_eventCheck+0x88>
		{
			state = MODIFY;
 1fe:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
		}
		break;
		case MODIFY:
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
 202:	08 95       	ret
 204:	8b e3       	ldi	r24, 0x3B	; 59
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	22 d1       	rcall	.+580    	; 0x44e <BUTTON_GETSTATE>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	19 f4       	brne	.+6      	; 0x214 <Clock_eventCheck+0x50>
		{
			state = HOURMIN;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
		}
		if (BUTTON_GETSTATE(&btnHour) == ACT_REALESED)
 214:	89 e2       	ldi	r24, 0x29	; 41
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	1a d1       	rcall	.+564    	; 0x44e <BUTTON_GETSTATE>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	49 f4       	brne	.+18     	; 0x230 <Clock_eventCheck+0x6c>
		{
			hour = (hour+1)%24;
 21e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	68 e1       	ldi	r22, 0x18	; 24
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	ac d3       	rcall	.+1880   	; 0x984 <__divmodhi4>
 22c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <hour>
		}
		if (BUTTON_GETSTATE(&btnMin) == ACT_REALESED)
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0c d1       	rcall	.+536    	; 0x44e <BUTTON_GETSTATE>
 236:	82 30       	cpi	r24, 0x02	; 2
		{
			min = (min+1)%60;
 238:	49 f4       	brne	.+18     	; 0x24c <Clock_eventCheck+0x88>
 23a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	6c e3       	ldi	r22, 0x3C	; 60
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	9e d3       	rcall	.+1852   	; 0x984 <__divmodhi4>
 248:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <min>
 24c:	08 95       	ret

0000024e <Clock_execute>:
		break;
	}
}

void Clock_execute()
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	2a 97       	sbiw	r28, 0x0a	; 10
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
	uint16_t stopWatchData;
	switch(state)
 266:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	09 f4       	brne	.+2      	; 0x270 <Clock_execute+0x22>
 26e:	65 c0       	rjmp	.+202    	; 0x33a <Clock_execute+0xec>
 270:	20 f0       	brcs	.+8      	; 0x27a <Clock_execute+0x2c>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	09 f4       	brne	.+2      	; 0x278 <Clock_execute+0x2a>
 276:	a6 c0       	rjmp	.+332    	; 0x3c4 <Clock_execute+0x176>
 278:	cf c0       	rjmp	.+414    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		char Time[10];
		case SECMIL:
		stopWatchData =  (sec*100) + (milisec/10);
 27a:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <sec>
 27e:	14 e6       	ldi	r17, 0x64	; 100
 280:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <milisec>
 284:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <milisec+0x1>
 288:	ad ec       	ldi	r26, 0xCD	; 205
 28a:	bc ec       	ldi	r27, 0xCC	; 204
 28c:	8e d3       	rcall	.+1820   	; 0x9aa <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
		FND_setfndData(stopWatchData);
 29a:	14 9f       	mul	r17, r20
 29c:	80 0d       	add	r24, r0
 29e:	91 1d       	adc	r25, r1
 2a0:	11 24       	eor	r1, r1
 2a2:	10 d2       	rcall	.+1056   	; 0x6c4 <FND_setfndData>
		if ((milisec%100)<50)
 2a4:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <milisec>
 2a8:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <milisec+0x1>
 2ac:	9a 01       	movw	r18, r20
 2ae:	36 95       	lsr	r19
 2b0:	27 95       	ror	r18
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	ab e7       	ldi	r26, 0x7B	; 123
 2b8:	b4 e1       	ldi	r27, 0x14	; 20
 2ba:	77 d3       	rcall	.+1774   	; 0x9aa <__umulhisi3>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	18 9f       	mul	r17, r24
 2c2:	90 01       	movw	r18, r0
 2c4:	19 9f       	mul	r17, r25
 2c6:	30 0d       	add	r19, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	ca 01       	movw	r24, r20
 2cc:	82 1b       	sub	r24, r18
 2ce:	93 0b       	sbc	r25, r19
 2d0:	c2 97       	sbiw	r24, 0x32	; 50
		{
			FND_colonOn();
 2d2:	10 f4       	brcc	.+4      	; 0x2d8 <Clock_execute+0x8a>
 2d4:	02 d2       	rcall	.+1028   	; 0x6da <FND_colonOn>
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <Clock_execute+0x8c>
		}
		else
		{
			FND_colonOff();
 2d8:	04 d2       	rcall	.+1032   	; 0x6e2 <FND_colonOff>
 2da:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <sec>
		}
		static uint8_t prevSec = 0xff;
		if(sec!=prevSec)
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e2:	98 17       	cp	r25, r24
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <Clock_execute+0x9a>
 2e6:	98 c0       	rjmp	.+304    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			LCD_writeStringXY("Time Clock",0,3);
 2e8:	43 e0       	ldi	r20, 0x03	; 3
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	a2 d2       	rcall	.+1348   	; 0x836 <LCD_writeStringXY>
 2f2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
			sprintf(Time,"%02d:%02d:%02d",hour,min,sec);
 2f6:	1f 92       	push	r1
 2f8:	8f 93       	push	r24
 2fa:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 2fe:	1f 92       	push	r1
 300:	8f 93       	push	r24
 302:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 306:	1f 92       	push	r1
 308:	8f 93       	push	r24
 30a:	87 e1       	ldi	r24, 0x17	; 23
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	8e 01       	movw	r16, r28
 314:	0f 5f       	subi	r16, 0xFF	; 255
 316:	1f 4f       	sbci	r17, 0xFF	; 255
 318:	1f 93       	push	r17
 31a:	0f 93       	push	r16
 31c:	69 d3       	rcall	.+1746   	; 0x9f0 <sprintf>
			LCD_writeStringXY(Time,1,4);
 31e:	44 e0       	ldi	r20, 0x04	; 4
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	c8 01       	movw	r24, r16
 324:	88 d2       	rcall	.+1296   	; 0x836 <LCD_writeStringXY>
 326:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
			prevSec=sec;
 32a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	6f c0       	rjmp	.+222    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 33a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <hour>
		}
		break;
		case HOURMIN:
		stopWatchData =  hour*100 + min;
 33e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 342:	90 e0       	ldi	r25, 0x00	; 0
		FND_setfndData(stopWatchData);
 344:	34 e6       	ldi	r19, 0x64	; 100
 346:	23 9f       	mul	r18, r19
 348:	80 0d       	add	r24, r0
 34a:	91 1d       	adc	r25, r1
 34c:	11 24       	eor	r1, r1
 34e:	ba d1       	rcall	.+884    	; 0x6c4 <FND_setfndData>
		if (milisec<500)
 350:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <milisec>
 354:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <milisec+0x1>
 358:	84 3f       	cpi	r24, 0xF4	; 244
 35a:	91 40       	sbci	r25, 0x01	; 1
		{
			FND_colonOn();
 35c:	10 f4       	brcc	.+4      	; 0x362 <Clock_execute+0x114>
 35e:	bd d1       	rcall	.+890    	; 0x6da <FND_colonOn>
 360:	01 c0       	rjmp	.+2      	; 0x364 <Clock_execute+0x116>
		}
		else
		{
			FND_colonOff();
 362:	bf d1       	rcall	.+894    	; 0x6e2 <FND_colonOff>
 364:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <sec>
		}
		if(sec!=prevSec)
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	98 17       	cp	r25, r24
 36e:	09 f4       	brne	.+2      	; 0x372 <Clock_execute+0x124>
 370:	53 c0       	rjmp	.+166    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			LCD_writeStringXY("Time Clock",0,3);
 372:	43 e0       	ldi	r20, 0x03	; 3
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	5d d2       	rcall	.+1210   	; 0x836 <LCD_writeStringXY>
 37c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
			sprintf(Time,"%02d:%02d:%02d",hour,min,sec);
 380:	1f 92       	push	r1
 382:	8f 93       	push	r24
 384:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 388:	1f 92       	push	r1
 38a:	8f 93       	push	r24
 38c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 390:	1f 92       	push	r1
 392:	8f 93       	push	r24
 394:	87 e1       	ldi	r24, 0x17	; 23
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	9f 93       	push	r25
 39a:	8f 93       	push	r24
 39c:	8e 01       	movw	r16, r28
 39e:	0f 5f       	subi	r16, 0xFF	; 255
 3a0:	1f 4f       	sbci	r17, 0xFF	; 255
 3a2:	1f 93       	push	r17
 3a4:	0f 93       	push	r16
 3a6:	24 d3       	rcall	.+1608   	; 0x9f0 <sprintf>
			LCD_writeStringXY(Time,1,4);
 3a8:	44 e0       	ldi	r20, 0x04	; 4
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	c8 01       	movw	r24, r16
 3ae:	43 d2       	rcall	.+1158   	; 0x836 <LCD_writeStringXY>
 3b0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
			prevSec=sec;
 3b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	2a c0       	rjmp	.+84     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		}
		break;
		case MODIFY:
		stopWatchData =  hour*100 + min;
 3c4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <hour>
 3c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 3cc:	90 e0       	ldi	r25, 0x00	; 0
		FND_setfndData(stopWatchData);
 3ce:	34 e6       	ldi	r19, 0x64	; 100
 3d0:	23 9f       	mul	r18, r19
 3d2:	80 0d       	add	r24, r0
 3d4:	91 1d       	adc	r25, r1
 3d6:	11 24       	eor	r1, r1
 3d8:	75 d1       	rcall	.+746    	; 0x6c4 <FND_setfndData>
 3da:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
		sprintf(Time,"%02d:%02d:%02d",hour,min,sec);
 3de:	1f 92       	push	r1
 3e0:	8f 93       	push	r24
 3e2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 3e6:	1f 92       	push	r1
 3e8:	8f 93       	push	r24
 3ea:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 3ee:	1f 92       	push	r1
 3f0:	8f 93       	push	r24
 3f2:	87 e1       	ldi	r24, 0x17	; 23
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	9f 93       	push	r25
 3f8:	8f 93       	push	r24
 3fa:	8e 01       	movw	r16, r28
 3fc:	0f 5f       	subi	r16, 0xFF	; 255
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	1f 93       	push	r17
 402:	0f 93       	push	r16
 404:	f5 d2       	rcall	.+1514   	; 0x9f0 <sprintf>
		LCD_writeStringXY(Time,1,4);
 406:	44 e0       	ldi	r20, 0x04	; 4
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	c8 01       	movw	r24, r16
 40c:	14 d2       	rcall	.+1064   	; 0x836 <LCD_writeStringXY>
 40e:	0f b6       	in	r0, 0x3f	; 63
		break;
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	2a 96       	adiw	r28, 0x0a	; 10
	}
}
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <Clock_run>:
 42e:	ca de       	rcall	.-620    	; 0x1c4 <Clock_eventCheck>

void Clock_run()
{
	Clock_eventCheck();
	Clock_execute();
 430:	0e cf       	rjmp	.-484    	; 0x24e <Clock_execute>
 432:	08 95       	ret

00000434 <BUTTON_init>:
 434:	fc 01       	movw	r30, r24
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 436:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 438:	71 83       	std	Z+1, r23	; 0x01
 43a:	60 83       	st	Z, r22
	btn ->PIN = pin;
 43c:	53 83       	std	Z+3, r21	; 0x03
 43e:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 440:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
 446:	42 2f       	mov	r20, r18
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	5d c2       	rjmp	.+1210   	; 0x906 <Gpio_initPin>
 44c:	08 95       	ret

0000044e <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
 454:	6c 81       	ldd	r22, Y+4	; 0x04
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	9b 81       	ldd	r25, Y+3	; 0x03
 45a:	75 d2       	rcall	.+1258   	; 0x946 <Gpio_ReadPin>
 45c:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 45e:	81 11       	cpse	r24, r1
 460:	0b c0       	rjmp	.+22     	; 0x478 <BUTTON_GETSTATE+0x2a>
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	41 f4       	brne	.+16     	; 0x478 <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	ef e3       	ldi	r30, 0x3F	; 63
 46a:	fc e9       	ldi	r31, 0x9C	; 156
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <BUTTON_GETSTATE+0x1e>
 470:	00 c0       	rjmp	.+0      	; 0x472 <BUTTON_GETSTATE+0x24>
 472:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 474:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
 476:	12 c0       	rjmp	.+36     	; 0x49c <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 478:	99 23       	and	r25, r25
 47a:	69 f0       	breq	.+26     	; 0x496 <BUTTON_GETSTATE+0x48>
 47c:	8d 81       	ldd	r24, Y+5	; 0x05
 47e:	81 11       	cpse	r24, r1
 480:	0c c0       	rjmp	.+24     	; 0x49a <BUTTON_GETSTATE+0x4c>
 482:	8f e3       	ldi	r24, 0x3F	; 63
 484:	9c e9       	ldi	r25, 0x9C	; 156
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <BUTTON_GETSTATE+0x38>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <BUTTON_GETSTATE+0x3e>
 48c:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	03 c0       	rjmp	.+6      	; 0x49c <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	01 c0       	rjmp	.+2      	; 0x49c <BUTTON_GETSTATE+0x4e>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <FND_init>:
uint16_t fndData  = 0;
uint8_t fndColonFlag;

void FND_init()
{
	DDRE |= (1<<FND_DIGIT_4) |(1<<FND_DIGIT_3) |(1<<FND_DIGIT_2) |(1<<FND_DIGIT_1) ;
 4a2:	82 b1       	in	r24, 0x02	; 2
 4a4:	80 6f       	ori	r24, 0xF0	; 240
 4a6:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4ae:	08 95       	ret

000004b0 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	2b 97       	sbiw	r28, 0x0b	; 11
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	8c 01       	movw	r16, r24
	uint8_t Number[11] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80}; //0 -> 0x3f 1->0x06 2-> 0x5b 3->0x4f 4->0x66 5->0x6d 6->0x7d 7-> 0x07 8->0x7f 9->0x6f
 4ca:	8b e0       	ldi	r24, 0x0B	; 11
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	de 01       	movw	r26, r28
 4d2:	11 96       	adiw	r26, 0x01	; 1
 4d4:	01 90       	ld	r0, Z+
 4d6:	0d 92       	st	X+, r0
 4d8:	8a 95       	dec	r24
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 5;
 4dc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	65 e0       	ldi	r22, 0x05	; 5
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	4d d2       	rcall	.+1178   	; 0x984 <__divmodhi4>
 4ea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	
	FND_DIGIT_PORT |= (1<<7) | (1<<6) | (1<<5) | (1<<4);
 4ee:	83 b1       	in	r24, 0x03	; 3
 4f0:	80 6f       	ori	r24, 0xF0	; 240
 4f2:	83 b9       	out	0x03, r24	; 3
	switch(fndDigitState)
 4f4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	09 f4       	brne	.+2      	; 0x4fe <FND_dispNum+0x4e>
 4fc:	74 c0       	rjmp	.+232    	; 0x5e6 <FND_dispNum+0x136>
 4fe:	30 f4       	brcc	.+12     	; 0x50c <FND_dispNum+0x5c>
 500:	88 23       	and	r24, r24
 502:	59 f0       	breq	.+22     	; 0x51a <FND_dispNum+0x6a>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	09 f4       	brne	.+2      	; 0x50a <FND_dispNum+0x5a>
 508:	3e c0       	rjmp	.+124    	; 0x586 <FND_dispNum+0xd6>
 50a:	d1 c0       	rjmp	.+418    	; 0x6ae <FND_dispNum+0x1fe>
 50c:	83 30       	cpi	r24, 0x03	; 3
 50e:	09 f4       	brne	.+2      	; 0x512 <FND_dispNum+0x62>
 510:	98 c0       	rjmp	.+304    	; 0x642 <FND_dispNum+0x192>
 512:	84 30       	cpi	r24, 0x04	; 4
 514:	09 f4       	brne	.+2      	; 0x518 <FND_dispNum+0x68>
 516:	ba c0       	rjmp	.+372    	; 0x68c <FND_dispNum+0x1dc>
 518:	ca c0       	rjmp	.+404    	; 0x6ae <FND_dispNum+0x1fe>
	{
		case 0:
		
		FND_NUM_PORT = Number[fndNum/1000%10];
 51a:	98 01       	movw	r18, r16
 51c:	36 95       	lsr	r19
 51e:	27 95       	ror	r18
 520:	36 95       	lsr	r19
 522:	27 95       	ror	r18
 524:	36 95       	lsr	r19
 526:	27 95       	ror	r18
 528:	a5 ec       	ldi	r26, 0xC5	; 197
 52a:	b0 e2       	ldi	r27, 0x20	; 32
 52c:	3e d2       	rcall	.+1148   	; 0x9aa <__umulhisi3>
 52e:	ac 01       	movw	r20, r24
 530:	52 95       	swap	r21
 532:	42 95       	swap	r20
 534:	4f 70       	andi	r20, 0x0F	; 15
 536:	45 27       	eor	r20, r21
 538:	5f 70       	andi	r21, 0x0F	; 15
 53a:	45 27       	eor	r20, r21
 53c:	9a 01       	movw	r18, r20
 53e:	ad ec       	ldi	r26, 0xCD	; 205
 540:	bc ec       	ldi	r27, 0xCC	; 204
 542:	33 d2       	rcall	.+1126   	; 0x9aa <__umulhisi3>
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	96 95       	lsr	r25
 54e:	87 95       	ror	r24
 550:	9c 01       	movw	r18, r24
 552:	22 0f       	add	r18, r18
 554:	33 1f       	adc	r19, r19
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	82 0f       	add	r24, r18
 564:	93 1f       	adc	r25, r19
 566:	9a 01       	movw	r18, r20
 568:	28 1b       	sub	r18, r24
 56a:	39 0b       	sbc	r19, r25
 56c:	e1 e0       	ldi	r30, 0x01	; 1
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	ec 0f       	add	r30, r28
 572:	fd 1f       	adc	r31, r29
 574:	e2 0f       	add	r30, r18
 576:	f3 1f       	adc	r31, r19
 578:	80 81       	ld	r24, Z
 57a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<4);
 57e:	83 b1       	in	r24, 0x03	; 3
 580:	8f 7e       	andi	r24, 0xEF	; 239
 582:	83 b9       	out	0x03, r24	; 3
		break;
 584:	94 c0       	rjmp	.+296    	; 0x6ae <FND_dispNum+0x1fe>
		case 1:
		
		FND_NUM_PORT = Number[fndNum/100%10];
 586:	98 01       	movw	r18, r16
 588:	36 95       	lsr	r19
 58a:	27 95       	ror	r18
 58c:	36 95       	lsr	r19
 58e:	27 95       	ror	r18
 590:	ab e7       	ldi	r26, 0x7B	; 123
 592:	b4 e1       	ldi	r27, 0x14	; 20
 594:	0a d2       	rcall	.+1044   	; 0x9aa <__umulhisi3>
 596:	ac 01       	movw	r20, r24
 598:	56 95       	lsr	r21
 59a:	47 95       	ror	r20
 59c:	9a 01       	movw	r18, r20
 59e:	ad ec       	ldi	r26, 0xCD	; 205
 5a0:	bc ec       	ldi	r27, 0xCC	; 204
 5a2:	03 d2       	rcall	.+1030   	; 0x9aa <__umulhisi3>
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	96 95       	lsr	r25
 5aa:	87 95       	ror	r24
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	9c 01       	movw	r18, r24
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	82 0f       	add	r24, r18
 5c4:	93 1f       	adc	r25, r19
 5c6:	9a 01       	movw	r18, r20
 5c8:	28 1b       	sub	r18, r24
 5ca:	39 0b       	sbc	r19, r25
 5cc:	e1 e0       	ldi	r30, 0x01	; 1
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ec 0f       	add	r30, r28
 5d2:	fd 1f       	adc	r31, r29
 5d4:	e2 0f       	add	r30, r18
 5d6:	f3 1f       	adc	r31, r19
 5d8:	80 81       	ld	r24, Z
 5da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<5);
 5de:	83 b1       	in	r24, 0x03	; 3
 5e0:	8f 7d       	andi	r24, 0xDF	; 223
		break;
 5e2:	83 b9       	out	0x03, r24	; 3
		case 2:
		
		FND_NUM_PORT = Number[fndNum/10%10];
 5e4:	64 c0       	rjmp	.+200    	; 0x6ae <FND_dispNum+0x1fe>
 5e6:	98 01       	movw	r18, r16
 5e8:	ad ec       	ldi	r26, 0xCD	; 205
 5ea:	bc ec       	ldi	r27, 0xCC	; 204
 5ec:	de d1       	rcall	.+956    	; 0x9aa <__umulhisi3>
 5ee:	ac 01       	movw	r20, r24
 5f0:	56 95       	lsr	r21
 5f2:	47 95       	ror	r20
 5f4:	56 95       	lsr	r21
 5f6:	47 95       	ror	r20
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	9a 01       	movw	r18, r20
 5fe:	d5 d1       	rcall	.+938    	; 0x9aa <__umulhisi3>
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	9c 01       	movw	r18, r24
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	82 0f       	add	r24, r18
 620:	93 1f       	adc	r25, r19
 622:	9a 01       	movw	r18, r20
 624:	28 1b       	sub	r18, r24
 626:	39 0b       	sbc	r19, r25
 628:	e1 e0       	ldi	r30, 0x01	; 1
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ec 0f       	add	r30, r28
 62e:	fd 1f       	adc	r31, r29
 630:	e2 0f       	add	r30, r18
 632:	f3 1f       	adc	r31, r19
 634:	80 81       	ld	r24, Z
 636:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<6);
 63a:	83 b1       	in	r24, 0x03	; 3
 63c:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 63e:	83 b9       	out	0x03, r24	; 3
		case 3:
		
		FND_NUM_PORT = Number[fndNum%10];
 640:	36 c0       	rjmp	.+108    	; 0x6ae <FND_dispNum+0x1fe>
 642:	98 01       	movw	r18, r16
 644:	ad ec       	ldi	r26, 0xCD	; 205
 646:	bc ec       	ldi	r27, 0xCC	; 204
 648:	b0 d1       	rcall	.+864    	; 0x9aa <__umulhisi3>
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	9c 01       	movw	r18, r24
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	82 0f       	add	r24, r18
 66a:	93 1f       	adc	r25, r19
 66c:	98 01       	movw	r18, r16
 66e:	28 1b       	sub	r18, r24
 670:	39 0b       	sbc	r19, r25
 672:	e1 e0       	ldi	r30, 0x01	; 1
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	e2 0f       	add	r30, r18
 67c:	f3 1f       	adc	r31, r19
 67e:	80 81       	ld	r24, Z
 680:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<7);
 684:	83 b1       	in	r24, 0x03	; 3
 686:	8f 77       	andi	r24, 0x7F	; 127
 688:	83 b9       	out	0x03, r24	; 3
		break;
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <FND_dispNum+0x1fe>
		case 4:
		if (fndColonFlag)
 68c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <fndColonFlag>
 690:	88 23       	and	r24, r24
 692:	39 f0       	breq	.+14     	; 0x6a2 <FND_dispNum+0x1f2>
		{
			FND_NUM_PORT = Number[FND_COLON];
 694:	8b 85       	ldd	r24, Y+11	; 0x0b
 696:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT &= ~(1<<5);			
 69a:	83 b1       	in	r24, 0x03	; 3
 69c:	8f 7d       	andi	r24, 0xDF	; 223
 69e:	83 b9       	out	0x03, r24	; 3
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <FND_dispNum+0x1fe>
		}
		else
		{
			FND_NUM_PORT = Number[FND_COLON];
 6a2:	8b 85       	ldd	r24, Y+11	; 0x0b
 6a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT |= (1<<5);
 6a8:	83 b1       	in	r24, 0x03	; 3
 6aa:	80 62       	ori	r24, 0x20	; 32
 6ac:	83 b9       	out	0x03, r24	; 3
		}

		break;
	}
}
 6ae:	2b 96       	adiw	r28, 0x0b	; 11
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	f8 94       	cli
 6b4:	de bf       	out	0x3e, r29	; 62
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	cd bf       	out	0x3d, r28	; 61
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <FND_setfndData>:

void FND_setfndData(uint16_t data)
{
	fndData= data;
 6c4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <fndData+0x1>
 6c8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <fndData>
 6cc:	08 95       	ret

000006ce <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
 6ce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <fndData>
 6d2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <fndData+0x1>
 6d6:	ec ce       	rjmp	.-552    	; 0x4b0 <FND_dispNum>
 6d8:	08 95       	ret

000006da <FND_colonOn>:
}

void FND_colonOn()
{
	fndColonFlag = 1;	
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <fndColonFlag>
 6e0:	08 95       	ret

000006e2 <FND_colonOff>:
}

void FND_colonOff()
{
	fndColonFlag = 0;
 6e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fndColonFlag>
 6e6:	08 95       	ret

000006e8 <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS -> Low
	lcdControlData &= ~(1<<LCD_RS);
 6e8:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <lcdControlData>
 6ec:	6f 7d       	andi	r22, 0xDF	; 223
 6ee:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
 6f2:	88 e3       	ldi	r24, 0x38	; 56
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	24 c1       	rjmp	.+584    	; 0x940 <Gpio_WritePort>
 6f8:	08 95       	ret

000006fa <LCD_charMode>:
}

void LCD_charMode()
{
	//RS -> High
	lcdControlData |= (1<<LCD_RS);
 6fa:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <lcdControlData>
 6fe:	60 62       	ori	r22, 0x20	; 32
 700:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
 704:	88 e3       	ldi	r24, 0x38	; 56
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	1b c1       	rjmp	.+566    	; 0x940 <Gpio_WritePort>
 70a:	08 95       	ret

0000070c <LCD_writeMode>:
}

void LCD_writeMode()
{
	//Rw -> Low
	lcdControlData &= ~(1<<LCD_RW);
 70c:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <lcdControlData>
 710:	6f 7b       	andi	r22, 0xBF	; 191
 712:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
 716:	88 e3       	ldi	r24, 0x38	; 56
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	12 c1       	rjmp	.+548    	; 0x940 <Gpio_WritePort>
 71c:	08 95       	ret

0000071e <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	lcdControlData |= (1<<LCD_E);
 71e:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <lcdControlData>
 722:	60 68       	ori	r22, 0x80	; 128
 724:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
 728:	88 e3       	ldi	r24, 0x38	; 56
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	09 d1       	rcall	.+530    	; 0x940 <Gpio_WritePort>
 72e:	8f e9       	ldi	r24, 0x9F	; 159
 730:	9f e0       	ldi	r25, 0x0F	; 15
 732:	01 97       	sbiw	r24, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <LCD_enableHigh+0x14>
 736:	00 c0       	rjmp	.+0      	; 0x738 <LCD_enableHigh+0x1a>
 738:	00 00       	nop
 73a:	08 95       	ret

0000073c <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
	Gpio_WritePort(&LCD_DATA_PORT,data);
 73c:	68 2f       	mov	r22, r24
 73e:	85 e3       	ldi	r24, 0x35	; 53
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	fe c0       	rjmp	.+508    	; 0x940 <Gpio_WritePort>
 744:	08 95       	ret

00000746 <LCD_enableLow>:
}

void LCD_enableLow()
{
	lcdControlData &= ~(1<<LCD_E);
 746:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <lcdControlData>
 74a:	6f 77       	andi	r22, 0x7F	; 127
 74c:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <lcdControlData>
	Gpio_WritePort(&LCD_CONTROL_PORT,lcdControlData);
 750:	88 e3       	ldi	r24, 0x38	; 56
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	f5 d0       	rcall	.+490    	; 0x940 <Gpio_WritePort>
 756:	8f e9       	ldi	r24, 0x9F	; 159
 758:	9f e0       	ldi	r25, 0x0F	; 15
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <LCD_enableLow+0x14>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <LCD_enableLow+0x1a>
 760:	00 00       	nop
 762:	08 95       	ret

00000764 <LCD_writeCmdData>:
	_delay_ms(1);
}

void LCD_writeCmdData(uint8_t data) // 명령을 내리는 함수
{
 764:	cf 93       	push	r28
 766:	c8 2f       	mov	r28, r24
	// LCD 내부 명령어 동작
	LCD_cmdMode();
 768:	bf df       	rcall	.-130    	; 0x6e8 <LCD_cmdMode>
	LCD_writeMode();
 76a:	d0 df       	rcall	.-96     	; 0x70c <LCD_writeMode>
	LCD_enableHigh();
 76c:	d8 df       	rcall	.-80     	; 0x71e <LCD_enableHigh>
	LCD_writeByte(data);
 76e:	8c 2f       	mov	r24, r28
 770:	e5 df       	rcall	.-54     	; 0x73c <LCD_writeByte>
 772:	e9 df       	rcall	.-46     	; 0x746 <LCD_enableLow>
	LCD_enableLow();
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <LCD_init>:
}
 778:	45 e0       	ldi	r20, 0x05	; 5
 77a:	61 e0       	ldi	r22, 0x01	; 1

uint8_t lcdControlData;

void LCD_init()
{
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RS);
 77c:	87 e3       	ldi	r24, 0x37	; 55
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	c2 d0       	rcall	.+388    	; 0x906 <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_RW);
 782:	46 e0       	ldi	r20, 0x06	; 6
 784:	61 e0       	ldi	r22, 0x01	; 1
 786:	87 e3       	ldi	r24, 0x37	; 55
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	bd d0       	rcall	.+378    	; 0x906 <Gpio_initPin>
	Gpio_initPin(&LCD_CONTROL_DDR,OUTPUT,LCD_E);
 78c:	47 e0       	ldi	r20, 0x07	; 7
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	87 e3       	ldi	r24, 0x37	; 55
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	b8 d0       	rcall	.+368    	; 0x906 <Gpio_initPin>
	Gpio_initPort(&LCD_DATA_DDR,OUTPUT);
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	84 e3       	ldi	r24, 0x34	; 52
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	ab d0       	rcall	.+342    	; 0x8f4 <Gpio_initPort>
 79e:	8f e5       	ldi	r24, 0x5F	; 95
 7a0:	9a ee       	ldi	r25, 0xEA	; 234
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <LCD_init+0x2a>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <LCD_init+0x30>
	_delay_ms(15);
	LCD_writeCmdData(LCD_FUNCTON_SET);   //
 7a8:	00 00       	nop
 7aa:	88 e3       	ldi	r24, 0x38	; 56
 7ac:	db df       	rcall	.-74     	; 0x764 <LCD_writeCmdData>
 7ae:	8f e1       	ldi	r24, 0x1F	; 31
 7b0:	9e e4       	ldi	r25, 0x4E	; 78
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <LCD_init+0x3a>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <LCD_init+0x40>
	_delay_ms(5);
	LCD_writeCmdData(LCD_FUNCTON_SET);
 7b8:	00 00       	nop
 7ba:	88 e3       	ldi	r24, 0x38	; 56
 7bc:	d3 df       	rcall	.-90     	; 0x764 <LCD_writeCmdData>
 7be:	8f e9       	ldi	r24, 0x9F	; 159
 7c0:	9f e0       	ldi	r25, 0x0F	; 15
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <LCD_init+0x4a>
	_delay_ms(1);
	LCD_writeCmdData(LCD_FUNCTON_SET);
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <LCD_init+0x50>
 7c8:	00 00       	nop
	LCD_writeCmdData(LCD_FUNCTON_SET);
 7ca:	88 e3       	ldi	r24, 0x38	; 56
 7cc:	cb df       	rcall	.-106    	; 0x764 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_DISPLAY_OFF);
 7ce:	88 e3       	ldi	r24, 0x38	; 56
 7d0:	c9 df       	rcall	.-110    	; 0x764 <LCD_writeCmdData>
 7d2:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 7d4:	c7 df       	rcall	.-114    	; 0x764 <LCD_writeCmdData>
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	c5 df       	rcall	.-118    	; 0x764 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
 7da:	86 e0       	ldi	r24, 0x06	; 6
 7dc:	c3 df       	rcall	.-122    	; 0x764 <LCD_writeCmdData>
 7de:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);
 7e0:	c1 cf       	rjmp	.-126    	; 0x764 <LCD_writeCmdData>
 7e2:	08 95       	ret

000007e4 <LCD_writeCharData>:
 7e4:	cf 93       	push	r28
 7e6:	c8 2f       	mov	r28, r24
}

void LCD_writeCharData(uint8_t data) // 문자를 찍는 함수
{
	// LCD char 쓰는 동작
	LCD_charMode();
 7e8:	88 df       	rcall	.-240    	; 0x6fa <LCD_charMode>
	LCD_writeMode();
 7ea:	90 df       	rcall	.-224    	; 0x70c <LCD_writeMode>
	LCD_enableHigh();
 7ec:	98 df       	rcall	.-208    	; 0x71e <LCD_enableHigh>
	LCD_writeByte(data);
 7ee:	8c 2f       	mov	r24, r28
 7f0:	a5 df       	rcall	.-182    	; 0x73c <LCD_writeByte>
 7f2:	a9 df       	rcall	.-174    	; 0x746 <LCD_enableLow>
	LCD_enableLow();
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <LCD_writeString>:
}
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17

void LCD_writeString(char *str)
{
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	8c 01       	movw	r16, r24
	for(int i=0;str[i];i++)
 802:	c0 e0       	ldi	r28, 0x00	; 0
 804:	d0 e0       	ldi	r29, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
 808:	ed df       	rcall	.-38     	; 0x7e4 <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0;str[i];i++)
 80a:	21 96       	adiw	r28, 0x01	; 1
 80c:	f8 01       	movw	r30, r16
 80e:	ec 0f       	add	r30, r28
 810:	fd 1f       	adc	r31, r29
 812:	80 81       	ld	r24, Z
 814:	81 11       	cpse	r24, r1
 816:	f8 cf       	rjmp	.-16     	; 0x808 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
 81e:	0f 91       	pop	r16
 820:	08 95       	ret

00000822 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col %= 16, row %=2;
 822:	6f 70       	andi	r22, 0x0F	; 15
 824:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) +col;
 826:	90 e4       	ldi	r25, 0x40	; 64
 828:	89 9f       	mul	r24, r25
 82a:	60 0d       	add	r22, r0
 82c:	11 24       	eor	r1, r1
 82e:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
 830:	80 58       	subi	r24, 0x80	; 128
 832:	98 cf       	rjmp	.-208    	; 0x764 <LCD_writeCmdData>
 834:	08 95       	ret

00000836 <LCD_writeStringXY>:
}

void LCD_writeStringXY(char *str, uint8_t row, uint8_t col)
{
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	ec 01       	movw	r28, r24
 83c:	86 2f       	mov	r24, r22
	LCD_gotoXY(row, col);
 83e:	64 2f       	mov	r22, r20
 840:	f0 df       	rcall	.-32     	; 0x822 <LCD_gotoXY>
	LCD_writeString(str);
 842:	ce 01       	movw	r24, r28
 844:	d9 df       	rcall	.-78     	; 0x7f8 <LCD_writeString>
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <__vector_16>:
#include "ap/Clock/Clock.h"
#include "driver/fnd/fnd.h"
#include "driver/LCD/LCD.h"

ISR(TIMER0_OVF_vect)
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	0b b6       	in	r0, 0x3b	; 59
 858:	0f 92       	push	r0
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	FND_ISR_Process();
 872:	2d df       	rcall	.-422    	; 0x6ce <FND_ISR_Process>
	TCNT0 = 131;
 874:	83 e8       	ldi	r24, 0x83	; 131
 876:	82 bf       	out	0x32, r24	; 50
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0b be       	out	0x3b, r0	; 59
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	0b b6       	in	r0, 0x3b	; 59
 8aa:	0f 92       	push	r0
 8ac:	2f 93       	push	r18
 8ae:	3f 93       	push	r19
 8b0:	4f 93       	push	r20
 8b2:	5f 93       	push	r21
 8b4:	6f 93       	push	r22
 8b6:	7f 93       	push	r23
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
 8c0:	ef 93       	push	r30
 8c2:	ff 93       	push	r31
	Clock_incMilisec();
 8c4:	32 dc       	rcall	.-1948   	; 0x12a <Clock_incMilisec>
}
 8c6:	ff 91       	pop	r31
 8c8:	ef 91       	pop	r30
 8ca:	bf 91       	pop	r27
 8cc:	af 91       	pop	r26
 8ce:	9f 91       	pop	r25
 8d0:	8f 91       	pop	r24
 8d2:	7f 91       	pop	r23
 8d4:	6f 91       	pop	r22
 8d6:	5f 91       	pop	r21
 8d8:	4f 91       	pop	r20
 8da:	3f 91       	pop	r19
 8dc:	2f 91       	pop	r18
 8de:	0f 90       	pop	r0
 8e0:	0b be       	out	0x3b, r0	; 59
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <main>:

int main(void)
{
	Clock_init();
 8ec:	ed db       	rcall	.-2086   	; 0xc8 <Clock_init>
	//Global Interrupt Enable
	sei();
	
	while (1)
	{
		Clock_run();
 8ee:	78 94       	sei
 8f0:	9e dd       	rcall	.-1220   	; 0x42e <Clock_run>
 8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <main+0x4>

000008f4 <Gpio_initPort>:
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 8f4:	61 30       	cpi	r22, 0x01	; 1
 8f6:	21 f4       	brne	.+8      	; 0x900 <Gpio_initPort+0xc>
 8f8:	2f ef       	ldi	r18, 0xFF	; 255
 8fa:	fc 01       	movw	r30, r24
 8fc:	20 83       	st	Z, r18
 8fe:	08 95       	ret
 900:	fc 01       	movw	r30, r24
 902:	10 82       	st	Z, r1
 904:	08 95       	ret

00000906 <Gpio_initPin>:
 906:	61 30       	cpi	r22, 0x01	; 1
 908:	61 f4       	brne	.+24     	; 0x922 <Gpio_initPin+0x1c>
 90a:	fc 01       	movw	r30, r24
 90c:	50 81       	ld	r21, Z
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	04 2e       	mov	r0, r20
 914:	02 c0       	rjmp	.+4      	; 0x91a <Gpio_initPin+0x14>
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <Gpio_initPin+0x10>
 91e:	25 2b       	or	r18, r21
 920:	20 83       	st	Z, r18
 922:	61 11       	cpse	r22, r1
 924:	0c c0       	rjmp	.+24     	; 0x93e <Gpio_initPin+0x38>
 926:	fc 01       	movw	r30, r24
 928:	50 81       	ld	r21, Z
 92a:	21 e0       	ldi	r18, 0x01	; 1
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <Gpio_initPin+0x2e>
 930:	22 0f       	add	r18, r18
 932:	33 1f       	adc	r19, r19
 934:	4a 95       	dec	r20
 936:	e2 f7       	brpl	.-8      	; 0x930 <Gpio_initPin+0x2a>
 938:	20 95       	com	r18
 93a:	25 23       	and	r18, r21
 93c:	20 83       	st	Z, r18
 93e:	08 95       	ret

00000940 <Gpio_WritePort>:
 940:	fc 01       	movw	r30, r24
 942:	60 83       	st	Z, r22
 944:	08 95       	ret

00000946 <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
 946:	fc 01       	movw	r30, r24
 948:	80 81       	ld	r24, Z
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <Gpio_ReadPin+0xc>
 94e:	95 95       	asr	r25
 950:	87 95       	ror	r24
 952:	6a 95       	dec	r22
 954:	e2 f7       	brpl	.-8      	; 0x94e <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
 956:	81 70       	andi	r24, 0x01	; 1
 958:	08 95       	ret

0000095a <TIM0_OVF_init>:
﻿#include "TIM.h"

void TIM0_OVF_init()   // 1ms interrupt Enable
{
	// prescaler /128
	TCCR0 |= (1<<CS02) |(0<<CS01) | (1<<CS00);
 95a:	83 b7       	in	r24, 0x33	; 51
 95c:	85 60       	ori	r24, 0x05	; 5
 95e:	83 bf       	out	0x33, r24	; 51
	//TIMSK Timer Overflow Interrupt Enable
	TIMSK |= (1<<TOIE0);
 960:	87 b7       	in	r24, 0x37	; 55
 962:	81 60       	ori	r24, 0x01	; 1
 964:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;
 966:	83 e8       	ldi	r24, 0x83	; 131
 968:	82 bf       	out	0x32, r24	; 50
 96a:	08 95       	ret

0000096c <TIM2_CTC_init>:
}

void TIM2_CTC_init()
{
	TCCR2 |= (0<<CS02) | (1<<CS01) | (1<<CS00); //prescaler /64
 96c:	85 b5       	in	r24, 0x25	; 37
 96e:	83 60       	ori	r24, 0x03	; 3
 970:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) |(0<<WGM20); //CTC 모드
 972:	85 b5       	in	r24, 0x25	; 37
 974:	88 60       	ori	r24, 0x08	; 8
 976:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //Output Compare Match Interrupt Enable
 978:	87 b7       	in	r24, 0x37	; 55
 97a:	80 68       	ori	r24, 0x80	; 128
 97c:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249;
 97e:	89 ef       	ldi	r24, 0xF9	; 249
 980:	83 bd       	out	0x23, r24	; 35
 982:	08 95       	ret

00000984 <__divmodhi4>:
 984:	97 fb       	bst	r25, 7
 986:	07 2e       	mov	r0, r23
 988:	16 f4       	brtc	.+4      	; 0x98e <__divmodhi4+0xa>
 98a:	00 94       	com	r0
 98c:	06 d0       	rcall	.+12     	; 0x99a <__divmodhi4_neg1>
 98e:	77 fd       	sbrc	r23, 7
 990:	08 d0       	rcall	.+16     	; 0x9a2 <__divmodhi4_neg2>
 992:	1a d0       	rcall	.+52     	; 0x9c8 <__udivmodhi4>
 994:	07 fc       	sbrc	r0, 7
 996:	05 d0       	rcall	.+10     	; 0x9a2 <__divmodhi4_neg2>
 998:	3e f4       	brtc	.+14     	; 0x9a8 <__divmodhi4_exit>

0000099a <__divmodhi4_neg1>:
 99a:	90 95       	com	r25
 99c:	81 95       	neg	r24
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	08 95       	ret

000009a2 <__divmodhi4_neg2>:
 9a2:	70 95       	com	r23
 9a4:	61 95       	neg	r22
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255

000009a8 <__divmodhi4_exit>:
 9a8:	08 95       	ret

000009aa <__umulhisi3>:
 9aa:	a2 9f       	mul	r26, r18
 9ac:	b0 01       	movw	r22, r0
 9ae:	b3 9f       	mul	r27, r19
 9b0:	c0 01       	movw	r24, r0
 9b2:	a3 9f       	mul	r26, r19
 9b4:	70 0d       	add	r23, r0
 9b6:	81 1d       	adc	r24, r1
 9b8:	11 24       	eor	r1, r1
 9ba:	91 1d       	adc	r25, r1
 9bc:	b2 9f       	mul	r27, r18
 9be:	70 0d       	add	r23, r0
 9c0:	81 1d       	adc	r24, r1
 9c2:	11 24       	eor	r1, r1
 9c4:	91 1d       	adc	r25, r1
 9c6:	08 95       	ret

000009c8 <__udivmodhi4>:
 9c8:	aa 1b       	sub	r26, r26
 9ca:	bb 1b       	sub	r27, r27
 9cc:	51 e1       	ldi	r21, 0x11	; 17
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__udivmodhi4_ep>

000009d0 <__udivmodhi4_loop>:
 9d0:	aa 1f       	adc	r26, r26
 9d2:	bb 1f       	adc	r27, r27
 9d4:	a6 17       	cp	r26, r22
 9d6:	b7 07       	cpc	r27, r23
 9d8:	10 f0       	brcs	.+4      	; 0x9de <__udivmodhi4_ep>
 9da:	a6 1b       	sub	r26, r22
 9dc:	b7 0b       	sbc	r27, r23

000009de <__udivmodhi4_ep>:
 9de:	88 1f       	adc	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	5a 95       	dec	r21
 9e4:	a9 f7       	brne	.-22     	; 0x9d0 <__udivmodhi4_loop>
 9e6:	80 95       	com	r24
 9e8:	90 95       	com	r25
 9ea:	bc 01       	movw	r22, r24
 9ec:	cd 01       	movw	r24, r26
 9ee:	08 95       	ret

000009f0 <sprintf>:
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	cd b7       	in	r28, 0x3d	; 61
 9fa:	de b7       	in	r29, 0x3e	; 62
 9fc:	2e 97       	sbiw	r28, 0x0e	; 14
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	0d 89       	ldd	r16, Y+21	; 0x15
 a0a:	1e 89       	ldd	r17, Y+22	; 0x16
 a0c:	86 e0       	ldi	r24, 0x06	; 6
 a0e:	8c 83       	std	Y+4, r24	; 0x04
 a10:	1a 83       	std	Y+2, r17	; 0x02
 a12:	09 83       	std	Y+1, r16	; 0x01
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	9f e7       	ldi	r25, 0x7F	; 127
 a18:	9e 83       	std	Y+6, r25	; 0x06
 a1a:	8d 83       	std	Y+5, r24	; 0x05
 a1c:	ae 01       	movw	r20, r28
 a1e:	47 5e       	subi	r20, 0xE7	; 231
 a20:	5f 4f       	sbci	r21, 0xFF	; 255
 a22:	6f 89       	ldd	r22, Y+23	; 0x17
 a24:	78 8d       	ldd	r23, Y+24	; 0x18
 a26:	ce 01       	movw	r24, r28
 a28:	01 96       	adiw	r24, 0x01	; 1
 a2a:	10 d0       	rcall	.+32     	; 0xa4c <vfprintf>
 a2c:	ef 81       	ldd	r30, Y+7	; 0x07
 a2e:	f8 85       	ldd	r31, Y+8	; 0x08
 a30:	e0 0f       	add	r30, r16
 a32:	f1 1f       	adc	r31, r17
 a34:	10 82       	st	Z, r1
 a36:	2e 96       	adiw	r28, 0x0e	; 14
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	08 95       	ret

00000a4c <vfprintf>:
 a4c:	2f 92       	push	r2
 a4e:	3f 92       	push	r3
 a50:	4f 92       	push	r4
 a52:	5f 92       	push	r5
 a54:	6f 92       	push	r6
 a56:	7f 92       	push	r7
 a58:	8f 92       	push	r8
 a5a:	9f 92       	push	r9
 a5c:	af 92       	push	r10
 a5e:	bf 92       	push	r11
 a60:	cf 92       	push	r12
 a62:	df 92       	push	r13
 a64:	ef 92       	push	r14
 a66:	ff 92       	push	r15
 a68:	0f 93       	push	r16
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
 a74:	2b 97       	sbiw	r28, 0x0b	; 11
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	6c 01       	movw	r12, r24
 a82:	7b 01       	movw	r14, r22
 a84:	8a 01       	movw	r16, r20
 a86:	fc 01       	movw	r30, r24
 a88:	17 82       	std	Z+7, r1	; 0x07
 a8a:	16 82       	std	Z+6, r1	; 0x06
 a8c:	83 81       	ldd	r24, Z+3	; 0x03
 a8e:	81 ff       	sbrs	r24, 1
 a90:	bf c1       	rjmp	.+894    	; 0xe10 <vfprintf+0x3c4>
 a92:	ce 01       	movw	r24, r28
 a94:	01 96       	adiw	r24, 0x01	; 1
 a96:	3c 01       	movw	r6, r24
 a98:	f6 01       	movw	r30, r12
 a9a:	93 81       	ldd	r25, Z+3	; 0x03
 a9c:	f7 01       	movw	r30, r14
 a9e:	93 fd       	sbrc	r25, 3
 aa0:	85 91       	lpm	r24, Z+
 aa2:	93 ff       	sbrs	r25, 3
 aa4:	81 91       	ld	r24, Z+
 aa6:	7f 01       	movw	r14, r30
 aa8:	88 23       	and	r24, r24
 aaa:	09 f4       	brne	.+2      	; 0xaae <vfprintf+0x62>
 aac:	ad c1       	rjmp	.+858    	; 0xe08 <vfprintf+0x3bc>
 aae:	85 32       	cpi	r24, 0x25	; 37
 ab0:	39 f4       	brne	.+14     	; 0xac0 <vfprintf+0x74>
 ab2:	93 fd       	sbrc	r25, 3
 ab4:	85 91       	lpm	r24, Z+
 ab6:	93 ff       	sbrs	r25, 3
 ab8:	81 91       	ld	r24, Z+
 aba:	7f 01       	movw	r14, r30
 abc:	85 32       	cpi	r24, 0x25	; 37
 abe:	21 f4       	brne	.+8      	; 0xac8 <vfprintf+0x7c>
 ac0:	b6 01       	movw	r22, r12
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	d6 d1       	rcall	.+940    	; 0xe72 <fputc>
 ac6:	e8 cf       	rjmp	.-48     	; 0xa98 <vfprintf+0x4c>
 ac8:	91 2c       	mov	r9, r1
 aca:	21 2c       	mov	r2, r1
 acc:	31 2c       	mov	r3, r1
 ace:	ff e1       	ldi	r31, 0x1F	; 31
 ad0:	f3 15       	cp	r31, r3
 ad2:	d8 f0       	brcs	.+54     	; 0xb0a <vfprintf+0xbe>
 ad4:	8b 32       	cpi	r24, 0x2B	; 43
 ad6:	79 f0       	breq	.+30     	; 0xaf6 <vfprintf+0xaa>
 ad8:	38 f4       	brcc	.+14     	; 0xae8 <vfprintf+0x9c>
 ada:	80 32       	cpi	r24, 0x20	; 32
 adc:	79 f0       	breq	.+30     	; 0xafc <vfprintf+0xb0>
 ade:	83 32       	cpi	r24, 0x23	; 35
 ae0:	a1 f4       	brne	.+40     	; 0xb0a <vfprintf+0xbe>
 ae2:	23 2d       	mov	r18, r3
 ae4:	20 61       	ori	r18, 0x10	; 16
 ae6:	1d c0       	rjmp	.+58     	; 0xb22 <vfprintf+0xd6>
 ae8:	8d 32       	cpi	r24, 0x2D	; 45
 aea:	61 f0       	breq	.+24     	; 0xb04 <vfprintf+0xb8>
 aec:	80 33       	cpi	r24, 0x30	; 48
 aee:	69 f4       	brne	.+26     	; 0xb0a <vfprintf+0xbe>
 af0:	23 2d       	mov	r18, r3
 af2:	21 60       	ori	r18, 0x01	; 1
 af4:	16 c0       	rjmp	.+44     	; 0xb22 <vfprintf+0xd6>
 af6:	83 2d       	mov	r24, r3
 af8:	82 60       	ori	r24, 0x02	; 2
 afa:	38 2e       	mov	r3, r24
 afc:	e3 2d       	mov	r30, r3
 afe:	e4 60       	ori	r30, 0x04	; 4
 b00:	3e 2e       	mov	r3, r30
 b02:	2a c0       	rjmp	.+84     	; 0xb58 <vfprintf+0x10c>
 b04:	f3 2d       	mov	r31, r3
 b06:	f8 60       	ori	r31, 0x08	; 8
 b08:	1d c0       	rjmp	.+58     	; 0xb44 <vfprintf+0xf8>
 b0a:	37 fc       	sbrc	r3, 7
 b0c:	2d c0       	rjmp	.+90     	; 0xb68 <vfprintf+0x11c>
 b0e:	20 ed       	ldi	r18, 0xD0	; 208
 b10:	28 0f       	add	r18, r24
 b12:	2a 30       	cpi	r18, 0x0A	; 10
 b14:	40 f0       	brcs	.+16     	; 0xb26 <vfprintf+0xda>
 b16:	8e 32       	cpi	r24, 0x2E	; 46
 b18:	b9 f4       	brne	.+46     	; 0xb48 <vfprintf+0xfc>
 b1a:	36 fc       	sbrc	r3, 6
 b1c:	75 c1       	rjmp	.+746    	; 0xe08 <vfprintf+0x3bc>
 b1e:	23 2d       	mov	r18, r3
 b20:	20 64       	ori	r18, 0x40	; 64
 b22:	32 2e       	mov	r3, r18
 b24:	19 c0       	rjmp	.+50     	; 0xb58 <vfprintf+0x10c>
 b26:	36 fe       	sbrs	r3, 6
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <vfprintf+0xea>
 b2a:	8a e0       	ldi	r24, 0x0A	; 10
 b2c:	98 9e       	mul	r9, r24
 b2e:	20 0d       	add	r18, r0
 b30:	11 24       	eor	r1, r1
 b32:	92 2e       	mov	r9, r18
 b34:	11 c0       	rjmp	.+34     	; 0xb58 <vfprintf+0x10c>
 b36:	ea e0       	ldi	r30, 0x0A	; 10
 b38:	2e 9e       	mul	r2, r30
 b3a:	20 0d       	add	r18, r0
 b3c:	11 24       	eor	r1, r1
 b3e:	22 2e       	mov	r2, r18
 b40:	f3 2d       	mov	r31, r3
 b42:	f0 62       	ori	r31, 0x20	; 32
 b44:	3f 2e       	mov	r3, r31
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x10c>
 b48:	8c 36       	cpi	r24, 0x6C	; 108
 b4a:	21 f4       	brne	.+8      	; 0xb54 <vfprintf+0x108>
 b4c:	83 2d       	mov	r24, r3
 b4e:	80 68       	ori	r24, 0x80	; 128
 b50:	38 2e       	mov	r3, r24
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x10c>
 b54:	88 36       	cpi	r24, 0x68	; 104
 b56:	41 f4       	brne	.+16     	; 0xb68 <vfprintf+0x11c>
 b58:	f7 01       	movw	r30, r14
 b5a:	93 fd       	sbrc	r25, 3
 b5c:	85 91       	lpm	r24, Z+
 b5e:	93 ff       	sbrs	r25, 3
 b60:	81 91       	ld	r24, Z+
 b62:	7f 01       	movw	r14, r30
 b64:	81 11       	cpse	r24, r1
 b66:	b3 cf       	rjmp	.-154    	; 0xace <vfprintf+0x82>
 b68:	98 2f       	mov	r25, r24
 b6a:	9f 7d       	andi	r25, 0xDF	; 223
 b6c:	95 54       	subi	r25, 0x45	; 69
 b6e:	93 30       	cpi	r25, 0x03	; 3
 b70:	28 f4       	brcc	.+10     	; 0xb7c <vfprintf+0x130>
 b72:	0c 5f       	subi	r16, 0xFC	; 252
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	9f e3       	ldi	r25, 0x3F	; 63
 b78:	99 83       	std	Y+1, r25	; 0x01
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <vfprintf+0x14a>
 b7c:	83 36       	cpi	r24, 0x63	; 99
 b7e:	31 f0       	breq	.+12     	; 0xb8c <vfprintf+0x140>
 b80:	83 37       	cpi	r24, 0x73	; 115
 b82:	71 f0       	breq	.+28     	; 0xba0 <vfprintf+0x154>
 b84:	83 35       	cpi	r24, 0x53	; 83
 b86:	09 f0       	breq	.+2      	; 0xb8a <vfprintf+0x13e>
 b88:	55 c0       	rjmp	.+170    	; 0xc34 <vfprintf+0x1e8>
 b8a:	20 c0       	rjmp	.+64     	; 0xbcc <vfprintf+0x180>
 b8c:	f8 01       	movw	r30, r16
 b8e:	80 81       	ld	r24, Z
 b90:	89 83       	std	Y+1, r24	; 0x01
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	88 24       	eor	r8, r8
 b98:	83 94       	inc	r8
 b9a:	91 2c       	mov	r9, r1
 b9c:	53 01       	movw	r10, r6
 b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <vfprintf+0x178>
 ba0:	28 01       	movw	r4, r16
 ba2:	f2 e0       	ldi	r31, 0x02	; 2
 ba4:	4f 0e       	add	r4, r31
 ba6:	51 1c       	adc	r5, r1
 ba8:	f8 01       	movw	r30, r16
 baa:	a0 80       	ld	r10, Z
 bac:	b1 80       	ldd	r11, Z+1	; 0x01
 bae:	36 fe       	sbrs	r3, 6
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x16c>
 bb2:	69 2d       	mov	r22, r9
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x170>
 bb8:	6f ef       	ldi	r22, 0xFF	; 255
 bba:	7f ef       	ldi	r23, 0xFF	; 255
 bbc:	c5 01       	movw	r24, r10
 bbe:	4e d1       	rcall	.+668    	; 0xe5c <strnlen>
 bc0:	4c 01       	movw	r8, r24
 bc2:	82 01       	movw	r16, r4
 bc4:	f3 2d       	mov	r31, r3
 bc6:	ff 77       	andi	r31, 0x7F	; 127
 bc8:	3f 2e       	mov	r3, r31
 bca:	15 c0       	rjmp	.+42     	; 0xbf6 <vfprintf+0x1aa>
 bcc:	28 01       	movw	r4, r16
 bce:	22 e0       	ldi	r18, 0x02	; 2
 bd0:	42 0e       	add	r4, r18
 bd2:	51 1c       	adc	r5, r1
 bd4:	f8 01       	movw	r30, r16
 bd6:	a0 80       	ld	r10, Z
 bd8:	b1 80       	ldd	r11, Z+1	; 0x01
 bda:	36 fe       	sbrs	r3, 6
 bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <vfprintf+0x198>
 bde:	69 2d       	mov	r22, r9
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <vfprintf+0x19c>
 be4:	6f ef       	ldi	r22, 0xFF	; 255
 be6:	7f ef       	ldi	r23, 0xFF	; 255
 be8:	c5 01       	movw	r24, r10
 bea:	2d d1       	rcall	.+602    	; 0xe46 <strnlen_P>
 bec:	4c 01       	movw	r8, r24
 bee:	f3 2d       	mov	r31, r3
 bf0:	f0 68       	ori	r31, 0x80	; 128
 bf2:	3f 2e       	mov	r3, r31
 bf4:	82 01       	movw	r16, r4
 bf6:	33 fc       	sbrc	r3, 3
 bf8:	19 c0       	rjmp	.+50     	; 0xc2c <vfprintf+0x1e0>
 bfa:	82 2d       	mov	r24, r2
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	88 16       	cp	r8, r24
 c00:	99 06       	cpc	r9, r25
 c02:	a0 f4       	brcc	.+40     	; 0xc2c <vfprintf+0x1e0>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e2       	ldi	r24, 0x20	; 32
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	33 d1       	rcall	.+614    	; 0xe72 <fputc>
 c0c:	2a 94       	dec	r2
 c0e:	f5 cf       	rjmp	.-22     	; 0xbfa <vfprintf+0x1ae>
 c10:	f5 01       	movw	r30, r10
 c12:	37 fc       	sbrc	r3, 7
 c14:	85 91       	lpm	r24, Z+
 c16:	37 fe       	sbrs	r3, 7
 c18:	81 91       	ld	r24, Z+
 c1a:	5f 01       	movw	r10, r30
 c1c:	b6 01       	movw	r22, r12
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	28 d1       	rcall	.+592    	; 0xe72 <fputc>
 c22:	21 10       	cpse	r2, r1
 c24:	2a 94       	dec	r2
 c26:	21 e0       	ldi	r18, 0x01	; 1
 c28:	82 1a       	sub	r8, r18
 c2a:	91 08       	sbc	r9, r1
 c2c:	81 14       	cp	r8, r1
 c2e:	91 04       	cpc	r9, r1
 c30:	79 f7       	brne	.-34     	; 0xc10 <vfprintf+0x1c4>
 c32:	e1 c0       	rjmp	.+450    	; 0xdf6 <vfprintf+0x3aa>
 c34:	84 36       	cpi	r24, 0x64	; 100
 c36:	11 f0       	breq	.+4      	; 0xc3c <vfprintf+0x1f0>
 c38:	89 36       	cpi	r24, 0x69	; 105
 c3a:	39 f5       	brne	.+78     	; 0xc8a <vfprintf+0x23e>
 c3c:	f8 01       	movw	r30, r16
 c3e:	37 fe       	sbrs	r3, 7
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <vfprintf+0x204>
 c42:	60 81       	ld	r22, Z
 c44:	71 81       	ldd	r23, Z+1	; 0x01
 c46:	82 81       	ldd	r24, Z+2	; 0x02
 c48:	93 81       	ldd	r25, Z+3	; 0x03
 c4a:	0c 5f       	subi	r16, 0xFC	; 252
 c4c:	1f 4f       	sbci	r17, 0xFF	; 255
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <vfprintf+0x214>
 c50:	60 81       	ld	r22, Z
 c52:	71 81       	ldd	r23, Z+1	; 0x01
 c54:	07 2e       	mov	r0, r23
 c56:	00 0c       	add	r0, r0
 c58:	88 0b       	sbc	r24, r24
 c5a:	99 0b       	sbc	r25, r25
 c5c:	0e 5f       	subi	r16, 0xFE	; 254
 c5e:	1f 4f       	sbci	r17, 0xFF	; 255
 c60:	f3 2d       	mov	r31, r3
 c62:	ff 76       	andi	r31, 0x6F	; 111
 c64:	3f 2e       	mov	r3, r31
 c66:	97 ff       	sbrs	r25, 7
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x230>
 c6a:	90 95       	com	r25
 c6c:	80 95       	com	r24
 c6e:	70 95       	com	r23
 c70:	61 95       	neg	r22
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	f0 68       	ori	r31, 0x80	; 128
 c7a:	3f 2e       	mov	r3, r31
 c7c:	2a e0       	ldi	r18, 0x0A	; 10
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	a3 01       	movw	r20, r6
 c82:	33 d1       	rcall	.+614    	; 0xeea <__ultoa_invert>
 c84:	88 2e       	mov	r8, r24
 c86:	86 18       	sub	r8, r6
 c88:	44 c0       	rjmp	.+136    	; 0xd12 <vfprintf+0x2c6>
 c8a:	85 37       	cpi	r24, 0x75	; 117
 c8c:	31 f4       	brne	.+12     	; 0xc9a <vfprintf+0x24e>
 c8e:	23 2d       	mov	r18, r3
 c90:	2f 7e       	andi	r18, 0xEF	; 239
 c92:	b2 2e       	mov	r11, r18
 c94:	2a e0       	ldi	r18, 0x0A	; 10
 c96:	30 e0       	ldi	r19, 0x00	; 0
 c98:	25 c0       	rjmp	.+74     	; 0xce4 <vfprintf+0x298>
 c9a:	93 2d       	mov	r25, r3
 c9c:	99 7f       	andi	r25, 0xF9	; 249
 c9e:	b9 2e       	mov	r11, r25
 ca0:	8f 36       	cpi	r24, 0x6F	; 111
 ca2:	c1 f0       	breq	.+48     	; 0xcd4 <vfprintf+0x288>
 ca4:	18 f4       	brcc	.+6      	; 0xcac <vfprintf+0x260>
 ca6:	88 35       	cpi	r24, 0x58	; 88
 ca8:	79 f0       	breq	.+30     	; 0xcc8 <vfprintf+0x27c>
 caa:	ae c0       	rjmp	.+348    	; 0xe08 <vfprintf+0x3bc>
 cac:	80 37       	cpi	r24, 0x70	; 112
 cae:	19 f0       	breq	.+6      	; 0xcb6 <vfprintf+0x26a>
 cb0:	88 37       	cpi	r24, 0x78	; 120
 cb2:	21 f0       	breq	.+8      	; 0xcbc <vfprintf+0x270>
 cb4:	a9 c0       	rjmp	.+338    	; 0xe08 <vfprintf+0x3bc>
 cb6:	e9 2f       	mov	r30, r25
 cb8:	e0 61       	ori	r30, 0x10	; 16
 cba:	be 2e       	mov	r11, r30
 cbc:	b4 fe       	sbrs	r11, 4
 cbe:	0d c0       	rjmp	.+26     	; 0xcda <vfprintf+0x28e>
 cc0:	fb 2d       	mov	r31, r11
 cc2:	f4 60       	ori	r31, 0x04	; 4
 cc4:	bf 2e       	mov	r11, r31
 cc6:	09 c0       	rjmp	.+18     	; 0xcda <vfprintf+0x28e>
 cc8:	34 fe       	sbrs	r3, 4
 cca:	0a c0       	rjmp	.+20     	; 0xce0 <vfprintf+0x294>
 ccc:	29 2f       	mov	r18, r25
 cce:	26 60       	ori	r18, 0x06	; 6
 cd0:	b2 2e       	mov	r11, r18
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x294>
 cd4:	28 e0       	ldi	r18, 0x08	; 8
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	05 c0       	rjmp	.+10     	; 0xce4 <vfprintf+0x298>
 cda:	20 e1       	ldi	r18, 0x10	; 16
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x298>
 ce0:	20 e1       	ldi	r18, 0x10	; 16
 ce2:	32 e0       	ldi	r19, 0x02	; 2
 ce4:	f8 01       	movw	r30, r16
 ce6:	b7 fe       	sbrs	r11, 7
 ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <vfprintf+0x2ac>
 cea:	60 81       	ld	r22, Z
 cec:	71 81       	ldd	r23, Z+1	; 0x01
 cee:	82 81       	ldd	r24, Z+2	; 0x02
 cf0:	93 81       	ldd	r25, Z+3	; 0x03
 cf2:	0c 5f       	subi	r16, 0xFC	; 252
 cf4:	1f 4f       	sbci	r17, 0xFF	; 255
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x2b8>
 cf8:	60 81       	ld	r22, Z
 cfa:	71 81       	ldd	r23, Z+1	; 0x01
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 5f       	subi	r16, 0xFE	; 254
 d02:	1f 4f       	sbci	r17, 0xFF	; 255
 d04:	a3 01       	movw	r20, r6
 d06:	f1 d0       	rcall	.+482    	; 0xeea <__ultoa_invert>
 d08:	88 2e       	mov	r8, r24
 d0a:	86 18       	sub	r8, r6
 d0c:	fb 2d       	mov	r31, r11
 d0e:	ff 77       	andi	r31, 0x7F	; 127
 d10:	3f 2e       	mov	r3, r31
 d12:	36 fe       	sbrs	r3, 6
 d14:	0d c0       	rjmp	.+26     	; 0xd30 <vfprintf+0x2e4>
 d16:	23 2d       	mov	r18, r3
 d18:	2e 7f       	andi	r18, 0xFE	; 254
 d1a:	a2 2e       	mov	r10, r18
 d1c:	89 14       	cp	r8, r9
 d1e:	58 f4       	brcc	.+22     	; 0xd36 <vfprintf+0x2ea>
 d20:	34 fe       	sbrs	r3, 4
 d22:	0b c0       	rjmp	.+22     	; 0xd3a <vfprintf+0x2ee>
 d24:	32 fc       	sbrc	r3, 2
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x2ee>
 d28:	83 2d       	mov	r24, r3
 d2a:	8e 7e       	andi	r24, 0xEE	; 238
 d2c:	a8 2e       	mov	r10, r24
 d2e:	05 c0       	rjmp	.+10     	; 0xd3a <vfprintf+0x2ee>
 d30:	b8 2c       	mov	r11, r8
 d32:	a3 2c       	mov	r10, r3
 d34:	03 c0       	rjmp	.+6      	; 0xd3c <vfprintf+0x2f0>
 d36:	b8 2c       	mov	r11, r8
 d38:	01 c0       	rjmp	.+2      	; 0xd3c <vfprintf+0x2f0>
 d3a:	b9 2c       	mov	r11, r9
 d3c:	a4 fe       	sbrs	r10, 4
 d3e:	0f c0       	rjmp	.+30     	; 0xd5e <vfprintf+0x312>
 d40:	fe 01       	movw	r30, r28
 d42:	e8 0d       	add	r30, r8
 d44:	f1 1d       	adc	r31, r1
 d46:	80 81       	ld	r24, Z
 d48:	80 33       	cpi	r24, 0x30	; 48
 d4a:	21 f4       	brne	.+8      	; 0xd54 <vfprintf+0x308>
 d4c:	9a 2d       	mov	r25, r10
 d4e:	99 7e       	andi	r25, 0xE9	; 233
 d50:	a9 2e       	mov	r10, r25
 d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x31a>
 d54:	a2 fe       	sbrs	r10, 2
 d56:	06 c0       	rjmp	.+12     	; 0xd64 <vfprintf+0x318>
 d58:	b3 94       	inc	r11
 d5a:	b3 94       	inc	r11
 d5c:	04 c0       	rjmp	.+8      	; 0xd66 <vfprintf+0x31a>
 d5e:	8a 2d       	mov	r24, r10
 d60:	86 78       	andi	r24, 0x86	; 134
 d62:	09 f0       	breq	.+2      	; 0xd66 <vfprintf+0x31a>
 d64:	b3 94       	inc	r11
 d66:	a3 fc       	sbrc	r10, 3
 d68:	10 c0       	rjmp	.+32     	; 0xd8a <vfprintf+0x33e>
 d6a:	a0 fe       	sbrs	r10, 0
 d6c:	06 c0       	rjmp	.+12     	; 0xd7a <vfprintf+0x32e>
 d6e:	b2 14       	cp	r11, r2
 d70:	80 f4       	brcc	.+32     	; 0xd92 <vfprintf+0x346>
 d72:	28 0c       	add	r2, r8
 d74:	92 2c       	mov	r9, r2
 d76:	9b 18       	sub	r9, r11
 d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x348>
 d7a:	b2 14       	cp	r11, r2
 d7c:	58 f4       	brcc	.+22     	; 0xd94 <vfprintf+0x348>
 d7e:	b6 01       	movw	r22, r12
 d80:	80 e2       	ldi	r24, 0x20	; 32
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	76 d0       	rcall	.+236    	; 0xe72 <fputc>
 d86:	b3 94       	inc	r11
 d88:	f8 cf       	rjmp	.-16     	; 0xd7a <vfprintf+0x32e>
 d8a:	b2 14       	cp	r11, r2
 d8c:	18 f4       	brcc	.+6      	; 0xd94 <vfprintf+0x348>
 d8e:	2b 18       	sub	r2, r11
 d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x34a>
 d92:	98 2c       	mov	r9, r8
 d94:	21 2c       	mov	r2, r1
 d96:	a4 fe       	sbrs	r10, 4
 d98:	0f c0       	rjmp	.+30     	; 0xdb8 <vfprintf+0x36c>
 d9a:	b6 01       	movw	r22, r12
 d9c:	80 e3       	ldi	r24, 0x30	; 48
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	68 d0       	rcall	.+208    	; 0xe72 <fputc>
 da2:	a2 fe       	sbrs	r10, 2
 da4:	16 c0       	rjmp	.+44     	; 0xdd2 <vfprintf+0x386>
 da6:	a1 fc       	sbrc	r10, 1
 da8:	03 c0       	rjmp	.+6      	; 0xdb0 <vfprintf+0x364>
 daa:	88 e7       	ldi	r24, 0x78	; 120
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	02 c0       	rjmp	.+4      	; 0xdb4 <vfprintf+0x368>
 db0:	88 e5       	ldi	r24, 0x58	; 88
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	b6 01       	movw	r22, r12
 db6:	0c c0       	rjmp	.+24     	; 0xdd0 <vfprintf+0x384>
 db8:	8a 2d       	mov	r24, r10
 dba:	86 78       	andi	r24, 0x86	; 134
 dbc:	51 f0       	breq	.+20     	; 0xdd2 <vfprintf+0x386>
 dbe:	a1 fe       	sbrs	r10, 1
 dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x37a>
 dc2:	8b e2       	ldi	r24, 0x2B	; 43
 dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <vfprintf+0x37c>
 dc6:	80 e2       	ldi	r24, 0x20	; 32
 dc8:	a7 fc       	sbrc	r10, 7
 dca:	8d e2       	ldi	r24, 0x2D	; 45
 dcc:	b6 01       	movw	r22, r12
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	50 d0       	rcall	.+160    	; 0xe72 <fputc>
 dd2:	89 14       	cp	r8, r9
 dd4:	30 f4       	brcc	.+12     	; 0xde2 <vfprintf+0x396>
 dd6:	b6 01       	movw	r22, r12
 dd8:	80 e3       	ldi	r24, 0x30	; 48
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	4a d0       	rcall	.+148    	; 0xe72 <fputc>
 dde:	9a 94       	dec	r9
 de0:	f8 cf       	rjmp	.-16     	; 0xdd2 <vfprintf+0x386>
 de2:	8a 94       	dec	r8
 de4:	f3 01       	movw	r30, r6
 de6:	e8 0d       	add	r30, r8
 de8:	f1 1d       	adc	r31, r1
 dea:	80 81       	ld	r24, Z
 dec:	b6 01       	movw	r22, r12
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	40 d0       	rcall	.+128    	; 0xe72 <fputc>
 df2:	81 10       	cpse	r8, r1
 df4:	f6 cf       	rjmp	.-20     	; 0xde2 <vfprintf+0x396>
 df6:	22 20       	and	r2, r2
 df8:	09 f4       	brne	.+2      	; 0xdfc <vfprintf+0x3b0>
 dfa:	4e ce       	rjmp	.-868    	; 0xa98 <vfprintf+0x4c>
 dfc:	b6 01       	movw	r22, r12
 dfe:	80 e2       	ldi	r24, 0x20	; 32
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	37 d0       	rcall	.+110    	; 0xe72 <fputc>
 e04:	2a 94       	dec	r2
 e06:	f7 cf       	rjmp	.-18     	; 0xdf6 <vfprintf+0x3aa>
 e08:	f6 01       	movw	r30, r12
 e0a:	86 81       	ldd	r24, Z+6	; 0x06
 e0c:	97 81       	ldd	r25, Z+7	; 0x07
 e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x3c8>
 e10:	8f ef       	ldi	r24, 0xFF	; 255
 e12:	9f ef       	ldi	r25, 0xFF	; 255
 e14:	2b 96       	adiw	r28, 0x0b	; 11
 e16:	0f b6       	in	r0, 0x3f	; 63
 e18:	f8 94       	cli
 e1a:	de bf       	out	0x3e, r29	; 62
 e1c:	0f be       	out	0x3f, r0	; 63
 e1e:	cd bf       	out	0x3d, r28	; 61
 e20:	df 91       	pop	r29
 e22:	cf 91       	pop	r28
 e24:	1f 91       	pop	r17
 e26:	0f 91       	pop	r16
 e28:	ff 90       	pop	r15
 e2a:	ef 90       	pop	r14
 e2c:	df 90       	pop	r13
 e2e:	cf 90       	pop	r12
 e30:	bf 90       	pop	r11
 e32:	af 90       	pop	r10
 e34:	9f 90       	pop	r9
 e36:	8f 90       	pop	r8
 e38:	7f 90       	pop	r7
 e3a:	6f 90       	pop	r6
 e3c:	5f 90       	pop	r5
 e3e:	4f 90       	pop	r4
 e40:	3f 90       	pop	r3
 e42:	2f 90       	pop	r2
 e44:	08 95       	ret

00000e46 <strnlen_P>:
 e46:	fc 01       	movw	r30, r24
 e48:	05 90       	lpm	r0, Z+
 e4a:	61 50       	subi	r22, 0x01	; 1
 e4c:	70 40       	sbci	r23, 0x00	; 0
 e4e:	01 10       	cpse	r0, r1
 e50:	d8 f7       	brcc	.-10     	; 0xe48 <strnlen_P+0x2>
 e52:	80 95       	com	r24
 e54:	90 95       	com	r25
 e56:	8e 0f       	add	r24, r30
 e58:	9f 1f       	adc	r25, r31
 e5a:	08 95       	ret

00000e5c <strnlen>:
 e5c:	fc 01       	movw	r30, r24
 e5e:	61 50       	subi	r22, 0x01	; 1
 e60:	70 40       	sbci	r23, 0x00	; 0
 e62:	01 90       	ld	r0, Z+
 e64:	01 10       	cpse	r0, r1
 e66:	d8 f7       	brcc	.-10     	; 0xe5e <strnlen+0x2>
 e68:	80 95       	com	r24
 e6a:	90 95       	com	r25
 e6c:	8e 0f       	add	r24, r30
 e6e:	9f 1f       	adc	r25, r31
 e70:	08 95       	ret

00000e72 <fputc>:
 e72:	0f 93       	push	r16
 e74:	1f 93       	push	r17
 e76:	cf 93       	push	r28
 e78:	df 93       	push	r29
 e7a:	fb 01       	movw	r30, r22
 e7c:	23 81       	ldd	r18, Z+3	; 0x03
 e7e:	21 fd       	sbrc	r18, 1
 e80:	03 c0       	rjmp	.+6      	; 0xe88 <fputc+0x16>
 e82:	8f ef       	ldi	r24, 0xFF	; 255
 e84:	9f ef       	ldi	r25, 0xFF	; 255
 e86:	2c c0       	rjmp	.+88     	; 0xee0 <fputc+0x6e>
 e88:	22 ff       	sbrs	r18, 2
 e8a:	16 c0       	rjmp	.+44     	; 0xeb8 <fputc+0x46>
 e8c:	46 81       	ldd	r20, Z+6	; 0x06
 e8e:	57 81       	ldd	r21, Z+7	; 0x07
 e90:	24 81       	ldd	r18, Z+4	; 0x04
 e92:	35 81       	ldd	r19, Z+5	; 0x05
 e94:	42 17       	cp	r20, r18
 e96:	53 07       	cpc	r21, r19
 e98:	44 f4       	brge	.+16     	; 0xeaa <fputc+0x38>
 e9a:	a0 81       	ld	r26, Z
 e9c:	b1 81       	ldd	r27, Z+1	; 0x01
 e9e:	9d 01       	movw	r18, r26
 ea0:	2f 5f       	subi	r18, 0xFF	; 255
 ea2:	3f 4f       	sbci	r19, 0xFF	; 255
 ea4:	31 83       	std	Z+1, r19	; 0x01
 ea6:	20 83       	st	Z, r18
 ea8:	8c 93       	st	X, r24
 eaa:	26 81       	ldd	r18, Z+6	; 0x06
 eac:	37 81       	ldd	r19, Z+7	; 0x07
 eae:	2f 5f       	subi	r18, 0xFF	; 255
 eb0:	3f 4f       	sbci	r19, 0xFF	; 255
 eb2:	37 83       	std	Z+7, r19	; 0x07
 eb4:	26 83       	std	Z+6, r18	; 0x06
 eb6:	14 c0       	rjmp	.+40     	; 0xee0 <fputc+0x6e>
 eb8:	8b 01       	movw	r16, r22
 eba:	ec 01       	movw	r28, r24
 ebc:	fb 01       	movw	r30, r22
 ebe:	00 84       	ldd	r0, Z+8	; 0x08
 ec0:	f1 85       	ldd	r31, Z+9	; 0x09
 ec2:	e0 2d       	mov	r30, r0
 ec4:	09 95       	icall
 ec6:	89 2b       	or	r24, r25
 ec8:	e1 f6       	brne	.-72     	; 0xe82 <fputc+0x10>
 eca:	d8 01       	movw	r26, r16
 ecc:	16 96       	adiw	r26, 0x06	; 6
 ece:	8d 91       	ld	r24, X+
 ed0:	9c 91       	ld	r25, X
 ed2:	17 97       	sbiw	r26, 0x07	; 7
 ed4:	01 96       	adiw	r24, 0x01	; 1
 ed6:	17 96       	adiw	r26, 0x07	; 7
 ed8:	9c 93       	st	X, r25
 eda:	8e 93       	st	-X, r24
 edc:	16 97       	sbiw	r26, 0x06	; 6
 ede:	ce 01       	movw	r24, r28
 ee0:	df 91       	pop	r29
 ee2:	cf 91       	pop	r28
 ee4:	1f 91       	pop	r17
 ee6:	0f 91       	pop	r16
 ee8:	08 95       	ret

00000eea <__ultoa_invert>:
 eea:	fa 01       	movw	r30, r20
 eec:	aa 27       	eor	r26, r26
 eee:	28 30       	cpi	r18, 0x08	; 8
 ef0:	51 f1       	breq	.+84     	; 0xf46 <__ultoa_invert+0x5c>
 ef2:	20 31       	cpi	r18, 0x10	; 16
 ef4:	81 f1       	breq	.+96     	; 0xf56 <__ultoa_invert+0x6c>
 ef6:	e8 94       	clt
 ef8:	6f 93       	push	r22
 efa:	6e 7f       	andi	r22, 0xFE	; 254
 efc:	6e 5f       	subi	r22, 0xFE	; 254
 efe:	7f 4f       	sbci	r23, 0xFF	; 255
 f00:	8f 4f       	sbci	r24, 0xFF	; 255
 f02:	9f 4f       	sbci	r25, 0xFF	; 255
 f04:	af 4f       	sbci	r26, 0xFF	; 255
 f06:	b1 e0       	ldi	r27, 0x01	; 1
 f08:	3e d0       	rcall	.+124    	; 0xf86 <__ultoa_invert+0x9c>
 f0a:	b4 e0       	ldi	r27, 0x04	; 4
 f0c:	3c d0       	rcall	.+120    	; 0xf86 <__ultoa_invert+0x9c>
 f0e:	67 0f       	add	r22, r23
 f10:	78 1f       	adc	r23, r24
 f12:	89 1f       	adc	r24, r25
 f14:	9a 1f       	adc	r25, r26
 f16:	a1 1d       	adc	r26, r1
 f18:	68 0f       	add	r22, r24
 f1a:	79 1f       	adc	r23, r25
 f1c:	8a 1f       	adc	r24, r26
 f1e:	91 1d       	adc	r25, r1
 f20:	a1 1d       	adc	r26, r1
 f22:	6a 0f       	add	r22, r26
 f24:	71 1d       	adc	r23, r1
 f26:	81 1d       	adc	r24, r1
 f28:	91 1d       	adc	r25, r1
 f2a:	a1 1d       	adc	r26, r1
 f2c:	20 d0       	rcall	.+64     	; 0xf6e <__ultoa_invert+0x84>
 f2e:	09 f4       	brne	.+2      	; 0xf32 <__ultoa_invert+0x48>
 f30:	68 94       	set
 f32:	3f 91       	pop	r19
 f34:	2a e0       	ldi	r18, 0x0A	; 10
 f36:	26 9f       	mul	r18, r22
 f38:	11 24       	eor	r1, r1
 f3a:	30 19       	sub	r19, r0
 f3c:	30 5d       	subi	r19, 0xD0	; 208
 f3e:	31 93       	st	Z+, r19
 f40:	de f6       	brtc	.-74     	; 0xef8 <__ultoa_invert+0xe>
 f42:	cf 01       	movw	r24, r30
 f44:	08 95       	ret
 f46:	46 2f       	mov	r20, r22
 f48:	47 70       	andi	r20, 0x07	; 7
 f4a:	40 5d       	subi	r20, 0xD0	; 208
 f4c:	41 93       	st	Z+, r20
 f4e:	b3 e0       	ldi	r27, 0x03	; 3
 f50:	0f d0       	rcall	.+30     	; 0xf70 <__ultoa_invert+0x86>
 f52:	c9 f7       	brne	.-14     	; 0xf46 <__ultoa_invert+0x5c>
 f54:	f6 cf       	rjmp	.-20     	; 0xf42 <__ultoa_invert+0x58>
 f56:	46 2f       	mov	r20, r22
 f58:	4f 70       	andi	r20, 0x0F	; 15
 f5a:	40 5d       	subi	r20, 0xD0	; 208
 f5c:	4a 33       	cpi	r20, 0x3A	; 58
 f5e:	18 f0       	brcs	.+6      	; 0xf66 <__ultoa_invert+0x7c>
 f60:	49 5d       	subi	r20, 0xD9	; 217
 f62:	31 fd       	sbrc	r19, 1
 f64:	40 52       	subi	r20, 0x20	; 32
 f66:	41 93       	st	Z+, r20
 f68:	02 d0       	rcall	.+4      	; 0xf6e <__ultoa_invert+0x84>
 f6a:	a9 f7       	brne	.-22     	; 0xf56 <__ultoa_invert+0x6c>
 f6c:	ea cf       	rjmp	.-44     	; 0xf42 <__ultoa_invert+0x58>
 f6e:	b4 e0       	ldi	r27, 0x04	; 4
 f70:	a6 95       	lsr	r26
 f72:	97 95       	ror	r25
 f74:	87 95       	ror	r24
 f76:	77 95       	ror	r23
 f78:	67 95       	ror	r22
 f7a:	ba 95       	dec	r27
 f7c:	c9 f7       	brne	.-14     	; 0xf70 <__ultoa_invert+0x86>
 f7e:	00 97       	sbiw	r24, 0x00	; 0
 f80:	61 05       	cpc	r22, r1
 f82:	71 05       	cpc	r23, r1
 f84:	08 95       	ret
 f86:	9b 01       	movw	r18, r22
 f88:	ac 01       	movw	r20, r24
 f8a:	0a 2e       	mov	r0, r26
 f8c:	06 94       	lsr	r0
 f8e:	57 95       	ror	r21
 f90:	47 95       	ror	r20
 f92:	37 95       	ror	r19
 f94:	27 95       	ror	r18
 f96:	ba 95       	dec	r27
 f98:	c9 f7       	brne	.-14     	; 0xf8c <__ultoa_invert+0xa2>
 f9a:	62 0f       	add	r22, r18
 f9c:	73 1f       	adc	r23, r19
 f9e:	84 1f       	adc	r24, r20
 fa0:	95 1f       	adc	r25, r21
 fa2:	a0 1d       	adc	r26, r0
 fa4:	08 95       	ret

00000fa6 <_exit>:
 fa6:	f8 94       	cli

00000fa8 <__stop_program>:
 fa8:	ff cf       	rjmp	.-2      	; 0xfa8 <__stop_program>
