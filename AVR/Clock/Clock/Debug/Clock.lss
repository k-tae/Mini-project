
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000eba  00000f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00000f74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac0  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e76  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e70  00000000  00000000  00003b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00004998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ca  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000987  00000000  00000000  0000556a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	d0 c3       	rjmp	.+1952   	; 0x7c6 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c3       	rjmp	.+1842   	; 0x774 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 34       	cpi	r26, 0x49	; 73
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a8 d3       	rcall	.+1872   	; 0x814 <main>
  c4:	f8 c6       	rjmp	.+3568   	; 0xeb6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Clock_init>:

btn_t btnMode, btnModify, btnHour, btnMin;

void Clock_init()
{
	milisec = 0;
  c8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <milisec+0x1>
  cc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <milisec>
	sec = 0;
  d0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <sec>
	min = 0;
  d4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <min>
	hour = 0;
  d8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hour>
	state = SECMIL;
  dc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state>
	FND_init();
  e0:	88 d1       	rcall	.+784    	; 0x3f2 <FND_init>
	LCD_init();
  e2:	f0 d2       	rcall	.+1504   	; 0x6c4 <LCD_init>
	TIM0_OVF_init();
  e4:	c2 d3       	rcall	.+1924   	; 0x86a <TIM0_OVF_init>
  e6:	ca d3       	rcall	.+1940   	; 0x87c <TIM2_CTC_init>
	TIM2_CTC_init();
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnMode,&DDRA,&PINA,0);
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	6a e3       	ldi	r22, 0x3A	; 58
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	46 d1       	rcall	.+652    	; 0x384 <BUTTON_init>
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnModify,&DDRA,&PINA,1);
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	6a e3       	ldi	r22, 0x3A	; 58
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	8b e3       	ldi	r24, 0x3B	; 59
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	3e d1       	rcall	.+636    	; 0x384 <BUTTON_init>
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnHour,&DDRA,&PINA,2);
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	6a e3       	ldi	r22, 0x3A	; 58
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	89 e2       	ldi	r24, 0x29	; 41
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	36 d1       	rcall	.+620    	; 0x384 <BUTTON_init>
 118:	23 e0       	ldi	r18, 0x03	; 3
 11a:	49 e3       	ldi	r20, 0x39	; 57
	BUTTON_init(&btnMin,&DDRA,&PINA,3);
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	6a e3       	ldi	r22, 0x3A	; 58
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	2e c1       	rjmp	.+604    	; 0x384 <BUTTON_init>
 128:	08 95       	ret

0000012a <Clock_incMilisec>:
 12a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
}

void Clock_incMilisec()
{
	if(state == SECMIL || state == HOURMIN)
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	08 f0       	brcs	.+2      	; 0x134 <Clock_incMilisec+0xa>
 132:	47 c0       	rjmp	.+142    	; 0x1c2 <Clock_incMilisec+0x98>
	{
		milisec = (milisec+1) % 1000;
 134:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <milisec>
 138:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <milisec+0x1>
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	9a 01       	movw	r18, r20
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	36 95       	lsr	r19
 148:	27 95       	ror	r18
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	a5 ec       	ldi	r26, 0xC5	; 197
 150:	b0 e2       	ldi	r27, 0x20	; 32
 152:	b3 d3       	rcall	.+1894   	; 0x8ba <__umulhisi3>
 154:	92 95       	swap	r25
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	89 27       	eor	r24, r25
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	89 27       	eor	r24, r25
 160:	68 ee       	ldi	r22, 0xE8	; 232
 162:	73 e0       	ldi	r23, 0x03	; 3
 164:	86 9f       	mul	r24, r22
 166:	90 01       	movw	r18, r0
 168:	87 9f       	mul	r24, r23
 16a:	30 0d       	add	r19, r0
 16c:	96 9f       	mul	r25, r22
 16e:	30 0d       	add	r19, r0
 170:	11 24       	eor	r1, r1
 172:	ca 01       	movw	r24, r20
 174:	82 1b       	sub	r24, r18
 176:	93 0b       	sbc	r25, r19
 178:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <milisec+0x1>
 17c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <milisec>
		if(milisec) return;
 180:	89 2b       	or	r24, r25
 182:	f9 f4       	brne	.+62     	; 0x1c2 <Clock_incMilisec+0x98>
		
		sec = (sec+1) % 60;
 184:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	6c e3       	ldi	r22, 0x3C	; 60
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	81 d3       	rcall	.+1794   	; 0x894 <__divmodhi4>
 192:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <sec>
		if(sec) return;
 196:	81 11       	cpse	r24, r1
 198:	14 c0       	rjmp	.+40     	; 0x1c2 <Clock_incMilisec+0x98>
		
		min = (min+1) % 60;
 19a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	6c e3       	ldi	r22, 0x3C	; 60
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	76 d3       	rcall	.+1772   	; 0x894 <__divmodhi4>
 1a8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <min>
		if(min) return;
 1ac:	81 11       	cpse	r24, r1
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <Clock_incMilisec+0x98>
		
		hour = (hour+1) % 24;
 1b0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	68 e1       	ldi	r22, 0x18	; 24
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	6b d3       	rcall	.+1750   	; 0x894 <__divmodhi4>
 1be:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <hour>
 1c2:	08 95       	ret

000001c4 <Clock_eventCheck>:
	}
}

void Clock_eventCheck()
{
	switch(state)
 1c4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <Clock_eventCheck+0x22>
 1cc:	18 f0       	brcs	.+6      	; 0x1d4 <Clock_eventCheck+0x10>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	c9 f0       	breq	.+50     	; 0x204 <Clock_eventCheck+0x40>
 1d2:	08 95       	ret
	{
		case SECMIL:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	e2 d0       	rcall	.+452    	; 0x39e <BUTTON_GETSTATE>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	b9 f5       	brne	.+110    	; 0x24c <Clock_eventCheck+0x88>
		{
			state = HOURMIN;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
 1e4:	08 95       	ret
		}
		break;
		case HOURMIN:
		if (BUTTON_GETSTATE(&btnMode) == ACT_REALESED)
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	d9 d0       	rcall	.+434    	; 0x39e <BUTTON_GETSTATE>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <Clock_eventCheck+0x30>
		{
			state = SECMIL;
 1f0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state>
		}
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	d2 d0       	rcall	.+420    	; 0x39e <BUTTON_GETSTATE>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	39 f5       	brne	.+78     	; 0x24c <Clock_eventCheck+0x88>
		{
			state = MODIFY;
 1fe:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
		}
		break;
		case MODIFY:
		if (BUTTON_GETSTATE(&btnModify) == ACT_REALESED)
 202:	08 95       	ret
 204:	8b e3       	ldi	r24, 0x3B	; 59
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	ca d0       	rcall	.+404    	; 0x39e <BUTTON_GETSTATE>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	19 f4       	brne	.+6      	; 0x214 <Clock_eventCheck+0x50>
		{
			state = HOURMIN;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
		}
		if (BUTTON_GETSTATE(&btnHour) == ACT_REALESED)
 214:	89 e2       	ldi	r24, 0x29	; 41
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	c2 d0       	rcall	.+388    	; 0x39e <BUTTON_GETSTATE>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	49 f4       	brne	.+18     	; 0x230 <Clock_eventCheck+0x6c>
		{
			hour = (hour+1)%24;
 21e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	68 e1       	ldi	r22, 0x18	; 24
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	34 d3       	rcall	.+1640   	; 0x894 <__divmodhi4>
 22c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <hour>
		}
		if (BUTTON_GETSTATE(&btnMin) == ACT_REALESED)
 230:	82 e3       	ldi	r24, 0x32	; 50
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	b4 d0       	rcall	.+360    	; 0x39e <BUTTON_GETSTATE>
 236:	82 30       	cpi	r24, 0x02	; 2
		{
			min = (min+1)%60;
 238:	49 f4       	brne	.+18     	; 0x24c <Clock_eventCheck+0x88>
 23a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	6c e3       	ldi	r22, 0x3C	; 60
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	26 d3       	rcall	.+1612   	; 0x894 <__divmodhi4>
 248:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <min>
 24c:	08 95       	ret

0000024e <Clock_execute>:
		break;
	}
}

void Clock_execute()
{
 24e:	cf 93       	push	r28
	uint16_t stopWatchData;
	switch(state)
 250:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	b1 f1       	breq	.+108    	; 0x2c4 <Clock_execute+0x76>
 258:	20 f0       	brcs	.+8      	; 0x262 <Clock_execute+0x14>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	09 f4       	brne	.+2      	; 0x260 <Clock_execute+0x12>
 25e:	48 c0       	rjmp	.+144    	; 0x2f0 <Clock_execute+0xa2>
 260:	52 c0       	rjmp	.+164    	; 0x306 <Clock_execute+0xb8>
	{
		case SECMIL:
		stopWatchData =  (sec*100) + (milisec/10);
 262:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <sec>
 266:	c4 e6       	ldi	r28, 0x64	; 100
 268:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <milisec>
 26c:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <milisec+0x1>
 270:	ad ec       	ldi	r26, 0xCD	; 205
 272:	bc ec       	ldi	r27, 0xCC	; 204
 274:	22 d3       	rcall	.+1604   	; 0x8ba <__umulhisi3>
 276:	96 95       	lsr	r25
 278:	87 95       	ror	r24
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
		FND_setfndData(stopWatchData);
 282:	c4 9f       	mul	r28, r20
 284:	80 0d       	add	r24, r0
 286:	91 1d       	adc	r25, r1
 288:	11 24       	eor	r1, r1
 28a:	c4 d1       	rcall	.+904    	; 0x614 <FND_setfndData>
		if ((milisec%100)<50)
 28c:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <milisec>
 290:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <milisec+0x1>
 294:	9a 01       	movw	r18, r20
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	ab e7       	ldi	r26, 0x7B	; 123
 2a0:	b4 e1       	ldi	r27, 0x14	; 20
 2a2:	0b d3       	rcall	.+1558   	; 0x8ba <__umulhisi3>
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	c8 9f       	mul	r28, r24
 2aa:	90 01       	movw	r18, r0
 2ac:	c9 9f       	mul	r28, r25
 2ae:	30 0d       	add	r19, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	ca 01       	movw	r24, r20
 2b4:	82 1b       	sub	r24, r18
 2b6:	93 0b       	sbc	r25, r19
 2b8:	c2 97       	sbiw	r24, 0x32	; 50
		{
			FND_colonOn();
 2ba:	10 f4       	brcc	.+4      	; 0x2c0 <Clock_execute+0x72>
 2bc:	b6 d1       	rcall	.+876    	; 0x62a <FND_colonOn>
 2be:	23 c0       	rjmp	.+70     	; 0x306 <Clock_execute+0xb8>
		}
		else
		{
			FND_colonOff();
 2c0:	b8 d1       	rcall	.+880    	; 0x632 <FND_colonOff>
 2c2:	21 c0       	rjmp	.+66     	; 0x306 <Clock_execute+0xb8>
 2c4:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <hour>
		}
		break;
		case HOURMIN:
		stopWatchData =  hour*100 + min;
 2c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	34 e6       	ldi	r19, 0x64	; 100
		FND_setfndData(stopWatchData);
 2d0:	23 9f       	mul	r18, r19
 2d2:	80 0d       	add	r24, r0
 2d4:	91 1d       	adc	r25, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	9d d1       	rcall	.+826    	; 0x614 <FND_setfndData>
 2da:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <milisec>
		if (milisec<500)
 2de:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <milisec+0x1>
 2e2:	84 3f       	cpi	r24, 0xF4	; 244
 2e4:	91 40       	sbci	r25, 0x01	; 1
		{
			FND_colonOn();
 2e6:	10 f4       	brcc	.+4      	; 0x2ec <Clock_execute+0x9e>
 2e8:	a0 d1       	rcall	.+832    	; 0x62a <FND_colonOn>
 2ea:	0d c0       	rjmp	.+26     	; 0x306 <Clock_execute+0xb8>
		}
		else
		{
			FND_colonOff();
 2ec:	a2 d1       	rcall	.+836    	; 0x632 <FND_colonOff>
 2ee:	0b c0       	rjmp	.+22     	; 0x306 <Clock_execute+0xb8>
 2f0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <hour>
		}
		break;
		case MODIFY:
		stopWatchData =  hour*100 + min;
 2f4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 2f8:	90 e0       	ldi	r25, 0x00	; 0
		FND_setfndData(stopWatchData);
 2fa:	34 e6       	ldi	r19, 0x64	; 100
 2fc:	23 9f       	mul	r18, r19
 2fe:	80 0d       	add	r24, r0
 300:	91 1d       	adc	r25, r1
 302:	11 24       	eor	r1, r1
 304:	87 d1       	rcall	.+782    	; 0x614 <FND_setfndData>
 306:	cf 91       	pop	r28
		break;
	}
}
 308:	08 95       	ret

0000030a <Clock_run>:
 30a:	0f 93       	push	r16

void Clock_run()
{
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	2a 97       	sbiw	r28, 0x0a	; 10
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
	Clock_eventCheck();
 322:	50 df       	rcall	.-352    	; 0x1c4 <Clock_eventCheck>
	Clock_execute();
 324:	94 df       	rcall	.-216    	; 0x24e <Clock_execute>
 326:	43 e0       	ldi	r20, 0x03	; 3
	LCD_writeStringXY("Time Clock",0,3);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8b e0       	ldi	r24, 0x0B	; 11
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	17 d2       	rcall	.+1070   	; 0x75e <LCD_writeStringXY>
 330:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <sec>
	char Time[10];
	sprintf(Time,"%02d:%02d:%02d", hour,min,sec);
 334:	1f 92       	push	r1
 336:	8f 93       	push	r24
 338:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <min>
 33c:	1f 92       	push	r1
 33e:	8f 93       	push	r24
 340:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hour>
 344:	1f 92       	push	r1
 346:	8f 93       	push	r24
 348:	86 e1       	ldi	r24, 0x16	; 22
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	9f 93       	push	r25
 34e:	8f 93       	push	r24
 350:	8e 01       	movw	r16, r28
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	1f 93       	push	r17
 358:	0f 93       	push	r16
 35a:	d2 d2       	rcall	.+1444   	; 0x900 <sprintf>
 35c:	44 e0       	ldi	r20, 0x04	; 4
	LCD_writeStringXY(Time,1,4);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	c8 01       	movw	r24, r16
 362:	fd d1       	rcall	.+1018   	; 0x75e <LCD_writeStringXY>
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	2a 96       	adiw	r28, 0x0a	; 10
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <BUTTON_init>:
﻿#include "Button.h"

void BUTTON_init(btn_t *btn, volatile uint8_t *ddr, volatile uint8_t *pin, uint8_t pinNum)
{
 384:	fc 01       	movw	r30, r24
 386:	cb 01       	movw	r24, r22
	btn ->DDR = ddr;
 388:	71 83       	std	Z+1, r23	; 0x01
 38a:	60 83       	st	Z, r22
	btn ->PIN = pin;
 38c:	53 83       	std	Z+3, r21	; 0x03
 38e:	42 83       	std	Z+2, r20	; 0x02
	btn ->PinNum = pinNum;
 390:	24 83       	std	Z+4, r18	; 0x04
	btn ->prevstate = Realesed;
 392:	31 e0       	ldi	r19, 0x01	; 1
 394:	35 83       	std	Z+5, r19	; 0x05
	//*(btn->DDR) &= ~(1<<btn->PinNum);
	Gpio_initPin(btn->DDR,INPUT,btn->PinNum);
 396:	42 2f       	mov	r20, r18
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	40 c2       	rjmp	.+1152   	; 0x81c <Gpio_initPin>
 39c:	08 95       	ret

0000039e <BUTTON_GETSTATE>:
}

uint8_t BUTTON_GETSTATE(btn_t *btn)
{	
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
	uint8_t cur_state = Gpio_ReadPin(btn->PIN,btn->PinNum);
 3a4:	6c 81       	ldd	r22, Y+4	; 0x04
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	9b 81       	ldd	r25, Y+3	; 0x03
 3aa:	55 d2       	rcall	.+1194   	; 0x856 <Gpio_ReadPin>
 3ac:	98 2f       	mov	r25, r24
	//uint8_t cur_state = *(btn -> PIN) & (1<<(btn -> PinNum));
	if ((cur_state == Pushed) && (btn->prevstate) == Realesed)
 3ae:	81 11       	cpse	r24, r1
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <BUTTON_GETSTATE+0x2a>
 3b2:	8d 81       	ldd	r24, Y+5	; 0x05
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	41 f4       	brne	.+16     	; 0x3c8 <BUTTON_GETSTATE+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	ef e3       	ldi	r30, 0x3F	; 63
 3ba:	fc e9       	ldi	r31, 0x9C	; 156
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <BUTTON_GETSTATE+0x1e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <BUTTON_GETSTATE+0x24>
 3c2:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Pushed;
 3c4:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED; 
 3c6:	12 c0       	rjmp	.+36     	; 0x3ec <BUTTON_GETSTATE+0x4e>
	}
	else if (!(cur_state == Pushed) && (btn->prevstate) == Pushed)
 3c8:	99 23       	and	r25, r25
 3ca:	69 f0       	breq	.+26     	; 0x3e6 <BUTTON_GETSTATE+0x48>
 3cc:	8d 81       	ldd	r24, Y+5	; 0x05
 3ce:	81 11       	cpse	r24, r1
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <BUTTON_GETSTATE+0x4c>
 3d2:	8f e3       	ldi	r24, 0x3F	; 63
 3d4:	9c e9       	ldi	r25, 0x9C	; 156
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <BUTTON_GETSTATE+0x38>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <BUTTON_GETSTATE+0x3e>
 3dc:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = Realesed;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_REALESED;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <BUTTON_GETSTATE+0x4e>
	}
	return ACT_NONE;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <BUTTON_GETSTATE+0x4e>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <FND_init>:
uint16_t fndData  = 0;
uint8_t fndColonFlag;

void FND_init()
{
	DDRE |= (1<<FND_DIGIT_4) |(1<<FND_DIGIT_3) |(1<<FND_DIGIT_2) |(1<<FND_DIGIT_1) ;
 3f2:	82 b1       	in	r24, 0x02	; 2
 3f4:	80 6f       	ori	r24, 0xF0	; 240
 3f6:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xff;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3fe:	08 95       	ret

00000400 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum)
{
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	2b 97       	sbiw	r28, 0x0b	; 11
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	8c 01       	movw	r16, r24
	uint8_t Number[11] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80}; //0 -> 0x3f 1->0x06 2-> 0x5b 3->0x4f 4->0x66 5->0x6d 6->0x7d 7-> 0x07 8->0x7f 9->0x6f
 41a:	8b e0       	ldi	r24, 0x0B	; 11
 41c:	e0 e0       	ldi	r30, 0x00	; 0
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	de 01       	movw	r26, r28
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	01 90       	ld	r0, Z+
 426:	0d 92       	st	X+, r0
 428:	8a 95       	dec	r24
 42a:	e1 f7       	brne	.-8      	; 0x424 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	fndDigitState = (fndDigitState + 1) % 5;
 42c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	01 96       	adiw	r24, 0x01	; 1
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	2d d2       	rcall	.+1114   	; 0x894 <__divmodhi4>
 43a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	
	FND_DIGIT_PORT |= (1<<7) | (1<<6) | (1<<5) | (1<<4);
 43e:	83 b1       	in	r24, 0x03	; 3
 440:	80 6f       	ori	r24, 0xF0	; 240
 442:	83 b9       	out	0x03, r24	; 3
	switch(fndDigitState)
 444:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	09 f4       	brne	.+2      	; 0x44e <FND_dispNum+0x4e>
 44c:	74 c0       	rjmp	.+232    	; 0x536 <FND_dispNum+0x136>
 44e:	30 f4       	brcc	.+12     	; 0x45c <FND_dispNum+0x5c>
 450:	88 23       	and	r24, r24
 452:	59 f0       	breq	.+22     	; 0x46a <FND_dispNum+0x6a>
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	09 f4       	brne	.+2      	; 0x45a <FND_dispNum+0x5a>
 458:	3e c0       	rjmp	.+124    	; 0x4d6 <FND_dispNum+0xd6>
 45a:	d1 c0       	rjmp	.+418    	; 0x5fe <FND_dispNum+0x1fe>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	09 f4       	brne	.+2      	; 0x462 <FND_dispNum+0x62>
 460:	98 c0       	rjmp	.+304    	; 0x592 <FND_dispNum+0x192>
 462:	84 30       	cpi	r24, 0x04	; 4
 464:	09 f4       	brne	.+2      	; 0x468 <FND_dispNum+0x68>
 466:	ba c0       	rjmp	.+372    	; 0x5dc <FND_dispNum+0x1dc>
 468:	ca c0       	rjmp	.+404    	; 0x5fe <FND_dispNum+0x1fe>
	{
		case 0:
		
		FND_NUM_PORT = Number[fndNum/1000%10];
 46a:	98 01       	movw	r18, r16
 46c:	36 95       	lsr	r19
 46e:	27 95       	ror	r18
 470:	36 95       	lsr	r19
 472:	27 95       	ror	r18
 474:	36 95       	lsr	r19
 476:	27 95       	ror	r18
 478:	a5 ec       	ldi	r26, 0xC5	; 197
 47a:	b0 e2       	ldi	r27, 0x20	; 32
 47c:	1e d2       	rcall	.+1084   	; 0x8ba <__umulhisi3>
 47e:	ac 01       	movw	r20, r24
 480:	52 95       	swap	r21
 482:	42 95       	swap	r20
 484:	4f 70       	andi	r20, 0x0F	; 15
 486:	45 27       	eor	r20, r21
 488:	5f 70       	andi	r21, 0x0F	; 15
 48a:	45 27       	eor	r20, r21
 48c:	9a 01       	movw	r18, r20
 48e:	ad ec       	ldi	r26, 0xCD	; 205
 490:	bc ec       	ldi	r27, 0xCC	; 204
 492:	13 d2       	rcall	.+1062   	; 0x8ba <__umulhisi3>
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	9c 01       	movw	r18, r24
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	9a 01       	movw	r18, r20
 4b8:	28 1b       	sub	r18, r24
 4ba:	39 0b       	sbc	r19, r25
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e2 0f       	add	r30, r18
 4c6:	f3 1f       	adc	r31, r19
 4c8:	80 81       	ld	r24, Z
 4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<4);
 4ce:	83 b1       	in	r24, 0x03	; 3
 4d0:	8f 7e       	andi	r24, 0xEF	; 239
 4d2:	83 b9       	out	0x03, r24	; 3
		break;
 4d4:	94 c0       	rjmp	.+296    	; 0x5fe <FND_dispNum+0x1fe>
		case 1:
		
		FND_NUM_PORT = Number[fndNum/100%10];
 4d6:	98 01       	movw	r18, r16
 4d8:	36 95       	lsr	r19
 4da:	27 95       	ror	r18
 4dc:	36 95       	lsr	r19
 4de:	27 95       	ror	r18
 4e0:	ab e7       	ldi	r26, 0x7B	; 123
 4e2:	b4 e1       	ldi	r27, 0x14	; 20
 4e4:	ea d1       	rcall	.+980    	; 0x8ba <__umulhisi3>
 4e6:	ac 01       	movw	r20, r24
 4e8:	56 95       	lsr	r21
 4ea:	47 95       	ror	r20
 4ec:	9a 01       	movw	r18, r20
 4ee:	ad ec       	ldi	r26, 0xCD	; 205
 4f0:	bc ec       	ldi	r27, 0xCC	; 204
 4f2:	e3 d1       	rcall	.+966    	; 0x8ba <__umulhisi3>
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	9c 01       	movw	r18, r24
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	82 0f       	add	r24, r18
 514:	93 1f       	adc	r25, r19
 516:	9a 01       	movw	r18, r20
 518:	28 1b       	sub	r18, r24
 51a:	39 0b       	sbc	r19, r25
 51c:	e1 e0       	ldi	r30, 0x01	; 1
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	ec 0f       	add	r30, r28
 522:	fd 1f       	adc	r31, r29
 524:	e2 0f       	add	r30, r18
 526:	f3 1f       	adc	r31, r19
 528:	80 81       	ld	r24, Z
 52a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<5);
 52e:	83 b1       	in	r24, 0x03	; 3
 530:	8f 7d       	andi	r24, 0xDF	; 223
		break;
 532:	83 b9       	out	0x03, r24	; 3
		case 2:
		
		FND_NUM_PORT = Number[fndNum/10%10];
 534:	64 c0       	rjmp	.+200    	; 0x5fe <FND_dispNum+0x1fe>
 536:	98 01       	movw	r18, r16
 538:	ad ec       	ldi	r26, 0xCD	; 205
 53a:	bc ec       	ldi	r27, 0xCC	; 204
 53c:	be d1       	rcall	.+892    	; 0x8ba <__umulhisi3>
 53e:	ac 01       	movw	r20, r24
 540:	56 95       	lsr	r21
 542:	47 95       	ror	r20
 544:	56 95       	lsr	r21
 546:	47 95       	ror	r20
 548:	56 95       	lsr	r21
 54a:	47 95       	ror	r20
 54c:	9a 01       	movw	r18, r20
 54e:	b5 d1       	rcall	.+874    	; 0x8ba <__umulhisi3>
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	9c 01       	movw	r18, r24
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	9a 01       	movw	r18, r20
 574:	28 1b       	sub	r18, r24
 576:	39 0b       	sbc	r19, r25
 578:	e1 e0       	ldi	r30, 0x01	; 1
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	ec 0f       	add	r30, r28
 57e:	fd 1f       	adc	r31, r29
 580:	e2 0f       	add	r30, r18
 582:	f3 1f       	adc	r31, r19
 584:	80 81       	ld	r24, Z
 586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<6);
 58a:	83 b1       	in	r24, 0x03	; 3
 58c:	8f 7b       	andi	r24, 0xBF	; 191
		break;
 58e:	83 b9       	out	0x03, r24	; 3
		case 3:
		
		FND_NUM_PORT = Number[fndNum%10];
 590:	36 c0       	rjmp	.+108    	; 0x5fe <FND_dispNum+0x1fe>
 592:	98 01       	movw	r18, r16
 594:	ad ec       	ldi	r26, 0xCD	; 205
 596:	bc ec       	ldi	r27, 0xCC	; 204
 598:	90 d1       	rcall	.+800    	; 0x8ba <__umulhisi3>
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	9c 01       	movw	r18, r24
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	98 01       	movw	r18, r16
 5be:	28 1b       	sub	r18, r24
 5c0:	39 0b       	sbc	r19, r25
 5c2:	e1 e0       	ldi	r30, 0x01	; 1
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ec 0f       	add	r30, r28
 5c8:	fd 1f       	adc	r31, r29
 5ca:	e2 0f       	add	r30, r18
 5cc:	f3 1f       	adc	r31, r19
 5ce:	80 81       	ld	r24, Z
 5d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DIGIT_PORT &= ~(1<<7);
 5d4:	83 b1       	in	r24, 0x03	; 3
 5d6:	8f 77       	andi	r24, 0x7F	; 127
 5d8:	83 b9       	out	0x03, r24	; 3
		break;
 5da:	11 c0       	rjmp	.+34     	; 0x5fe <FND_dispNum+0x1fe>
		case 4:
		if (fndColonFlag)
 5dc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <fndColonFlag>
 5e0:	88 23       	and	r24, r24
 5e2:	39 f0       	breq	.+14     	; 0x5f2 <FND_dispNum+0x1f2>
		{
			FND_NUM_PORT = Number[FND_COLON];
 5e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 5e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT &= ~(1<<5);			
 5ea:	83 b1       	in	r24, 0x03	; 3
 5ec:	8f 7d       	andi	r24, 0xDF	; 223
 5ee:	83 b9       	out	0x03, r24	; 3
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <FND_dispNum+0x1fe>
		}
		else
		{
			FND_NUM_PORT = Number[FND_COLON];
 5f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 5f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DIGIT_PORT |= (1<<5);
 5f8:	83 b1       	in	r24, 0x03	; 3
 5fa:	80 62       	ori	r24, 0x20	; 32
 5fc:	83 b9       	out	0x03, r24	; 3
		}

		break;
	}
}
 5fe:	2b 96       	adiw	r28, 0x0b	; 11
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	08 95       	ret

00000614 <FND_setfndData>:

void FND_setfndData(uint16_t data)
{
	fndData= data;
 614:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <fndData+0x1>
 618:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <fndData>
 61c:	08 95       	ret

0000061e <FND_ISR_Process>:
}

void FND_ISR_Process()
{
	FND_dispNum(fndData);
 61e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <fndData>
 622:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <fndData+0x1>
 626:	ec ce       	rjmp	.-552    	; 0x400 <FND_dispNum>
 628:	08 95       	ret

0000062a <FND_colonOn>:
}

void FND_colonOn()
{
	fndColonFlag = 1;	
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <fndColonFlag>
 630:	08 95       	ret

00000632 <FND_colonOff>:
}

void FND_colonOff()
{
	fndColonFlag = 0;
 632:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fndColonFlag>
 636:	08 95       	ret

00000638 <GPIO_init>:

uint8_t lcdControlData;

void GPIO_init()
{
	LCD_CONTROL_DDR |= (1<<LCD_RS) |(1<<LCD_RW) |(1<<LCD_E);
 638:	87 b3       	in	r24, 0x17	; 23
 63a:	80 6e       	ori	r24, 0xE0	; 224
 63c:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_DDR |= 0xff;
 63e:	84 b3       	in	r24, 0x14	; 20
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	84 bb       	out	0x14, r24	; 20
 644:	08 95       	ret

00000646 <GPIO_writeControlData>:
	LCD_writeCmdData(LCD_DISPLAY_ON);
}

void GPIO_writeControlData(uint8_t data)
{
	LCD_CONTROL_PORT = data;
 646:	88 bb       	out	0x18, r24	; 24
 648:	08 95       	ret

0000064a <GPIO_writelData>:
}

void GPIO_writelData(uint8_t data)
{
	LCD_DATA_PORT = data;
 64a:	85 bb       	out	0x15, r24	; 21
 64c:	08 95       	ret

0000064e <LCD_cmdMode>:
}

void LCD_cmdMode()
{
	//RS -> Low
	lcdControlData &= ~(1<<LCD_RS);
 64e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <lcdControlData>
 652:	8f 7d       	andi	r24, 0xDF	; 223
 654:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 658:	f6 cf       	rjmp	.-20     	; 0x646 <GPIO_writeControlData>
 65a:	08 95       	ret

0000065c <LCD_charMode>:
}

void LCD_charMode()
{
	//RS -> High
	lcdControlData |= (1<<LCD_RS);
 65c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <lcdControlData>
 660:	80 62       	ori	r24, 0x20	; 32
 662:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lcdControlData>
GPIO_writeControlData(lcdControlData);}
 666:	ef cf       	rjmp	.-34     	; 0x646 <GPIO_writeControlData>
 668:	08 95       	ret

0000066a <LCD_writeMode>:

void LCD_writeMode()
{
	//Rw -> Low
	lcdControlData &= ~(1<<LCD_RW);
 66a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <lcdControlData>
 66e:	8f 7b       	andi	r24, 0xBF	; 191
 670:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 674:	e8 cf       	rjmp	.-48     	; 0x646 <GPIO_writeControlData>
 676:	08 95       	ret

00000678 <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	lcdControlData |= (1<<LCD_E);
 678:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <lcdControlData>
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 682:	e1 df       	rcall	.-62     	; 0x646 <GPIO_writeControlData>
 684:	8f e9       	ldi	r24, 0x9F	; 159
 686:	9f e0       	ldi	r25, 0x0F	; 15
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_enableHigh+0x10>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_enableHigh+0x16>
 68e:	00 00       	nop
 690:	08 95       	ret

00000692 <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
	GPIO_writelData(data);
 692:	db cf       	rjmp	.-74     	; 0x64a <GPIO_writelData>
 694:	08 95       	ret

00000696 <LCD_enableLow>:
}

void LCD_enableLow()
{
	lcdControlData &= ~(1<<LCD_E);
 696:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <lcdControlData>
 69a:	8f 77       	andi	r24, 0x7F	; 127
 69c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lcdControlData>
	GPIO_writeControlData(lcdControlData);
 6a0:	d2 df       	rcall	.-92     	; 0x646 <GPIO_writeControlData>
 6a2:	8f e9       	ldi	r24, 0x9F	; 159
 6a4:	9f e0       	ldi	r25, 0x0F	; 15
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <LCD_enableLow+0x10>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <LCD_enableLow+0x16>
 6ac:	00 00       	nop
 6ae:	08 95       	ret

000006b0 <LCD_writeCmdData>:
	_delay_ms(1);
}

void LCD_writeCmdData(uint8_t data) // 명령을 내리는 함수
{
 6b0:	cf 93       	push	r28
 6b2:	c8 2f       	mov	r28, r24
	// LCD 내부 명령어 동작
	LCD_cmdMode();
 6b4:	cc df       	rcall	.-104    	; 0x64e <LCD_cmdMode>
	LCD_writeMode();
 6b6:	d9 df       	rcall	.-78     	; 0x66a <LCD_writeMode>
	LCD_enableHigh();
 6b8:	df df       	rcall	.-66     	; 0x678 <LCD_enableHigh>
	LCD_writeByte(data);
 6ba:	8c 2f       	mov	r24, r28
 6bc:	ea df       	rcall	.-44     	; 0x692 <LCD_writeByte>
 6be:	eb df       	rcall	.-42     	; 0x696 <LCD_enableLow>
	LCD_enableLow();
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <LCD_init>:
}
 6c4:	b9 df       	rcall	.-142    	; 0x638 <GPIO_init>
 6c6:	8f e5       	ldi	r24, 0x5F	; 95
 6c8:	9a ee       	ldi	r25, 0xEA	; 234
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_init+0x6>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_init+0xc>
 6d0:	00 00       	nop

void LCD_init()
{
	GPIO_init();
	_delay_ms(15);
	LCD_writeCmdData(LCD_FUNCTON_SET);   //
 6d2:	88 e3       	ldi	r24, 0x38	; 56
 6d4:	ed df       	rcall	.-38     	; 0x6b0 <LCD_writeCmdData>
 6d6:	8f e1       	ldi	r24, 0x1F	; 31
 6d8:	9e e4       	ldi	r25, 0x4E	; 78
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_init+0x16>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <LCD_init+0x1c>
	_delay_ms(5);
	LCD_writeCmdData(LCD_FUNCTON_SET);
 6e0:	00 00       	nop
 6e2:	88 e3       	ldi	r24, 0x38	; 56
 6e4:	e5 df       	rcall	.-54     	; 0x6b0 <LCD_writeCmdData>
 6e6:	8f e9       	ldi	r24, 0x9F	; 159
 6e8:	9f e0       	ldi	r25, 0x0F	; 15
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_init+0x26>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_init+0x2c>
	_delay_ms(1);
	LCD_writeCmdData(LCD_FUNCTON_SET);
 6f0:	00 00       	nop
 6f2:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_FUNCTON_SET);
 6f4:	dd df       	rcall	.-70     	; 0x6b0 <LCD_writeCmdData>
 6f6:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF);
 6f8:	db df       	rcall	.-74     	; 0x6b0 <LCD_writeCmdData>
 6fa:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
 6fc:	d9 df       	rcall	.-78     	; 0x6b0 <LCD_writeCmdData>
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	d7 df       	rcall	.-82     	; 0x6b0 <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
 702:	86 e0       	ldi	r24, 0x06	; 6
 704:	d5 df       	rcall	.-86     	; 0x6b0 <LCD_writeCmdData>
 706:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);
 708:	d3 cf       	rjmp	.-90     	; 0x6b0 <LCD_writeCmdData>
 70a:	08 95       	ret

0000070c <LCD_writeCharData>:
 70c:	cf 93       	push	r28
 70e:	c8 2f       	mov	r28, r24
}

void LCD_writeCharData(uint8_t data) // 문자를 찍는 함수
{
	// LCD char 쓰는 동작
	LCD_charMode();
 710:	a5 df       	rcall	.-182    	; 0x65c <LCD_charMode>
	LCD_writeMode();
 712:	ab df       	rcall	.-170    	; 0x66a <LCD_writeMode>
	LCD_enableHigh();
 714:	b1 df       	rcall	.-158    	; 0x678 <LCD_enableHigh>
	LCD_writeByte(data);
 716:	8c 2f       	mov	r24, r28
 718:	bc df       	rcall	.-136    	; 0x692 <LCD_writeByte>
 71a:	bd df       	rcall	.-134    	; 0x696 <LCD_enableLow>
	LCD_enableLow();
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <LCD_writeString>:
}
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17

void LCD_writeString(char *str)
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	8c 01       	movw	r16, r24
	for(int i=0;str[i];i++)
 72a:	c0 e0       	ldi	r28, 0x00	; 0
 72c:	d0 e0       	ldi	r29, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <LCD_writeString+0x14>
	{
		LCD_writeCharData(str[i]);
 730:	ed df       	rcall	.-38     	; 0x70c <LCD_writeCharData>
	LCD_enableLow();
}

void LCD_writeString(char *str)
{
	for(int i=0;str[i];i++)
 732:	21 96       	adiw	r28, 0x01	; 1
 734:	f8 01       	movw	r30, r16
 736:	ec 0f       	add	r30, r28
 738:	fd 1f       	adc	r31, r29
 73a:	80 81       	ld	r24, Z
 73c:	81 11       	cpse	r24, r1
 73e:	f8 cf       	rjmp	.-16     	; 0x730 <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col %= 16, row %=2;
 74a:	6f 70       	andi	r22, 0x0F	; 15
 74c:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 * row) +col;
 74e:	90 e4       	ldi	r25, 0x40	; 64
 750:	89 9f       	mul	r24, r25
 752:	60 0d       	add	r22, r0
 754:	11 24       	eor	r1, r1
 756:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + lcdregisterAddress;
	LCD_writeCmdData(command);
 758:	80 58       	subi	r24, 0x80	; 128
 75a:	aa cf       	rjmp	.-172    	; 0x6b0 <LCD_writeCmdData>
 75c:	08 95       	ret

0000075e <LCD_writeStringXY>:
}

void LCD_writeStringXY(char *str, uint8_t row, uint8_t col)
{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	ec 01       	movw	r28, r24
 764:	86 2f       	mov	r24, r22
	LCD_gotoXY(row, col);
 766:	64 2f       	mov	r22, r20
 768:	f0 df       	rcall	.-32     	; 0x74a <LCD_gotoXY>
	LCD_writeString(str);
 76a:	ce 01       	movw	r24, r28
 76c:	d9 df       	rcall	.-78     	; 0x720 <LCD_writeString>
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <__vector_16>:
#include "ap/Clock/Clock.h"
#include "driver/fnd/fnd.h"
#include "driver/LCD/LCD.h"

ISR(TIMER0_OVF_vect)
{
 774:	1f 92       	push	r1
 776:	0f 92       	push	r0
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	0f 92       	push	r0
 77c:	11 24       	eor	r1, r1
 77e:	0b b6       	in	r0, 0x3b	; 59
 780:	0f 92       	push	r0
 782:	2f 93       	push	r18
 784:	3f 93       	push	r19
 786:	4f 93       	push	r20
 788:	5f 93       	push	r21
 78a:	6f 93       	push	r22
 78c:	7f 93       	push	r23
 78e:	8f 93       	push	r24
 790:	9f 93       	push	r25
 792:	af 93       	push	r26
 794:	bf 93       	push	r27
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
	FND_ISR_Process();
 79a:	41 df       	rcall	.-382    	; 0x61e <FND_ISR_Process>
	TCNT0 = 131;
 79c:	83 e8       	ldi	r24, 0x83	; 131
 79e:	82 bf       	out	0x32, r24	; 50
}
 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	bf 91       	pop	r27
 7a6:	af 91       	pop	r26
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	7f 91       	pop	r23
 7ae:	6f 91       	pop	r22
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	0f 90       	pop	r0
 7ba:	0b be       	out	0x3b, r0	; 59
 7bc:	0f 90       	pop	r0
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	0f 90       	pop	r0
 7c2:	1f 90       	pop	r1
 7c4:	18 95       	reti

000007c6 <__vector_9>:

ISR(TIMER2_COMP_vect)
{
 7c6:	1f 92       	push	r1
 7c8:	0f 92       	push	r0
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	0f 92       	push	r0
 7ce:	11 24       	eor	r1, r1
 7d0:	0b b6       	in	r0, 0x3b	; 59
 7d2:	0f 92       	push	r0
 7d4:	2f 93       	push	r18
 7d6:	3f 93       	push	r19
 7d8:	4f 93       	push	r20
 7da:	5f 93       	push	r21
 7dc:	6f 93       	push	r22
 7de:	7f 93       	push	r23
 7e0:	8f 93       	push	r24
 7e2:	9f 93       	push	r25
 7e4:	af 93       	push	r26
 7e6:	bf 93       	push	r27
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31
	Clock_incMilisec();
 7ec:	9e dc       	rcall	.-1732   	; 0x12a <Clock_incMilisec>
}
 7ee:	ff 91       	pop	r31
 7f0:	ef 91       	pop	r30
 7f2:	bf 91       	pop	r27
 7f4:	af 91       	pop	r26
 7f6:	9f 91       	pop	r25
 7f8:	8f 91       	pop	r24
 7fa:	7f 91       	pop	r23
 7fc:	6f 91       	pop	r22
 7fe:	5f 91       	pop	r21
 800:	4f 91       	pop	r20
 802:	3f 91       	pop	r19
 804:	2f 91       	pop	r18
 806:	0f 90       	pop	r0
 808:	0b be       	out	0x3b, r0	; 59
 80a:	0f 90       	pop	r0
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	0f 90       	pop	r0
 810:	1f 90       	pop	r1
 812:	18 95       	reti

00000814 <main>:

int main(void)
{
	Clock_init();
 814:	59 dc       	rcall	.-1870   	; 0xc8 <Clock_init>
	//Global Interrupt Enable
	sei();
	
	while (1)
	{
		Clock_run();
 816:	78 94       	sei
 818:	78 dd       	rcall	.-1296   	; 0x30a <Clock_run>
 81a:	fe cf       	rjmp	.-4      	; 0x818 <main+0x4>

0000081c <Gpio_initPin>:
//input - pin

uint8_t Gpio_ReadPort(volatile uint8_t *PIN)
{
	return *PIN;
}
 81c:	61 30       	cpi	r22, 0x01	; 1
 81e:	61 f4       	brne	.+24     	; 0x838 <Gpio_initPin+0x1c>
 820:	fc 01       	movw	r30, r24
 822:	50 81       	ld	r21, Z
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	04 2e       	mov	r0, r20
 82a:	02 c0       	rjmp	.+4      	; 0x830 <Gpio_initPin+0x14>
 82c:	22 0f       	add	r18, r18
 82e:	33 1f       	adc	r19, r19
 830:	0a 94       	dec	r0
 832:	e2 f7       	brpl	.-8      	; 0x82c <Gpio_initPin+0x10>
 834:	25 2b       	or	r18, r21
 836:	20 83       	st	Z, r18
 838:	61 11       	cpse	r22, r1
 83a:	0c c0       	rjmp	.+24     	; 0x854 <Gpio_initPin+0x38>
 83c:	fc 01       	movw	r30, r24
 83e:	50 81       	ld	r21, Z
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	02 c0       	rjmp	.+4      	; 0x84a <Gpio_initPin+0x2e>
 846:	22 0f       	add	r18, r18
 848:	33 1f       	adc	r19, r19
 84a:	4a 95       	dec	r20
 84c:	e2 f7       	brpl	.-8      	; 0x846 <Gpio_initPin+0x2a>
 84e:	20 95       	com	r18
 850:	25 23       	and	r18, r21
 852:	20 83       	st	Z, r18
 854:	08 95       	ret

00000856 <Gpio_ReadPin>:

uint8_t Gpio_ReadPin(volatile uint8_t *PIN, uint8_t pinNum)
{
	return ((*PIN & (1<<pinNum)) != 0);
 856:	fc 01       	movw	r30, r24
 858:	80 81       	ld	r24, Z
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <Gpio_ReadPin+0xc>
 85e:	95 95       	asr	r25
 860:	87 95       	ror	r24
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <Gpio_ReadPin+0x8>
	//return (*PIN &(1<<pinNum)) >> pinNum;
 866:	81 70       	andi	r24, 0x01	; 1
 868:	08 95       	ret

0000086a <TIM0_OVF_init>:
﻿#include "TIM.h"

void TIM0_OVF_init()   // 1ms interrupt Enable
{
	// prescaler /128
	TCCR0 |= (1<<CS02) |(0<<CS01) | (1<<CS00);
 86a:	83 b7       	in	r24, 0x33	; 51
 86c:	85 60       	ori	r24, 0x05	; 5
 86e:	83 bf       	out	0x33, r24	; 51
	//TIMSK Timer Overflow Interrupt Enable
	TIMSK |= (1<<TOIE0);
 870:	87 b7       	in	r24, 0x37	; 55
 872:	81 60       	ori	r24, 0x01	; 1
 874:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;
 876:	83 e8       	ldi	r24, 0x83	; 131
 878:	82 bf       	out	0x32, r24	; 50
 87a:	08 95       	ret

0000087c <TIM2_CTC_init>:
}

void TIM2_CTC_init()
{
	TCCR2 |= (0<<CS02) | (1<<CS01) | (1<<CS00); //prescaler /64
 87c:	85 b5       	in	r24, 0x25	; 37
 87e:	83 60       	ori	r24, 0x03	; 3
 880:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) |(0<<WGM20); //CTC 모드
 882:	85 b5       	in	r24, 0x25	; 37
 884:	88 60       	ori	r24, 0x08	; 8
 886:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //Output Compare Match Interrupt Enable
 888:	87 b7       	in	r24, 0x37	; 55
 88a:	80 68       	ori	r24, 0x80	; 128
 88c:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249;
 88e:	89 ef       	ldi	r24, 0xF9	; 249
 890:	83 bd       	out	0x23, r24	; 35
 892:	08 95       	ret

00000894 <__divmodhi4>:
 894:	97 fb       	bst	r25, 7
 896:	07 2e       	mov	r0, r23
 898:	16 f4       	brtc	.+4      	; 0x89e <__divmodhi4+0xa>
 89a:	00 94       	com	r0
 89c:	06 d0       	rcall	.+12     	; 0x8aa <__divmodhi4_neg1>
 89e:	77 fd       	sbrc	r23, 7
 8a0:	08 d0       	rcall	.+16     	; 0x8b2 <__divmodhi4_neg2>
 8a2:	1a d0       	rcall	.+52     	; 0x8d8 <__udivmodhi4>
 8a4:	07 fc       	sbrc	r0, 7
 8a6:	05 d0       	rcall	.+10     	; 0x8b2 <__divmodhi4_neg2>
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__divmodhi4_exit>

000008aa <__divmodhi4_neg1>:
 8aa:	90 95       	com	r25
 8ac:	81 95       	neg	r24
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	08 95       	ret

000008b2 <__divmodhi4_neg2>:
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255

000008b8 <__divmodhi4_exit>:
 8b8:	08 95       	ret

000008ba <__umulhisi3>:
 8ba:	a2 9f       	mul	r26, r18
 8bc:	b0 01       	movw	r22, r0
 8be:	b3 9f       	mul	r27, r19
 8c0:	c0 01       	movw	r24, r0
 8c2:	a3 9f       	mul	r26, r19
 8c4:	70 0d       	add	r23, r0
 8c6:	81 1d       	adc	r24, r1
 8c8:	11 24       	eor	r1, r1
 8ca:	91 1d       	adc	r25, r1
 8cc:	b2 9f       	mul	r27, r18
 8ce:	70 0d       	add	r23, r0
 8d0:	81 1d       	adc	r24, r1
 8d2:	11 24       	eor	r1, r1
 8d4:	91 1d       	adc	r25, r1
 8d6:	08 95       	ret

000008d8 <__udivmodhi4>:
 8d8:	aa 1b       	sub	r26, r26
 8da:	bb 1b       	sub	r27, r27
 8dc:	51 e1       	ldi	r21, 0x11	; 17
 8de:	07 c0       	rjmp	.+14     	; 0x8ee <__udivmodhi4_ep>

000008e0 <__udivmodhi4_loop>:
 8e0:	aa 1f       	adc	r26, r26
 8e2:	bb 1f       	adc	r27, r27
 8e4:	a6 17       	cp	r26, r22
 8e6:	b7 07       	cpc	r27, r23
 8e8:	10 f0       	brcs	.+4      	; 0x8ee <__udivmodhi4_ep>
 8ea:	a6 1b       	sub	r26, r22
 8ec:	b7 0b       	sbc	r27, r23

000008ee <__udivmodhi4_ep>:
 8ee:	88 1f       	adc	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	5a 95       	dec	r21
 8f4:	a9 f7       	brne	.-22     	; 0x8e0 <__udivmodhi4_loop>
 8f6:	80 95       	com	r24
 8f8:	90 95       	com	r25
 8fa:	bc 01       	movw	r22, r24
 8fc:	cd 01       	movw	r24, r26
 8fe:	08 95       	ret

00000900 <sprintf>:
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	2e 97       	sbiw	r28, 0x0e	; 14
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	0d 89       	ldd	r16, Y+21	; 0x15
 91a:	1e 89       	ldd	r17, Y+22	; 0x16
 91c:	86 e0       	ldi	r24, 0x06	; 6
 91e:	8c 83       	std	Y+4, r24	; 0x04
 920:	1a 83       	std	Y+2, r17	; 0x02
 922:	09 83       	std	Y+1, r16	; 0x01
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f e7       	ldi	r25, 0x7F	; 127
 928:	9e 83       	std	Y+6, r25	; 0x06
 92a:	8d 83       	std	Y+5, r24	; 0x05
 92c:	ae 01       	movw	r20, r28
 92e:	47 5e       	subi	r20, 0xE7	; 231
 930:	5f 4f       	sbci	r21, 0xFF	; 255
 932:	6f 89       	ldd	r22, Y+23	; 0x17
 934:	78 8d       	ldd	r23, Y+24	; 0x18
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	10 d0       	rcall	.+32     	; 0x95c <vfprintf>
 93c:	ef 81       	ldd	r30, Y+7	; 0x07
 93e:	f8 85       	ldd	r31, Y+8	; 0x08
 940:	e0 0f       	add	r30, r16
 942:	f1 1f       	adc	r31, r17
 944:	10 82       	st	Z, r1
 946:	2e 96       	adiw	r28, 0x0e	; 14
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	f8 94       	cli
 94c:	de bf       	out	0x3e, r29	; 62
 94e:	0f be       	out	0x3f, r0	; 63
 950:	cd bf       	out	0x3d, r28	; 61
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	0f 91       	pop	r16
 95a:	08 95       	ret

0000095c <vfprintf>:
 95c:	2f 92       	push	r2
 95e:	3f 92       	push	r3
 960:	4f 92       	push	r4
 962:	5f 92       	push	r5
 964:	6f 92       	push	r6
 966:	7f 92       	push	r7
 968:	8f 92       	push	r8
 96a:	9f 92       	push	r9
 96c:	af 92       	push	r10
 96e:	bf 92       	push	r11
 970:	cf 92       	push	r12
 972:	df 92       	push	r13
 974:	ef 92       	push	r14
 976:	ff 92       	push	r15
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	2b 97       	sbiw	r28, 0x0b	; 11
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	6c 01       	movw	r12, r24
 992:	7b 01       	movw	r14, r22
 994:	8a 01       	movw	r16, r20
 996:	fc 01       	movw	r30, r24
 998:	17 82       	std	Z+7, r1	; 0x07
 99a:	16 82       	std	Z+6, r1	; 0x06
 99c:	83 81       	ldd	r24, Z+3	; 0x03
 99e:	81 ff       	sbrs	r24, 1
 9a0:	bf c1       	rjmp	.+894    	; 0xd20 <vfprintf+0x3c4>
 9a2:	ce 01       	movw	r24, r28
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	3c 01       	movw	r6, r24
 9a8:	f6 01       	movw	r30, r12
 9aa:	93 81       	ldd	r25, Z+3	; 0x03
 9ac:	f7 01       	movw	r30, r14
 9ae:	93 fd       	sbrc	r25, 3
 9b0:	85 91       	lpm	r24, Z+
 9b2:	93 ff       	sbrs	r25, 3
 9b4:	81 91       	ld	r24, Z+
 9b6:	7f 01       	movw	r14, r30
 9b8:	88 23       	and	r24, r24
 9ba:	09 f4       	brne	.+2      	; 0x9be <vfprintf+0x62>
 9bc:	ad c1       	rjmp	.+858    	; 0xd18 <vfprintf+0x3bc>
 9be:	85 32       	cpi	r24, 0x25	; 37
 9c0:	39 f4       	brne	.+14     	; 0x9d0 <vfprintf+0x74>
 9c2:	93 fd       	sbrc	r25, 3
 9c4:	85 91       	lpm	r24, Z+
 9c6:	93 ff       	sbrs	r25, 3
 9c8:	81 91       	ld	r24, Z+
 9ca:	7f 01       	movw	r14, r30
 9cc:	85 32       	cpi	r24, 0x25	; 37
 9ce:	21 f4       	brne	.+8      	; 0x9d8 <vfprintf+0x7c>
 9d0:	b6 01       	movw	r22, r12
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	d6 d1       	rcall	.+940    	; 0xd82 <fputc>
 9d6:	e8 cf       	rjmp	.-48     	; 0x9a8 <vfprintf+0x4c>
 9d8:	91 2c       	mov	r9, r1
 9da:	21 2c       	mov	r2, r1
 9dc:	31 2c       	mov	r3, r1
 9de:	ff e1       	ldi	r31, 0x1F	; 31
 9e0:	f3 15       	cp	r31, r3
 9e2:	d8 f0       	brcs	.+54     	; 0xa1a <vfprintf+0xbe>
 9e4:	8b 32       	cpi	r24, 0x2B	; 43
 9e6:	79 f0       	breq	.+30     	; 0xa06 <vfprintf+0xaa>
 9e8:	38 f4       	brcc	.+14     	; 0x9f8 <vfprintf+0x9c>
 9ea:	80 32       	cpi	r24, 0x20	; 32
 9ec:	79 f0       	breq	.+30     	; 0xa0c <vfprintf+0xb0>
 9ee:	83 32       	cpi	r24, 0x23	; 35
 9f0:	a1 f4       	brne	.+40     	; 0xa1a <vfprintf+0xbe>
 9f2:	23 2d       	mov	r18, r3
 9f4:	20 61       	ori	r18, 0x10	; 16
 9f6:	1d c0       	rjmp	.+58     	; 0xa32 <vfprintf+0xd6>
 9f8:	8d 32       	cpi	r24, 0x2D	; 45
 9fa:	61 f0       	breq	.+24     	; 0xa14 <vfprintf+0xb8>
 9fc:	80 33       	cpi	r24, 0x30	; 48
 9fe:	69 f4       	brne	.+26     	; 0xa1a <vfprintf+0xbe>
 a00:	23 2d       	mov	r18, r3
 a02:	21 60       	ori	r18, 0x01	; 1
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <vfprintf+0xd6>
 a06:	83 2d       	mov	r24, r3
 a08:	82 60       	ori	r24, 0x02	; 2
 a0a:	38 2e       	mov	r3, r24
 a0c:	e3 2d       	mov	r30, r3
 a0e:	e4 60       	ori	r30, 0x04	; 4
 a10:	3e 2e       	mov	r3, r30
 a12:	2a c0       	rjmp	.+84     	; 0xa68 <vfprintf+0x10c>
 a14:	f3 2d       	mov	r31, r3
 a16:	f8 60       	ori	r31, 0x08	; 8
 a18:	1d c0       	rjmp	.+58     	; 0xa54 <vfprintf+0xf8>
 a1a:	37 fc       	sbrc	r3, 7
 a1c:	2d c0       	rjmp	.+90     	; 0xa78 <vfprintf+0x11c>
 a1e:	20 ed       	ldi	r18, 0xD0	; 208
 a20:	28 0f       	add	r18, r24
 a22:	2a 30       	cpi	r18, 0x0A	; 10
 a24:	40 f0       	brcs	.+16     	; 0xa36 <vfprintf+0xda>
 a26:	8e 32       	cpi	r24, 0x2E	; 46
 a28:	b9 f4       	brne	.+46     	; 0xa58 <vfprintf+0xfc>
 a2a:	36 fc       	sbrc	r3, 6
 a2c:	75 c1       	rjmp	.+746    	; 0xd18 <vfprintf+0x3bc>
 a2e:	23 2d       	mov	r18, r3
 a30:	20 64       	ori	r18, 0x40	; 64
 a32:	32 2e       	mov	r3, r18
 a34:	19 c0       	rjmp	.+50     	; 0xa68 <vfprintf+0x10c>
 a36:	36 fe       	sbrs	r3, 6
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <vfprintf+0xea>
 a3a:	8a e0       	ldi	r24, 0x0A	; 10
 a3c:	98 9e       	mul	r9, r24
 a3e:	20 0d       	add	r18, r0
 a40:	11 24       	eor	r1, r1
 a42:	92 2e       	mov	r9, r18
 a44:	11 c0       	rjmp	.+34     	; 0xa68 <vfprintf+0x10c>
 a46:	ea e0       	ldi	r30, 0x0A	; 10
 a48:	2e 9e       	mul	r2, r30
 a4a:	20 0d       	add	r18, r0
 a4c:	11 24       	eor	r1, r1
 a4e:	22 2e       	mov	r2, r18
 a50:	f3 2d       	mov	r31, r3
 a52:	f0 62       	ori	r31, 0x20	; 32
 a54:	3f 2e       	mov	r3, r31
 a56:	08 c0       	rjmp	.+16     	; 0xa68 <vfprintf+0x10c>
 a58:	8c 36       	cpi	r24, 0x6C	; 108
 a5a:	21 f4       	brne	.+8      	; 0xa64 <vfprintf+0x108>
 a5c:	83 2d       	mov	r24, r3
 a5e:	80 68       	ori	r24, 0x80	; 128
 a60:	38 2e       	mov	r3, r24
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x10c>
 a64:	88 36       	cpi	r24, 0x68	; 104
 a66:	41 f4       	brne	.+16     	; 0xa78 <vfprintf+0x11c>
 a68:	f7 01       	movw	r30, r14
 a6a:	93 fd       	sbrc	r25, 3
 a6c:	85 91       	lpm	r24, Z+
 a6e:	93 ff       	sbrs	r25, 3
 a70:	81 91       	ld	r24, Z+
 a72:	7f 01       	movw	r14, r30
 a74:	81 11       	cpse	r24, r1
 a76:	b3 cf       	rjmp	.-154    	; 0x9de <vfprintf+0x82>
 a78:	98 2f       	mov	r25, r24
 a7a:	9f 7d       	andi	r25, 0xDF	; 223
 a7c:	95 54       	subi	r25, 0x45	; 69
 a7e:	93 30       	cpi	r25, 0x03	; 3
 a80:	28 f4       	brcc	.+10     	; 0xa8c <vfprintf+0x130>
 a82:	0c 5f       	subi	r16, 0xFC	; 252
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	9f e3       	ldi	r25, 0x3F	; 63
 a88:	99 83       	std	Y+1, r25	; 0x01
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <vfprintf+0x14a>
 a8c:	83 36       	cpi	r24, 0x63	; 99
 a8e:	31 f0       	breq	.+12     	; 0xa9c <vfprintf+0x140>
 a90:	83 37       	cpi	r24, 0x73	; 115
 a92:	71 f0       	breq	.+28     	; 0xab0 <vfprintf+0x154>
 a94:	83 35       	cpi	r24, 0x53	; 83
 a96:	09 f0       	breq	.+2      	; 0xa9a <vfprintf+0x13e>
 a98:	55 c0       	rjmp	.+170    	; 0xb44 <vfprintf+0x1e8>
 a9a:	20 c0       	rjmp	.+64     	; 0xadc <vfprintf+0x180>
 a9c:	f8 01       	movw	r30, r16
 a9e:	80 81       	ld	r24, Z
 aa0:	89 83       	std	Y+1, r24	; 0x01
 aa2:	0e 5f       	subi	r16, 0xFE	; 254
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	88 24       	eor	r8, r8
 aa8:	83 94       	inc	r8
 aaa:	91 2c       	mov	r9, r1
 aac:	53 01       	movw	r10, r6
 aae:	12 c0       	rjmp	.+36     	; 0xad4 <vfprintf+0x178>
 ab0:	28 01       	movw	r4, r16
 ab2:	f2 e0       	ldi	r31, 0x02	; 2
 ab4:	4f 0e       	add	r4, r31
 ab6:	51 1c       	adc	r5, r1
 ab8:	f8 01       	movw	r30, r16
 aba:	a0 80       	ld	r10, Z
 abc:	b1 80       	ldd	r11, Z+1	; 0x01
 abe:	36 fe       	sbrs	r3, 6
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <vfprintf+0x16c>
 ac2:	69 2d       	mov	r22, r9
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x170>
 ac8:	6f ef       	ldi	r22, 0xFF	; 255
 aca:	7f ef       	ldi	r23, 0xFF	; 255
 acc:	c5 01       	movw	r24, r10
 ace:	4e d1       	rcall	.+668    	; 0xd6c <strnlen>
 ad0:	4c 01       	movw	r8, r24
 ad2:	82 01       	movw	r16, r4
 ad4:	f3 2d       	mov	r31, r3
 ad6:	ff 77       	andi	r31, 0x7F	; 127
 ad8:	3f 2e       	mov	r3, r31
 ada:	15 c0       	rjmp	.+42     	; 0xb06 <vfprintf+0x1aa>
 adc:	28 01       	movw	r4, r16
 ade:	22 e0       	ldi	r18, 0x02	; 2
 ae0:	42 0e       	add	r4, r18
 ae2:	51 1c       	adc	r5, r1
 ae4:	f8 01       	movw	r30, r16
 ae6:	a0 80       	ld	r10, Z
 ae8:	b1 80       	ldd	r11, Z+1	; 0x01
 aea:	36 fe       	sbrs	r3, 6
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x198>
 aee:	69 2d       	mov	r22, r9
 af0:	70 e0       	ldi	r23, 0x00	; 0
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <vfprintf+0x19c>
 af4:	6f ef       	ldi	r22, 0xFF	; 255
 af6:	7f ef       	ldi	r23, 0xFF	; 255
 af8:	c5 01       	movw	r24, r10
 afa:	2d d1       	rcall	.+602    	; 0xd56 <strnlen_P>
 afc:	4c 01       	movw	r8, r24
 afe:	f3 2d       	mov	r31, r3
 b00:	f0 68       	ori	r31, 0x80	; 128
 b02:	3f 2e       	mov	r3, r31
 b04:	82 01       	movw	r16, r4
 b06:	33 fc       	sbrc	r3, 3
 b08:	19 c0       	rjmp	.+50     	; 0xb3c <vfprintf+0x1e0>
 b0a:	82 2d       	mov	r24, r2
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	88 16       	cp	r8, r24
 b10:	99 06       	cpc	r9, r25
 b12:	a0 f4       	brcc	.+40     	; 0xb3c <vfprintf+0x1e0>
 b14:	b6 01       	movw	r22, r12
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	33 d1       	rcall	.+614    	; 0xd82 <fputc>
 b1c:	2a 94       	dec	r2
 b1e:	f5 cf       	rjmp	.-22     	; 0xb0a <vfprintf+0x1ae>
 b20:	f5 01       	movw	r30, r10
 b22:	37 fc       	sbrc	r3, 7
 b24:	85 91       	lpm	r24, Z+
 b26:	37 fe       	sbrs	r3, 7
 b28:	81 91       	ld	r24, Z+
 b2a:	5f 01       	movw	r10, r30
 b2c:	b6 01       	movw	r22, r12
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	28 d1       	rcall	.+592    	; 0xd82 <fputc>
 b32:	21 10       	cpse	r2, r1
 b34:	2a 94       	dec	r2
 b36:	21 e0       	ldi	r18, 0x01	; 1
 b38:	82 1a       	sub	r8, r18
 b3a:	91 08       	sbc	r9, r1
 b3c:	81 14       	cp	r8, r1
 b3e:	91 04       	cpc	r9, r1
 b40:	79 f7       	brne	.-34     	; 0xb20 <vfprintf+0x1c4>
 b42:	e1 c0       	rjmp	.+450    	; 0xd06 <vfprintf+0x3aa>
 b44:	84 36       	cpi	r24, 0x64	; 100
 b46:	11 f0       	breq	.+4      	; 0xb4c <vfprintf+0x1f0>
 b48:	89 36       	cpi	r24, 0x69	; 105
 b4a:	39 f5       	brne	.+78     	; 0xb9a <vfprintf+0x23e>
 b4c:	f8 01       	movw	r30, r16
 b4e:	37 fe       	sbrs	r3, 7
 b50:	07 c0       	rjmp	.+14     	; 0xb60 <vfprintf+0x204>
 b52:	60 81       	ld	r22, Z
 b54:	71 81       	ldd	r23, Z+1	; 0x01
 b56:	82 81       	ldd	r24, Z+2	; 0x02
 b58:	93 81       	ldd	r25, Z+3	; 0x03
 b5a:	0c 5f       	subi	r16, 0xFC	; 252
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <vfprintf+0x214>
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	07 2e       	mov	r0, r23
 b66:	00 0c       	add	r0, r0
 b68:	88 0b       	sbc	r24, r24
 b6a:	99 0b       	sbc	r25, r25
 b6c:	0e 5f       	subi	r16, 0xFE	; 254
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	f3 2d       	mov	r31, r3
 b72:	ff 76       	andi	r31, 0x6F	; 111
 b74:	3f 2e       	mov	r3, r31
 b76:	97 ff       	sbrs	r25, 7
 b78:	09 c0       	rjmp	.+18     	; 0xb8c <vfprintf+0x230>
 b7a:	90 95       	com	r25
 b7c:	80 95       	com	r24
 b7e:	70 95       	com	r23
 b80:	61 95       	neg	r22
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	f0 68       	ori	r31, 0x80	; 128
 b8a:	3f 2e       	mov	r3, r31
 b8c:	2a e0       	ldi	r18, 0x0A	; 10
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	a3 01       	movw	r20, r6
 b92:	33 d1       	rcall	.+614    	; 0xdfa <__ultoa_invert>
 b94:	88 2e       	mov	r8, r24
 b96:	86 18       	sub	r8, r6
 b98:	44 c0       	rjmp	.+136    	; 0xc22 <vfprintf+0x2c6>
 b9a:	85 37       	cpi	r24, 0x75	; 117
 b9c:	31 f4       	brne	.+12     	; 0xbaa <vfprintf+0x24e>
 b9e:	23 2d       	mov	r18, r3
 ba0:	2f 7e       	andi	r18, 0xEF	; 239
 ba2:	b2 2e       	mov	r11, r18
 ba4:	2a e0       	ldi	r18, 0x0A	; 10
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	25 c0       	rjmp	.+74     	; 0xbf4 <vfprintf+0x298>
 baa:	93 2d       	mov	r25, r3
 bac:	99 7f       	andi	r25, 0xF9	; 249
 bae:	b9 2e       	mov	r11, r25
 bb0:	8f 36       	cpi	r24, 0x6F	; 111
 bb2:	c1 f0       	breq	.+48     	; 0xbe4 <vfprintf+0x288>
 bb4:	18 f4       	brcc	.+6      	; 0xbbc <vfprintf+0x260>
 bb6:	88 35       	cpi	r24, 0x58	; 88
 bb8:	79 f0       	breq	.+30     	; 0xbd8 <vfprintf+0x27c>
 bba:	ae c0       	rjmp	.+348    	; 0xd18 <vfprintf+0x3bc>
 bbc:	80 37       	cpi	r24, 0x70	; 112
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <vfprintf+0x26a>
 bc0:	88 37       	cpi	r24, 0x78	; 120
 bc2:	21 f0       	breq	.+8      	; 0xbcc <vfprintf+0x270>
 bc4:	a9 c0       	rjmp	.+338    	; 0xd18 <vfprintf+0x3bc>
 bc6:	e9 2f       	mov	r30, r25
 bc8:	e0 61       	ori	r30, 0x10	; 16
 bca:	be 2e       	mov	r11, r30
 bcc:	b4 fe       	sbrs	r11, 4
 bce:	0d c0       	rjmp	.+26     	; 0xbea <vfprintf+0x28e>
 bd0:	fb 2d       	mov	r31, r11
 bd2:	f4 60       	ori	r31, 0x04	; 4
 bd4:	bf 2e       	mov	r11, r31
 bd6:	09 c0       	rjmp	.+18     	; 0xbea <vfprintf+0x28e>
 bd8:	34 fe       	sbrs	r3, 4
 bda:	0a c0       	rjmp	.+20     	; 0xbf0 <vfprintf+0x294>
 bdc:	29 2f       	mov	r18, r25
 bde:	26 60       	ori	r18, 0x06	; 6
 be0:	b2 2e       	mov	r11, r18
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x294>
 be4:	28 e0       	ldi	r18, 0x08	; 8
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	05 c0       	rjmp	.+10     	; 0xbf4 <vfprintf+0x298>
 bea:	20 e1       	ldi	r18, 0x10	; 16
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x298>
 bf0:	20 e1       	ldi	r18, 0x10	; 16
 bf2:	32 e0       	ldi	r19, 0x02	; 2
 bf4:	f8 01       	movw	r30, r16
 bf6:	b7 fe       	sbrs	r11, 7
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <vfprintf+0x2ac>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	82 81       	ldd	r24, Z+2	; 0x02
 c00:	93 81       	ldd	r25, Z+3	; 0x03
 c02:	0c 5f       	subi	r16, 0xFC	; 252
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x2b8>
 c08:	60 81       	ld	r22, Z
 c0a:	71 81       	ldd	r23, Z+1	; 0x01
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 5f       	subi	r16, 0xFE	; 254
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	a3 01       	movw	r20, r6
 c16:	f1 d0       	rcall	.+482    	; 0xdfa <__ultoa_invert>
 c18:	88 2e       	mov	r8, r24
 c1a:	86 18       	sub	r8, r6
 c1c:	fb 2d       	mov	r31, r11
 c1e:	ff 77       	andi	r31, 0x7F	; 127
 c20:	3f 2e       	mov	r3, r31
 c22:	36 fe       	sbrs	r3, 6
 c24:	0d c0       	rjmp	.+26     	; 0xc40 <vfprintf+0x2e4>
 c26:	23 2d       	mov	r18, r3
 c28:	2e 7f       	andi	r18, 0xFE	; 254
 c2a:	a2 2e       	mov	r10, r18
 c2c:	89 14       	cp	r8, r9
 c2e:	58 f4       	brcc	.+22     	; 0xc46 <vfprintf+0x2ea>
 c30:	34 fe       	sbrs	r3, 4
 c32:	0b c0       	rjmp	.+22     	; 0xc4a <vfprintf+0x2ee>
 c34:	32 fc       	sbrc	r3, 2
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <vfprintf+0x2ee>
 c38:	83 2d       	mov	r24, r3
 c3a:	8e 7e       	andi	r24, 0xEE	; 238
 c3c:	a8 2e       	mov	r10, r24
 c3e:	05 c0       	rjmp	.+10     	; 0xc4a <vfprintf+0x2ee>
 c40:	b8 2c       	mov	r11, r8
 c42:	a3 2c       	mov	r10, r3
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <vfprintf+0x2f0>
 c46:	b8 2c       	mov	r11, r8
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <vfprintf+0x2f0>
 c4a:	b9 2c       	mov	r11, r9
 c4c:	a4 fe       	sbrs	r10, 4
 c4e:	0f c0       	rjmp	.+30     	; 0xc6e <vfprintf+0x312>
 c50:	fe 01       	movw	r30, r28
 c52:	e8 0d       	add	r30, r8
 c54:	f1 1d       	adc	r31, r1
 c56:	80 81       	ld	r24, Z
 c58:	80 33       	cpi	r24, 0x30	; 48
 c5a:	21 f4       	brne	.+8      	; 0xc64 <vfprintf+0x308>
 c5c:	9a 2d       	mov	r25, r10
 c5e:	99 7e       	andi	r25, 0xE9	; 233
 c60:	a9 2e       	mov	r10, r25
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x31a>
 c64:	a2 fe       	sbrs	r10, 2
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x318>
 c68:	b3 94       	inc	r11
 c6a:	b3 94       	inc	r11
 c6c:	04 c0       	rjmp	.+8      	; 0xc76 <vfprintf+0x31a>
 c6e:	8a 2d       	mov	r24, r10
 c70:	86 78       	andi	r24, 0x86	; 134
 c72:	09 f0       	breq	.+2      	; 0xc76 <vfprintf+0x31a>
 c74:	b3 94       	inc	r11
 c76:	a3 fc       	sbrc	r10, 3
 c78:	10 c0       	rjmp	.+32     	; 0xc9a <vfprintf+0x33e>
 c7a:	a0 fe       	sbrs	r10, 0
 c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0x32e>
 c7e:	b2 14       	cp	r11, r2
 c80:	80 f4       	brcc	.+32     	; 0xca2 <vfprintf+0x346>
 c82:	28 0c       	add	r2, r8
 c84:	92 2c       	mov	r9, r2
 c86:	9b 18       	sub	r9, r11
 c88:	0d c0       	rjmp	.+26     	; 0xca4 <vfprintf+0x348>
 c8a:	b2 14       	cp	r11, r2
 c8c:	58 f4       	brcc	.+22     	; 0xca4 <vfprintf+0x348>
 c8e:	b6 01       	movw	r22, r12
 c90:	80 e2       	ldi	r24, 0x20	; 32
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	76 d0       	rcall	.+236    	; 0xd82 <fputc>
 c96:	b3 94       	inc	r11
 c98:	f8 cf       	rjmp	.-16     	; 0xc8a <vfprintf+0x32e>
 c9a:	b2 14       	cp	r11, r2
 c9c:	18 f4       	brcc	.+6      	; 0xca4 <vfprintf+0x348>
 c9e:	2b 18       	sub	r2, r11
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x34a>
 ca2:	98 2c       	mov	r9, r8
 ca4:	21 2c       	mov	r2, r1
 ca6:	a4 fe       	sbrs	r10, 4
 ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <vfprintf+0x36c>
 caa:	b6 01       	movw	r22, r12
 cac:	80 e3       	ldi	r24, 0x30	; 48
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	68 d0       	rcall	.+208    	; 0xd82 <fputc>
 cb2:	a2 fe       	sbrs	r10, 2
 cb4:	16 c0       	rjmp	.+44     	; 0xce2 <vfprintf+0x386>
 cb6:	a1 fc       	sbrc	r10, 1
 cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <vfprintf+0x364>
 cba:	88 e7       	ldi	r24, 0x78	; 120
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <vfprintf+0x368>
 cc0:	88 e5       	ldi	r24, 0x58	; 88
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	b6 01       	movw	r22, r12
 cc6:	0c c0       	rjmp	.+24     	; 0xce0 <vfprintf+0x384>
 cc8:	8a 2d       	mov	r24, r10
 cca:	86 78       	andi	r24, 0x86	; 134
 ccc:	51 f0       	breq	.+20     	; 0xce2 <vfprintf+0x386>
 cce:	a1 fe       	sbrs	r10, 1
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x37a>
 cd2:	8b e2       	ldi	r24, 0x2B	; 43
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <vfprintf+0x37c>
 cd6:	80 e2       	ldi	r24, 0x20	; 32
 cd8:	a7 fc       	sbrc	r10, 7
 cda:	8d e2       	ldi	r24, 0x2D	; 45
 cdc:	b6 01       	movw	r22, r12
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	50 d0       	rcall	.+160    	; 0xd82 <fputc>
 ce2:	89 14       	cp	r8, r9
 ce4:	30 f4       	brcc	.+12     	; 0xcf2 <vfprintf+0x396>
 ce6:	b6 01       	movw	r22, r12
 ce8:	80 e3       	ldi	r24, 0x30	; 48
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	4a d0       	rcall	.+148    	; 0xd82 <fputc>
 cee:	9a 94       	dec	r9
 cf0:	f8 cf       	rjmp	.-16     	; 0xce2 <vfprintf+0x386>
 cf2:	8a 94       	dec	r8
 cf4:	f3 01       	movw	r30, r6
 cf6:	e8 0d       	add	r30, r8
 cf8:	f1 1d       	adc	r31, r1
 cfa:	80 81       	ld	r24, Z
 cfc:	b6 01       	movw	r22, r12
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	40 d0       	rcall	.+128    	; 0xd82 <fputc>
 d02:	81 10       	cpse	r8, r1
 d04:	f6 cf       	rjmp	.-20     	; 0xcf2 <vfprintf+0x396>
 d06:	22 20       	and	r2, r2
 d08:	09 f4       	brne	.+2      	; 0xd0c <vfprintf+0x3b0>
 d0a:	4e ce       	rjmp	.-868    	; 0x9a8 <vfprintf+0x4c>
 d0c:	b6 01       	movw	r22, r12
 d0e:	80 e2       	ldi	r24, 0x20	; 32
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	37 d0       	rcall	.+110    	; 0xd82 <fputc>
 d14:	2a 94       	dec	r2
 d16:	f7 cf       	rjmp	.-18     	; 0xd06 <vfprintf+0x3aa>
 d18:	f6 01       	movw	r30, r12
 d1a:	86 81       	ldd	r24, Z+6	; 0x06
 d1c:	97 81       	ldd	r25, Z+7	; 0x07
 d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x3c8>
 d20:	8f ef       	ldi	r24, 0xFF	; 255
 d22:	9f ef       	ldi	r25, 0xFF	; 255
 d24:	2b 96       	adiw	r28, 0x0b	; 11
 d26:	0f b6       	in	r0, 0x3f	; 63
 d28:	f8 94       	cli
 d2a:	de bf       	out	0x3e, r29	; 62
 d2c:	0f be       	out	0x3f, r0	; 63
 d2e:	cd bf       	out	0x3d, r28	; 61
 d30:	df 91       	pop	r29
 d32:	cf 91       	pop	r28
 d34:	1f 91       	pop	r17
 d36:	0f 91       	pop	r16
 d38:	ff 90       	pop	r15
 d3a:	ef 90       	pop	r14
 d3c:	df 90       	pop	r13
 d3e:	cf 90       	pop	r12
 d40:	bf 90       	pop	r11
 d42:	af 90       	pop	r10
 d44:	9f 90       	pop	r9
 d46:	8f 90       	pop	r8
 d48:	7f 90       	pop	r7
 d4a:	6f 90       	pop	r6
 d4c:	5f 90       	pop	r5
 d4e:	4f 90       	pop	r4
 d50:	3f 90       	pop	r3
 d52:	2f 90       	pop	r2
 d54:	08 95       	ret

00000d56 <strnlen_P>:
 d56:	fc 01       	movw	r30, r24
 d58:	05 90       	lpm	r0, Z+
 d5a:	61 50       	subi	r22, 0x01	; 1
 d5c:	70 40       	sbci	r23, 0x00	; 0
 d5e:	01 10       	cpse	r0, r1
 d60:	d8 f7       	brcc	.-10     	; 0xd58 <strnlen_P+0x2>
 d62:	80 95       	com	r24
 d64:	90 95       	com	r25
 d66:	8e 0f       	add	r24, r30
 d68:	9f 1f       	adc	r25, r31
 d6a:	08 95       	ret

00000d6c <strnlen>:
 d6c:	fc 01       	movw	r30, r24
 d6e:	61 50       	subi	r22, 0x01	; 1
 d70:	70 40       	sbci	r23, 0x00	; 0
 d72:	01 90       	ld	r0, Z+
 d74:	01 10       	cpse	r0, r1
 d76:	d8 f7       	brcc	.-10     	; 0xd6e <strnlen+0x2>
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	8e 0f       	add	r24, r30
 d7e:	9f 1f       	adc	r25, r31
 d80:	08 95       	ret

00000d82 <fputc>:
 d82:	0f 93       	push	r16
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	fb 01       	movw	r30, r22
 d8c:	23 81       	ldd	r18, Z+3	; 0x03
 d8e:	21 fd       	sbrc	r18, 1
 d90:	03 c0       	rjmp	.+6      	; 0xd98 <fputc+0x16>
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	9f ef       	ldi	r25, 0xFF	; 255
 d96:	2c c0       	rjmp	.+88     	; 0xdf0 <fputc+0x6e>
 d98:	22 ff       	sbrs	r18, 2
 d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <fputc+0x46>
 d9c:	46 81       	ldd	r20, Z+6	; 0x06
 d9e:	57 81       	ldd	r21, Z+7	; 0x07
 da0:	24 81       	ldd	r18, Z+4	; 0x04
 da2:	35 81       	ldd	r19, Z+5	; 0x05
 da4:	42 17       	cp	r20, r18
 da6:	53 07       	cpc	r21, r19
 da8:	44 f4       	brge	.+16     	; 0xdba <fputc+0x38>
 daa:	a0 81       	ld	r26, Z
 dac:	b1 81       	ldd	r27, Z+1	; 0x01
 dae:	9d 01       	movw	r18, r26
 db0:	2f 5f       	subi	r18, 0xFF	; 255
 db2:	3f 4f       	sbci	r19, 0xFF	; 255
 db4:	31 83       	std	Z+1, r19	; 0x01
 db6:	20 83       	st	Z, r18
 db8:	8c 93       	st	X, r24
 dba:	26 81       	ldd	r18, Z+6	; 0x06
 dbc:	37 81       	ldd	r19, Z+7	; 0x07
 dbe:	2f 5f       	subi	r18, 0xFF	; 255
 dc0:	3f 4f       	sbci	r19, 0xFF	; 255
 dc2:	37 83       	std	Z+7, r19	; 0x07
 dc4:	26 83       	std	Z+6, r18	; 0x06
 dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <fputc+0x6e>
 dc8:	8b 01       	movw	r16, r22
 dca:	ec 01       	movw	r28, r24
 dcc:	fb 01       	movw	r30, r22
 dce:	00 84       	ldd	r0, Z+8	; 0x08
 dd0:	f1 85       	ldd	r31, Z+9	; 0x09
 dd2:	e0 2d       	mov	r30, r0
 dd4:	09 95       	icall
 dd6:	89 2b       	or	r24, r25
 dd8:	e1 f6       	brne	.-72     	; 0xd92 <fputc+0x10>
 dda:	d8 01       	movw	r26, r16
 ddc:	16 96       	adiw	r26, 0x06	; 6
 dde:	8d 91       	ld	r24, X+
 de0:	9c 91       	ld	r25, X
 de2:	17 97       	sbiw	r26, 0x07	; 7
 de4:	01 96       	adiw	r24, 0x01	; 1
 de6:	17 96       	adiw	r26, 0x07	; 7
 de8:	9c 93       	st	X, r25
 dea:	8e 93       	st	-X, r24
 dec:	16 97       	sbiw	r26, 0x06	; 6
 dee:	ce 01       	movw	r24, r28
 df0:	df 91       	pop	r29
 df2:	cf 91       	pop	r28
 df4:	1f 91       	pop	r17
 df6:	0f 91       	pop	r16
 df8:	08 95       	ret

00000dfa <__ultoa_invert>:
 dfa:	fa 01       	movw	r30, r20
 dfc:	aa 27       	eor	r26, r26
 dfe:	28 30       	cpi	r18, 0x08	; 8
 e00:	51 f1       	breq	.+84     	; 0xe56 <__ultoa_invert+0x5c>
 e02:	20 31       	cpi	r18, 0x10	; 16
 e04:	81 f1       	breq	.+96     	; 0xe66 <__ultoa_invert+0x6c>
 e06:	e8 94       	clt
 e08:	6f 93       	push	r22
 e0a:	6e 7f       	andi	r22, 0xFE	; 254
 e0c:	6e 5f       	subi	r22, 0xFE	; 254
 e0e:	7f 4f       	sbci	r23, 0xFF	; 255
 e10:	8f 4f       	sbci	r24, 0xFF	; 255
 e12:	9f 4f       	sbci	r25, 0xFF	; 255
 e14:	af 4f       	sbci	r26, 0xFF	; 255
 e16:	b1 e0       	ldi	r27, 0x01	; 1
 e18:	3e d0       	rcall	.+124    	; 0xe96 <__ultoa_invert+0x9c>
 e1a:	b4 e0       	ldi	r27, 0x04	; 4
 e1c:	3c d0       	rcall	.+120    	; 0xe96 <__ultoa_invert+0x9c>
 e1e:	67 0f       	add	r22, r23
 e20:	78 1f       	adc	r23, r24
 e22:	89 1f       	adc	r24, r25
 e24:	9a 1f       	adc	r25, r26
 e26:	a1 1d       	adc	r26, r1
 e28:	68 0f       	add	r22, r24
 e2a:	79 1f       	adc	r23, r25
 e2c:	8a 1f       	adc	r24, r26
 e2e:	91 1d       	adc	r25, r1
 e30:	a1 1d       	adc	r26, r1
 e32:	6a 0f       	add	r22, r26
 e34:	71 1d       	adc	r23, r1
 e36:	81 1d       	adc	r24, r1
 e38:	91 1d       	adc	r25, r1
 e3a:	a1 1d       	adc	r26, r1
 e3c:	20 d0       	rcall	.+64     	; 0xe7e <__ultoa_invert+0x84>
 e3e:	09 f4       	brne	.+2      	; 0xe42 <__ultoa_invert+0x48>
 e40:	68 94       	set
 e42:	3f 91       	pop	r19
 e44:	2a e0       	ldi	r18, 0x0A	; 10
 e46:	26 9f       	mul	r18, r22
 e48:	11 24       	eor	r1, r1
 e4a:	30 19       	sub	r19, r0
 e4c:	30 5d       	subi	r19, 0xD0	; 208
 e4e:	31 93       	st	Z+, r19
 e50:	de f6       	brtc	.-74     	; 0xe08 <__ultoa_invert+0xe>
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret
 e56:	46 2f       	mov	r20, r22
 e58:	47 70       	andi	r20, 0x07	; 7
 e5a:	40 5d       	subi	r20, 0xD0	; 208
 e5c:	41 93       	st	Z+, r20
 e5e:	b3 e0       	ldi	r27, 0x03	; 3
 e60:	0f d0       	rcall	.+30     	; 0xe80 <__ultoa_invert+0x86>
 e62:	c9 f7       	brne	.-14     	; 0xe56 <__ultoa_invert+0x5c>
 e64:	f6 cf       	rjmp	.-20     	; 0xe52 <__ultoa_invert+0x58>
 e66:	46 2f       	mov	r20, r22
 e68:	4f 70       	andi	r20, 0x0F	; 15
 e6a:	40 5d       	subi	r20, 0xD0	; 208
 e6c:	4a 33       	cpi	r20, 0x3A	; 58
 e6e:	18 f0       	brcs	.+6      	; 0xe76 <__ultoa_invert+0x7c>
 e70:	49 5d       	subi	r20, 0xD9	; 217
 e72:	31 fd       	sbrc	r19, 1
 e74:	40 52       	subi	r20, 0x20	; 32
 e76:	41 93       	st	Z+, r20
 e78:	02 d0       	rcall	.+4      	; 0xe7e <__ultoa_invert+0x84>
 e7a:	a9 f7       	brne	.-22     	; 0xe66 <__ultoa_invert+0x6c>
 e7c:	ea cf       	rjmp	.-44     	; 0xe52 <__ultoa_invert+0x58>
 e7e:	b4 e0       	ldi	r27, 0x04	; 4
 e80:	a6 95       	lsr	r26
 e82:	97 95       	ror	r25
 e84:	87 95       	ror	r24
 e86:	77 95       	ror	r23
 e88:	67 95       	ror	r22
 e8a:	ba 95       	dec	r27
 e8c:	c9 f7       	brne	.-14     	; 0xe80 <__ultoa_invert+0x86>
 e8e:	00 97       	sbiw	r24, 0x00	; 0
 e90:	61 05       	cpc	r22, r1
 e92:	71 05       	cpc	r23, r1
 e94:	08 95       	ret
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	0a 2e       	mov	r0, r26
 e9c:	06 94       	lsr	r0
 e9e:	57 95       	ror	r21
 ea0:	47 95       	ror	r20
 ea2:	37 95       	ror	r19
 ea4:	27 95       	ror	r18
 ea6:	ba 95       	dec	r27
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <__ultoa_invert+0xa2>
 eaa:	62 0f       	add	r22, r18
 eac:	73 1f       	adc	r23, r19
 eae:	84 1f       	adc	r24, r20
 eb0:	95 1f       	adc	r25, r21
 eb2:	a0 1d       	adc	r26, r0
 eb4:	08 95       	ret

00000eb6 <_exit>:
 eb6:	f8 94       	cli

00000eb8 <__stop_program>:
 eb8:	ff cf       	rjmp	.-2      	; 0xeb8 <__stop_program>
