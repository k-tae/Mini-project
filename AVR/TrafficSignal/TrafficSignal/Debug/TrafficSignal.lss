
TrafficSignal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800100  00800100  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ce  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b72  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079e  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059d  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d9  00000000  00000000  0000341d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 33       	cpi	r26, 0x3B	; 59
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	fe d1       	rcall	.+1020   	; 0x4a6 <main>
  aa:	00 c2       	rjmp	.+1024   	; 0x4ac <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <redGreen>:
uint32_t timeTick = 0 ;
uint8_t state = Auto;

void redGreen()
{
	Led_Off(&led_2);
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	d1 d1       	rcall	.+930    	; 0x456 <Led_Off>
	Led_Off(&led_4);
  b4:	8a e1       	ldi	r24, 0x1A	; 26
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	ce d1       	rcall	.+924    	; 0x456 <Led_Off>
	Led_On(&led_1);
  ba:	81 e3       	ldi	r24, 0x31	; 49
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	e0 d1       	rcall	.+960    	; 0x480 <Led_On>
	Led_On(&led_6);
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	dd c1       	rjmp	.+954    	; 0x480 <Led_On>
  c6:	08 95       	ret

000000c8 <redYellow>:
  c8:	8a e0       	ldi	r24, 0x0A	; 10
}

void redYellow()
{
	Led_Off(&led_6);
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	c4 d1       	rcall	.+904    	; 0x456 <Led_Off>
	Led_On(&led_5);
  ce:	86 e3       	ldi	r24, 0x36	; 54
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	d6 c1       	rjmp	.+940    	; 0x480 <Led_On>
  d4:	08 95       	ret

000000d6 <greenRed>:
}

void greenRed()
{
	Led_Off(&led_5);
  d6:	86 e3       	ldi	r24, 0x36	; 54
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	bd d1       	rcall	.+890    	; 0x456 <Led_Off>
	Led_Off(&led_1);
  dc:	81 e3       	ldi	r24, 0x31	; 49
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	ba d1       	rcall	.+884    	; 0x456 <Led_Off>
	Led_On(&led_3);
  e2:	8c e2       	ldi	r24, 0x2C	; 44
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	cc d1       	rcall	.+920    	; 0x480 <Led_On>
	Led_On(&led_4);
  e8:	8a e1       	ldi	r24, 0x1A	; 26
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	c9 c1       	rjmp	.+914    	; 0x480 <Led_On>
  ee:	08 95       	ret

000000f0 <yellowRed>:
  f0:	8c e2       	ldi	r24, 0x2C	; 44
}

void yellowRed()
{
	Led_Off(&led_3);
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	b0 d1       	rcall	.+864    	; 0x456 <Led_Off>
	Led_On(&led_2);
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	c2 c1       	rjmp	.+900    	; 0x480 <Led_On>
  fc:	08 95       	ret

000000fe <autoMode>:
}

void autoMode()
{
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
	static uint32_t prevTime = 0 ;
	switch(ledState)
 102:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ledState>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	99 f1       	breq	.+102    	; 0x170 <autoMode+0x72>
 10a:	38 f0       	brcs	.+14     	; 0x11a <autoMode+0x1c>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	09 f4       	brne	.+2      	; 0x112 <autoMode+0x14>
 110:	5a c0       	rjmp	.+180    	; 0x1c6 <autoMode+0xc8>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	09 f4       	brne	.+2      	; 0x118 <autoMode+0x1a>
 116:	81 c0       	rjmp	.+258    	; 0x21a <autoMode+0x11c>
 118:	a8 c0       	rjmp	.+336    	; 0x26a <autoMode+0x16c>
	{
		case RG:
		redGreen();
 11a:	c9 df       	rcall	.-110    	; 0xae <redGreen>
		if(timeTick - prevTime >= 3000)
 11c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeTick>
 120:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timeTick+0x1>
 124:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timeTick+0x2>
 128:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timeTick+0x3>
 12c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 138:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 13c:	8c 01       	movw	r16, r24
 13e:	9d 01       	movw	r18, r26
 140:	04 1b       	sub	r16, r20
 142:	15 0b       	sbc	r17, r21
 144:	26 0b       	sbc	r18, r22
 146:	37 0b       	sbc	r19, r23
 148:	b9 01       	movw	r22, r18
 14a:	a8 01       	movw	r20, r16
 14c:	48 3b       	cpi	r20, 0xB8	; 184
 14e:	5b 40       	sbci	r21, 0x0B	; 11
 150:	61 05       	cpc	r22, r1
 152:	71 05       	cpc	r23, r1
 154:	08 f4       	brcc	.+2      	; 0x158 <autoMode+0x5a>
 156:	89 c0       	rjmp	.+274    	; 0x26a <autoMode+0x16c>
		{
			prevTime = timeTick;
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 164:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			ledState = RY;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledState>
		}
		break;
		case RY:
		redYellow();
 16e:	7d c0       	rjmp	.+250    	; 0x26a <autoMode+0x16c>
 170:	ab df       	rcall	.-170    	; 0xc8 <redYellow>
		if(timeTick - prevTime >= 1000)
 172:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeTick>
 176:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timeTick+0x1>
 17a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timeTick+0x2>
 17e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timeTick+0x3>
 182:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 192:	8c 01       	movw	r16, r24
 194:	9d 01       	movw	r18, r26
 196:	04 1b       	sub	r16, r20
 198:	15 0b       	sbc	r17, r21
 19a:	26 0b       	sbc	r18, r22
 19c:	37 0b       	sbc	r19, r23
 19e:	b9 01       	movw	r22, r18
 1a0:	a8 01       	movw	r20, r16
 1a2:	48 3e       	cpi	r20, 0xE8	; 232
 1a4:	53 40       	sbci	r21, 0x03	; 3
 1a6:	61 05       	cpc	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	08 f4       	brcc	.+2      	; 0x1ae <autoMode+0xb0>
 1ac:	5e c0       	rjmp	.+188    	; 0x26a <autoMode+0x16c>
		{
			prevTime = timeTick;
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ba:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			ledState = GR;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledState>
		}
		break;
		case GR:
		greenRed();
 1c4:	52 c0       	rjmp	.+164    	; 0x26a <autoMode+0x16c>
 1c6:	87 df       	rcall	.-242    	; 0xd6 <greenRed>
		if(timeTick - prevTime >= 3000)
 1c8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeTick>
 1cc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timeTick+0x1>
 1d0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timeTick+0x2>
 1d4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timeTick+0x3>
 1d8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1e8:	8c 01       	movw	r16, r24
 1ea:	9d 01       	movw	r18, r26
 1ec:	04 1b       	sub	r16, r20
 1ee:	15 0b       	sbc	r17, r21
 1f0:	26 0b       	sbc	r18, r22
 1f2:	37 0b       	sbc	r19, r23
 1f4:	b9 01       	movw	r22, r18
 1f6:	a8 01       	movw	r20, r16
 1f8:	48 3b       	cpi	r20, 0xB8	; 184
 1fa:	5b 40       	sbci	r21, 0x0B	; 11
 1fc:	61 05       	cpc	r22, r1
 1fe:	71 05       	cpc	r23, r1
 200:	a0 f1       	brcs	.+104    	; 0x26a <autoMode+0x16c>
		{
			prevTime = timeTick;
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 20e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			ledState = YR;
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledState>
		}
		break;
		case YR:
		yellowRed();
 218:	28 c0       	rjmp	.+80     	; 0x26a <autoMode+0x16c>
 21a:	6a df       	rcall	.-300    	; 0xf0 <yellowRed>
		if(timeTick - prevTime >= 1000)
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeTick>
 220:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timeTick+0x1>
 224:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timeTick+0x2>
 228:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timeTick+0x3>
 22c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 234:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 238:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 23c:	8c 01       	movw	r16, r24
 23e:	9d 01       	movw	r18, r26
 240:	04 1b       	sub	r16, r20
 242:	15 0b       	sbc	r17, r21
 244:	26 0b       	sbc	r18, r22
 246:	37 0b       	sbc	r19, r23
 248:	b9 01       	movw	r22, r18
 24a:	a8 01       	movw	r20, r16
 24c:	48 3e       	cpi	r20, 0xE8	; 232
 24e:	53 40       	sbci	r21, 0x03	; 3
 250:	61 05       	cpc	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	50 f0       	brcs	.+20     	; 0x26a <autoMode+0x16c>
		{
			prevTime = timeTick;
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 262:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			ledState = RG;
 266:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ledState>
		}
		break;
	}
}
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <manualMode>:

void manualMode()
{
	if (Button_GetState(&btnSwitching)==ACT_RELEASED)
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	b2 d0       	rcall	.+356    	; 0x3da <Button_GetState>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	71 f4       	brne	.+28     	; 0x296 <manualMode+0x26>
	{
		ledState = (ledState +1)%4;
 27a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ledState>
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	83 70       	andi	r24, 0x03	; 3
 284:	90 78       	andi	r25, 0x80	; 128
 286:	99 23       	and	r25, r25
 288:	24 f4       	brge	.+8      	; 0x292 <manualMode+0x22>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	8c 6f       	ori	r24, 0xFC	; 252
 28e:	9f 6f       	ori	r25, 0xFF	; 255
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ledState>
	}
	switch(ledState)
 296:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ledState>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	41 f0       	breq	.+16     	; 0x2ae <manualMode+0x3e>
 29e:	28 f0       	brcs	.+10     	; 0x2aa <manualMode+0x3a>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <manualMode+0x42>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <manualMode+0x46>
	{
		case RG:
		redGreen();
 2a8:	08 95       	ret
		break;
 2aa:	01 cf       	rjmp	.-510    	; 0xae <redGreen>
		case RY:
		redYellow();
 2ac:	08 95       	ret
		break;
		case GR:
		greenRed();
 2ae:	0c cf       	rjmp	.-488    	; 0xc8 <redYellow>
 2b0:	08 95       	ret
		break;
 2b2:	11 cf       	rjmp	.-478    	; 0xd6 <greenRed>
		case YR:
		yellowRed();
 2b4:	08 95       	ret
 2b6:	1c cf       	rjmp	.-456    	; 0xf0 <yellowRed>
 2b8:	08 95       	ret

000002ba <TrafficSignal_init>:
}

//초기화
void TrafficSignal_init()
{
	Led_init(&led_1, &DDRF, &PORTF, 0);
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	42 e6       	ldi	r20, 0x62	; 98
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	61 e6       	ldi	r22, 0x61	; 97
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	81 e3       	ldi	r24, 0x31	; 49
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	b4 d0       	rcall	.+360    	; 0x432 <Led_init>
	Led_init(&led_2, &DDRF, &PORTF, 1);
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	42 e6       	ldi	r20, 0x62	; 98
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	61 e6       	ldi	r22, 0x61	; 97
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	8f e0       	ldi	r24, 0x0F	; 15
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	ac d0       	rcall	.+344    	; 0x432 <Led_init>
	Led_init(&led_3, &DDRF, &PORTF, 2);
 2da:	22 e0       	ldi	r18, 0x02	; 2
 2dc:	42 e6       	ldi	r20, 0x62	; 98
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	61 e6       	ldi	r22, 0x61	; 97
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	8c e2       	ldi	r24, 0x2C	; 44
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	a4 d0       	rcall	.+328    	; 0x432 <Led_init>
	Led_init(&led_4, &DDRF, &PORTF, 3);
 2ea:	23 e0       	ldi	r18, 0x03	; 3
 2ec:	42 e6       	ldi	r20, 0x62	; 98
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	61 e6       	ldi	r22, 0x61	; 97
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	8a e1       	ldi	r24, 0x1A	; 26
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	9c d0       	rcall	.+312    	; 0x432 <Led_init>
	Led_init(&led_5, &DDRF, &PORTF, 4);
 2fa:	24 e0       	ldi	r18, 0x04	; 4
 2fc:	42 e6       	ldi	r20, 0x62	; 98
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	61 e6       	ldi	r22, 0x61	; 97
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	86 e3       	ldi	r24, 0x36	; 54
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	94 d0       	rcall	.+296    	; 0x432 <Led_init>
	Led_init(&led_6, &DDRF, &PORTF, 5);
 30a:	25 e0       	ldi	r18, 0x05	; 5
 30c:	42 e6       	ldi	r20, 0x62	; 98
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	61 e6       	ldi	r22, 0x61	; 97
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	8a e0       	ldi	r24, 0x0A	; 10
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	8c d0       	rcall	.+280    	; 0x432 <Led_init>
	Button_init(&btnAuto, &DDRA, &PINA, 0);
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	49 e3       	ldi	r20, 0x39	; 57
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	6a e3       	ldi	r22, 0x3A	; 58
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	84 e1       	ldi	r24, 0x14	; 20
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	43 d0       	rcall	.+134    	; 0x3b0 <Button_init>
	Button_init(&btnManual, &DDRA, &PINA, 1);
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	49 e3       	ldi	r20, 0x39	; 57
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	6a e3       	ldi	r22, 0x3A	; 58
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	86 e2       	ldi	r24, 0x26	; 38
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	3b d0       	rcall	.+118    	; 0x3b0 <Button_init>
	Button_init(&btnSwitching, &DDRA, &PINA, 2);
 33a:	22 e0       	ldi	r18, 0x02	; 2
 33c:	49 e3       	ldi	r20, 0x39	; 57
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	6a e3       	ldi	r22, 0x3A	; 58
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	80 e2       	ldi	r24, 0x20	; 32
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	33 c0       	rjmp	.+102    	; 0x3b0 <Button_init>
 34a:	08 95       	ret

0000034c <TrafficSignal_execute>:
 34c:	84 e1       	ldi	r24, 0x14	; 20
	
}
//실행
void TrafficSignal_execute()
{
	if (Button_GetState(&btnAuto))
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	44 d0       	rcall	.+136    	; 0x3da <Button_GetState>
 352:	81 11       	cpse	r24, r1
	{
		state = Auto;
 354:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state>
	}
	if (Button_GetState(&btnManual))
 358:	86 e2       	ldi	r24, 0x26	; 38
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	3e d0       	rcall	.+124    	; 0x3da <Button_GetState>
 35e:	88 23       	and	r24, r24
 360:	19 f0       	breq	.+6      	; 0x368 <TrafficSignal_execute+0x1c>
	{
		state = Manual;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
	}

	switch(state)
 368:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 36c:	88 23       	and	r24, r24
 36e:	19 f0       	breq	.+6      	; 0x376 <TrafficSignal_execute+0x2a>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	19 f0       	breq	.+6      	; 0x37a <TrafficSignal_execute+0x2e>
	{
		case Auto:
		autoMode();
 374:	03 c0       	rjmp	.+6      	; 0x37c <TrafficSignal_execute+0x30>
		break;
 376:	c3 de       	rcall	.-634    	; 0xfe <autoMode>
		case Manual:
		manualMode();
 378:	01 c0       	rjmp	.+2      	; 0x37c <TrafficSignal_execute+0x30>
 37a:	7a df       	rcall	.-268    	; 0x270 <manualMode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f e9       	ldi	r24, 0x9F	; 159
 37e:	9f e0       	ldi	r25, 0x0F	; 15
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <TrafficSignal_execute+0x34>
 384:	00 c0       	rjmp	.+0      	; 0x386 <TrafficSignal_execute+0x3a>
 386:	00 00       	nop
		break;
	}
	_delay_ms(1);
	timeTick++;
 388:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeTick>
 38c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timeTick+0x1>
 390:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timeTick+0x2>
 394:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timeTick+0x3>
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	a1 1d       	adc	r26, r1
 39c:	b1 1d       	adc	r27, r1
 39e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timeTick>
 3a2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timeTick+0x1>
 3a6:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timeTick+0x2>
 3aa:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timeTick+0x3>
 3ae:	08 95       	ret

000003b0 <Button_init>:
﻿#include "Button.h"

void Button_init(button_t *btn, volatile uint8_t *ddr,volatile uint8_t *pin,uint8_t pinNum) //버튼이 연결된 곳을 정의하는 함수
{
 3b0:	fc 01       	movw	r30, r24
	btn -> DDR = ddr;
 3b2:	71 83       	std	Z+1, r23	; 0x01
 3b4:	60 83       	st	Z, r22
	btn -> PIN = pin;
 3b6:	53 83       	std	Z+3, r21	; 0x03
 3b8:	42 83       	std	Z+2, r20	; 0x02
	btn -> pinNum = pinNum;
 3ba:	24 83       	std	Z+4, r18	; 0x04
	btn -> prevstate = RELEASED;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	85 83       	std	Z+5, r24	; 0x05
	*btn -> DDR &= ~(1<<btn->pinNum); //DDRx의 pinNum을 입력모드로 바꾸겠다.
 3c0:	fb 01       	movw	r30, r22
 3c2:	30 81       	ld	r19, Z
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <Button_init+0x1e>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	2a 95       	dec	r18
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <Button_init+0x1a>
 3d2:	80 95       	com	r24
 3d4:	83 23       	and	r24, r19
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <Button_GetState>:
}

uint8_t Button_GetState(button_t *btn) //버튼의 동작을 얻어오는 함수
{
 3da:	fc 01       	movw	r30, r24
	uint8_t curState = *(btn -> PIN) & (1<<(btn -> pinNum));
 3dc:	a2 81       	ldd	r26, Z+2	; 0x02
 3de:	b3 81       	ldd	r27, Z+3	; 0x03
 3e0:	8c 91       	ld	r24, X
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	04 80       	ldd	r0, Z+4	; 0x04
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Button_GetState+0x14>
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Button_GetState+0x10>
 3f2:	28 23       	and	r18, r24

	if ((curState == PUSHED) && ((btn -> prevstate) == RELEASED))
 3f4:	59 f4       	brne	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	85 81       	ldd	r24, Z+5	; 0x05
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	41 f4       	brne	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fc:	af e3       	ldi	r26, 0x3F	; 63
 3fe:	bc e9       	ldi	r27, 0x9C	; 156
 400:	11 97       	sbiw	r26, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = PUSHED;
 408:	15 82       	std	Z+5, r1	; 0x05
		return ACT_PUSHED;
 40a:	08 95       	ret
	}

	else if ((curState != PUSHED) && (btn -> prevstate  == PUSHED))
 40c:	22 23       	and	r18, r18
 40e:	69 f0       	breq	.+26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 410:	85 81       	ldd	r24, Z+5	; 0x05
 412:	81 11       	cpse	r24, r1
 414:	0c c0       	rjmp	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9c e9       	ldi	r25, 0x9C	; 156
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	{
		_delay_ms(10);
		btn -> prevstate = RELEASED;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	85 83       	std	Z+5, r24	; 0x05
		return ACT_RELEASED;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	08 95       	ret
	}
	return ACT_NONE;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret

00000432 <Led_init>:
﻿#include "Led.h"

void Led_init(led_t *led, volatile uint8_t *ddr,volatile uint8_t *port,uint8_t pinNum)
{
 432:	fc 01       	movw	r30, r24
	led -> DDR = ddr;
 434:	71 83       	std	Z+1, r23	; 0x01
 436:	60 83       	st	Z, r22
	led -> PORT = port;
 438:	53 83       	std	Z+3, r21	; 0x03
 43a:	42 83       	std	Z+2, r20	; 0x02
	led -> pinNum = pinNum;
 43c:	24 83       	std	Z+4, r18	; 0x04
	*led -> DDR |= (1<<led->pinNum);
 43e:	fb 01       	movw	r30, r22
 440:	30 81       	ld	r19, Z
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <Led_init+0x1a>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <Led_init+0x16>
 450:	83 2b       	or	r24, r19
 452:	80 83       	st	Z, r24
 454:	08 95       	ret

00000456 <Led_Off>:
}

void Led_Off(led_t *led)
{
	*(led->PORT) = (*(led->PORT) & ~(ON<< led -> pinNum));
 456:	dc 01       	movw	r26, r24
 458:	12 96       	adiw	r26, 0x02	; 2
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	13 97       	sbiw	r26, 0x03	; 3
 460:	40 81       	ld	r20, Z
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	14 96       	adiw	r26, 0x04	; 4
 46a:	0c 90       	ld	r0, X
 46c:	02 c0       	rjmp	.+4      	; 0x472 <Led_Off+0x1c>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <Led_Off+0x18>
 476:	cb 01       	movw	r24, r22
 478:	80 95       	com	r24
 47a:	84 23       	and	r24, r20
 47c:	80 83       	st	Z, r24
 47e:	08 95       	ret

00000480 <Led_On>:
}

void Led_On(led_t *led)
{
 480:	dc 01       	movw	r26, r24
	*(led->PORT) = (*(led->PORT) | (ON<< led -> pinNum));
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	ed 91       	ld	r30, X+
 486:	fc 91       	ld	r31, X
 488:	13 97       	sbiw	r26, 0x03	; 3
 48a:	40 81       	ld	r20, Z
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	c9 01       	movw	r24, r18
 492:	14 96       	adiw	r26, 0x04	; 4
 494:	0c 90       	ld	r0, X
 496:	02 c0       	rjmp	.+4      	; 0x49c <Led_On+0x1c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <Led_On+0x18>
 4a0:	84 2b       	or	r24, r20
 4a2:	80 83       	st	Z, r24
 4a4:	08 95       	ret

000004a6 <main>:
#include "ap/TrafficSignal.h"
#include "driver/Led/Led.h"

int main(void)
{
	TrafficSignal_init();
 4a6:	09 df       	rcall	.-494    	; 0x2ba <TrafficSignal_init>
    while (1) 
    {
		TrafficSignal_execute();
 4a8:	51 df       	rcall	.-350    	; 0x34c <TrafficSignal_execute>
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <main+0x2>

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
